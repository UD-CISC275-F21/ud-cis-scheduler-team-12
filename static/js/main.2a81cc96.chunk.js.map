{"version":3,"sources":["assets/stateInitializers/semesterMap.ts","assets/stateInitializers/buttonList.ts","assets/courses.ts","assets/images/spiderman_meme.jpeg","components/Card_Components/CourseComp.tsx","components/Views/ClearSemesterButton.tsx","components/Views/ClearAllSemesterButton.tsx","components/Views/Board.tsx","components/Right_Menu/SearchBar.tsx","components/Right_Menu/DisplayCourses.tsx","components/Left_Menu/SideMenu.tsx","assets/stateInitializers/radioToggle.ts","components/Card_Components/SemesterComp.tsx","components/Views/DegreePlan.tsx","components/Card_Components/BinCourseCard.tsx","components/Save_Later_Bin/ClearBinButton.tsx","components/Save_Later_Bin/SaveBin.tsx","components/Save_Load_Semesters/SaveButton.tsx","components/Save_Load_Semesters/ClearSavedSemestersButton.tsx","components/Save_Load_Semesters/AccessSavedSemestersButton.tsx","components/Add_Remove_Semesters/AddSemesterButton.tsx","components/Add_Remove_Semesters/RemoveSemesterButton.tsx","components/Save_Load_Semesters/SelectedSaveHeader.tsx","components/MainPage.tsx","components/LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SEMESTER_MAP_INIT","buttonListInit","name","value","courseData","CourseComp","course","SET_SEMESTER_MAP","SEMESTER_MAP","semesterSelect","useState","titleEditMode","setTitleEditMode","descriptionEditMode","setDescriptionEditMode","creditsEditMode","setCreditsEditMode","updateColor","preReqCheck","changeName","id","enteredName","NEW_SEMESTER_MAP","duplicateCourse","flag","Object","values","forEach","toLowerCase","replace","isCourseInCourseData","Swal","fire","title","text","icon","imageUrl","SpiderMan","item","keys","preReq","req","every","handleSubmit","cardProperty","event","preventDefault","stopPropagation","form","currentTarget","floatingInput","enteredCredits","credits","changeCredits","enteredDescription","description","changeDescription","OverlayTrigger","trigger","show","placement","indexOf","overlay","Popover","className","filter","courseName","map","Card","style","width","color","Container","Row","Col","motion","div","onClick","Title","Form","onSubmit","Control","outline","border","boxShadow","textAlign","autoFocus","size","type","placeholder","key","length","removeCourse","Body","Text","timeStart","timeEnd","schedule","Accordion","defaultActiveKey","Item","eventKey","Header","ClearSemesterButton","ClearAllSemesterButton","removePreReq","margin","entries","Board","setSemesterSelect","setSemesterHeader","semesterHeader","SET_SAVE_BIN","SAVE_BIN","binVisible","buttonList","classListToPrint","buttonToggle","checkPreReqWarning","ToggleButtonGroup","onChange","val","radio","idx","ToggleButton","variant","xs","md","AnimatePresence","drag","dragConstraints","top","bottom","right","left","onDragEnd","includes","dragElastic","initial","opacity","x","animate","exit","y","transition","ease","duration","SearchBar","setQuery","target","DisplayCourses","setBinVisible","query","addCourse","foundCourse","findCourseInSemester","foundCourseInPlan","findCourseInEntirePlan","console","log","push","DropdownButton","Dropdown","as","SEMESTER_MAP_BUFFER","createCourse","post","flush","SideMenu","setVisibleView","Nav","justify","onSelect","Link","SELECT_MAP_INIT","SemesterComp","courseList","SET_SELECT_MAP","SELECT_MAP","semesterIndex","selectToggle","NEW_SELECT_MAP","Table","scope","DegreePlan","SEMESTER_MAP_TO_PRINT","BinCourseCard","ClearBinButton","SaveBin","binListToPrint","Offcanvas","onHide","scroll","backdrop","closeButton","SaveButton","saveSemester","findPreReqErrorInEntirePlan","input","showCancelButton","then","result","localStorage","setItem","JSON","stringify","ClearSavedSemestersButton","showDenyButton","confirmButtonText","denyButtonText","isConfirmed","clear","isDenied","AccessSavedSemesters","setSemesterCount","semesterCount","setButtonList","setSelectedSave","loadSave","pop","removeAllCourses","retrievedObject","getItem","parsedObject","count","numberOfVisibleSemesters","semesterCountBuffer","i","getSemesterName","mapKey","objKey","addCourses","addSemester","addLoadedSave","getNumberOfSemesters","parse","newCount","season","Toggle","Menu","display","removeItem","deleteSavedSemester","AddSemesterButton","RemoveSemesterButton","removeSemester","SelectedSaveHeader","selectedSave","MainPage","visibleView","LandingPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXAYeA,G,MAVqC,CAChD,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,KCAMC,EAVQ,CACnB,CAAEC,KAAM,SAAUC,MAAO,GACzB,CAAED,KAAM,WAAYC,MAAO,GAC3B,CAAED,KAAM,SAAUC,MAAO,GACzB,CAAED,KAAM,WAAYC,MAAO,GAC3B,CAAED,KAAM,SAAUC,MAAO,GACzB,CAAED,KAAM,WAAYC,MAAO,GAC3B,CAAED,KAAM,SAAUC,MAAO,GACzB,CAAED,KAAM,WAAYC,MAAO,I,6FCwNhBC,EA9Nc,CACzB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,4CACf,QAAW,EACX,OAAU,GACV,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,4CACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,4CACf,QAAW,EACX,OAAU,CAAC,YAAY,EAAO,YAAY,GAC1C,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,uCACf,QAAW,EACX,OAAU,GACV,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,uCACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAU,GACV,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAU,GACV,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAU,CAAC,YAAY,EAAO,YAAY,GAC1C,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,IACb,QAAW,IACX,SAAY,MACZ,YAAe,gDACf,QAAW,EACX,OAAU,CAAC,YAAY,EAAO,YAAY,GAC1C,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAU,CAAC,YAAY,EAAO,YAAY,GAC1C,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,uCACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,uCACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAU,CAAC,YAAY,EAAO,YAAY,GAC1C,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,IACb,QAAW,KACX,SAAY,MACZ,YAAe,4CACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,mCACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAU,CAAC,YAAY,GACvB,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,IACb,QAAW,KACX,SAAY,KACZ,YAAe,mCACf,QAAW,EACX,OAAU,GACV,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,mCACf,QAAW,EACX,OAAU,GACV,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAU,CAAC,YAAY,EAAO,YAAY,GAC1C,YAAe,U,qDC7NR,G,MAAA,IAA0B,6C,OCe1B,SAASC,EAAT,GAIG,IAJmBC,EAIpB,EAJoBA,OAAQC,EAI5B,EAJ4BA,iBAAkBC,EAI9C,EAJ8CA,aAAcC,EAI5D,EAJ4DA,eAOzE,EAA0CC,oBAAkB,GAA5D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsDF,oBAAkB,GAAxE,mBAAOG,EAAP,KAA4BC,EAA5B,KACA,EAA8CJ,oBAAkB,GAAhE,mBAAOK,EAAP,KAAwBC,EAAxB,KAiCA,SAASC,EAAYX,GACjB,OAAOA,EAAOY,YAalB,SAASC,EAAWC,EAAYC,GAC5B,IAAMC,EAAgB,eAAOd,GACvBe,EAZV,SAA8BrB,GAC1B,IAAIsB,GAAO,EAMX,OALAC,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAArB,GAC1BA,EAAOJ,KAAK0B,cAAcC,QAAQ,MAAO,MAAQ3B,EAAK0B,cAAcC,QAAQ,MAAO,MACnFL,GAAO,MAGRA,EAKiBM,CAAqBT,GAExCE,EAqBDQ,IAAKC,KAAK,CACNC,MAAO,yBACPC,KAAK,GAAD,OAAKb,EAAL,sDACJc,KAAM,QACNC,SAAUC,KAvBdZ,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAW,GAC9Bb,OAAOc,KAAKD,EAAKE,QAAQb,SAAQ,SAAAc,GACzBA,IAAQpB,EACRiB,EAAKE,OAAOC,IAAO,EACZA,IAAQrC,EAAWgB,GAAIlB,OAC9BoC,EAAKE,OAAOC,IAAO,MAGvBhB,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEvBD,EAAYqB,MAEhBlC,EAAWgB,GAAIlB,KAAOmB,EACtBd,EAAiBe,GACjBV,GAAiB,IA2BzB,IAAM+B,EAAe,SAACvB,EAAYwB,GAAb,OAAsC,SAACC,GACxDA,EAAMC,iBACND,EAAME,kBACN,IAAMC,EAAOH,EAAMI,cAEnB,OAAOL,GACP,IAAK,OACDzB,EAAWC,EAAI4B,EAAKE,cAAc/C,OAClC,MACJ,IAAK,WAjBT,SAAuBiB,EAAY+B,GAC/B,IAAM7B,EAAgB,eAAOd,GAE7BJ,EAAWgB,GAAIgC,SAAWD,EAC1B5C,EAAiBe,GACjBN,GAAmB,GAafqC,CAAcjC,EAAI4B,EAAKE,cAAc/C,OACrC,MACJ,IAAK,eA5BT,SAA2BiB,EAAYkC,GACnC,IAAMhC,EAAgB,eAAOd,GAE7BJ,EAAWgB,GAAImC,YAAcD,EAC7B/C,EAAiBe,GACjBR,GAAuB,GAwBnB0C,CAAkBpC,EAAI4B,EAAKE,cAAc/C,UAMjD,OACI,8BAEI,cAACsD,EAAA,EAAD,CAAgBC,QAAS,CAAC,QAAS,SAAUC,MAAOlC,OAAOC,OAAOpB,EAAOkC,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAAkCsD,UAAYpD,EAAa,GAAGC,GAAgBoD,QAAQvD,GAAU,EAAI,SAAW,MAAQwD,QACpN,eAACC,EAAA,EAAD,CAASC,UAAU,UAAU5C,GAAG,iBAAhC,sBAA2DK,OAAOc,KAAKjC,EAAOkC,QAAQyB,QAAO,SAAAC,GAAU,OACrE,IAA9B5D,EAAOkC,OAAO0B,MAAuBC,KAAI,SAAA7D,GAAM,OAC/C,8BAAmBA,GAATA,MAFd,OADJ,SAII,eAAC8D,EAAA,EAAD,CAAMJ,UAAU,OAAO,cAAY,cAAcK,MAAO,CAAEC,MAAO,OAAQC,MAAOtD,EAAYX,IAA5F,UACI,cAACkE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAOC,IAAR,CACIC,QAAS,kBAAMjE,GAAkBD,IADrC,SAGI,eAACyD,EAAA,EAAKU,MAAN,CAAYd,UAAU,aAAtB,WACOrD,GAAiBL,EAAOJ,MACR,KAAhBI,EAAOJ,MAAeS,IAAkB,cAACoE,EAAA,EAAD,CAAMC,SAAUrC,EAAarC,EAAOc,GAAI,QAAxC,SACvC,cAAC2D,EAAA,EAAKE,QAAN,CACIZ,MAAO,CACHE,MAAO,QACPW,QAAS,IACTC,OAAQ,iBACRC,UAAW,OACXC,UAAW,UAGfC,WAAS,EACTC,KAAK,KACLnE,GAAG,gBACHoE,KAAK,OACLC,YAA8B,KAAhBnF,EAAOJ,KAAc,aAAeI,EAAOJ,cAKzE,wBAAQ8D,UAAU,gBAAgBa,QAAS,kBArJvE,SAAsBzD,GAClB,IAAME,EAAgB,eAAOd,GAED,KAAxBJ,EAAWgB,GAAIlB,MACfoB,EAAiB,GAAGb,GAAkBa,EAAiB,GAAGb,GAAgBwD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,aACtGhB,EAAWgB,KAElBK,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAxB,GAC9BsB,OAAOc,KAAKpC,EAAMqC,QAAQb,SAAQ,SAAAuC,GAC3BA,IAAe9D,EAAWgB,GAAIlB,OAC7BC,EAAMqC,OAAO0B,IAAc,SAIvCzC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEvBD,EAAYqB,WAK5BhB,EAAiB,GAAGb,GAAkBa,EAAiB,GAAGb,GAAgBwD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,MAC7Gb,EAAiBe,GAyHwDsE,CAAatF,EAAOc,KAArE,SACI,cAAC,IAAD,aAKhB,eAACgD,EAAA,EAAKyB,KAAN,CAAW7B,UAAU,YAArB,UACI,cAACW,EAAA,EAAOC,IAAR,CACIC,QAAS,kBAAM7D,GAAoBD,IADvC,SAGI,eAACqD,EAAA,EAAK0B,KAAN,wBACiB/E,GAAsC,IAAnBT,EAAO8C,SAAkB9C,EAAO8C,SAC1C,IAAnB9C,EAAO8C,SAAiBrC,IAAoB,cAACgE,EAAA,EAAD,CAAMC,SAAUrC,EAAarC,EAAOc,GAAI,WAAxC,SAC3C,cAAC2D,EAAA,EAAKE,QAAN,CACIZ,MAAO,CACHE,MAAO,QACPW,QAAS,IACTC,OAAQ,iBACRC,UAAW,OACXC,UAAW,UAGfC,WAAS,EACTC,KAAK,KACLnE,GAAG,gBACHoE,KAAK,OACLC,YAAiC,IAAnBnF,EAAO8C,QAAgB,qBAAuB,GAAG9C,EAAO8C,iBAKtF,eAACgB,EAAA,EAAK0B,KAAN,oBACWxF,EAAOyF,UADlB,QACkCzF,EAAO0F,WAIzC,eAAC5B,EAAA,EAAK0B,KAAN,oBACWxF,EAAO2F,YAElB,cAACvB,EAAA,EAAD,CAAKV,UAAU,oBAGf,cAACU,EAAA,EAAD,CAAKV,UAAU,iBAAf,SACI,cAACkC,EAAA,EAAD,CAAWC,iBAAyC,KAAvB7F,EAAOiD,YAAqB,IAAM,IAA/D,SACI,eAAC2C,EAAA,EAAUE,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACH,EAAA,EAAUI,OAAX,CAAkBzB,QAAS,kBAAM/D,GAAuB,IAAxD,qBACA,cAAC6D,EAAA,EAAOC,IAAR,CACIC,QAAS,kBAAM/D,GAAwBD,IAD3C,SAGI,eAACqF,EAAA,EAAUL,KAAX,CAAgB7B,UAAU,mBAA1B,WACOnD,GAAuBP,EAAOiD,aACP,KAAvBjD,EAAOiD,aAAsB1C,IAAwB,cAACkE,EAAA,EAAD,CAAMC,SAAUrC,EAAarC,EAAOc,GAAI,eAAxC,SACpD,cAAC2D,EAAA,EAAKE,QAAN,CACIZ,MAAO,CACHE,MAAO,QACPW,QAAS,IACTC,OAAQ,iBACRC,UAAW,OACXC,UAAW,UAGfC,WAAS,EACTC,KAAK,KACLnE,GAAG,gBACHoE,KAAK,OACLC,YAAqC,KAAvBnF,EAAOiD,YAAqB,oBAAsBjD,EAAOiD,sC,WCzO5G,SAASgD,EAAT,GAGE,IAH6BhG,EAG9B,EAH8BA,iBAAkBC,EAGhD,EAHgDA,aAAcC,EAG9D,EAH8DA,eAuC1E,OACI,wBAAQoE,QAnCZ,WACIpD,OAAOC,OAAOlB,EAAa,GAAGC,IAAiBkB,SAAQ,SAAAxB,GAO3D,IAAsBG,IANDH,EAOjBsB,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAxB,GAC9BsB,OAAOc,KAAKpC,EAAMqC,QAAQb,SAAQ,SAAAuC,GAC3BA,IAAe5D,EAAOJ,OACrBC,EAAMqC,OAAO0B,IAAc,SAIvCzC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAQvC,SAAqBZ,GACVA,EAAOY,YAPFD,CAAYqB,aAnBxB/B,EAAiB,2BAAIC,GAAL,kBAAoB,GAAGC,EAAiB,OA8BrB,cAAY,qBAA/C,oC,OC1CO,SAAS+F,EAAT,GAEE,IAFgCjG,EAEjC,EAFiCA,iBAAkBC,EAEnD,EAFmDA,aAe/D,SAASiG,EAAanG,GAClBmB,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAxB,GAC9BsB,OAAOc,KAAKpC,EAAMqC,QAAQb,SAAQ,SAAAuC,GAC3BA,IAAe5D,EAAOJ,OACrBC,EAAMqC,OAAO0B,IAAc,SAIvCzC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAQvC,SAAqBZ,GACVA,EAAOY,YAPFD,CAAYqB,UAU5B,OACI,wBAAQ+B,MAAO,CAACqC,OAAQ,MAAO7B,QAtCnC,WAEI,IADA,IAAMvD,EAAgB,eAAOd,GAC7B,MAAoBiB,OAAOkF,QAAQrF,GAAnC,eAAsD,CAAjD,IAAOoE,EAAP,uBACDjE,OAAOC,OAAOJ,EAAiBoE,IAAM/D,SAAQ,SAAArB,GACzCmG,EAAanG,MAEjBgB,EAAiBoE,GAAK,GACtBnF,EAAiBe,KA+BrB,iCC3BD,SAASsF,EAAT,GAOW,IAPMC,EAOP,EAPOA,kBAAmBpG,EAO1B,EAP0BA,eAAgBF,EAO1C,EAP0CA,iBAAkBC,EAO5D,EAP4DA,aAAcsG,EAO1E,EAP0EA,kBAAmBC,EAO7F,EAP6FA,eAAgBC,EAO7G,EAP6GA,aAAcC,EAO3H,EAP2HA,SAAUC,EAOrI,EAPqIA,WAAYC,EAOjJ,EAPiJA,WAUxJC,EAAmB5G,EAAa,GAAGC,GAEnC4G,EAAe,GAAG5G,EAkDxB,SAAS6G,EAAmB5B,GACxB,IAAIlE,GAAO,EAMX,OALAhB,EAAakF,GAAK/D,SAAQ,SAAArB,GACI,QAAvBA,EAAOY,cACNM,GAAO,MAGRA,EAOX,OACI,sBAAK,cAAY,gBAAjB,UACI,gCACI,kDAAqBuF,KACrB,cAACQ,EAAA,EAAD,CAAmBvD,UAAU,kBAAkB9D,KAAK,UAAUC,OAAQkH,EAAcG,SAvBhG,SAAuBC,GACnBZ,EAAkB,GAAGY,GACrBX,EAAkBK,EAAWM,EAAI,GAAGvH,OAqB5B,SACKiH,EAAWhD,KAAI,SAACuD,EAAOC,GAAR,OACZ,cAACC,EAAA,EAAD,CACI,cAAY,eAEZxG,GAAE,gBAAWuG,GACbnC,KAAK,QACLqC,QAAUP,EAAmB,GAAGI,EAAMvH,OAAS,kBAAoBK,EAAa,GAAGkH,EAAMvH,OAAOwF,OAAS,EAAI,kBAAqB,iBAClIzF,KAAK,QACLC,MAAOuH,EAAMvH,MAPjB,SASKuH,EAAMxH,MAPFyH,WAarB,gCACI,cAACnD,EAAA,EAAD,CAAW,cAAY,QAAvB,SACI,cAACC,EAAA,EAAD,CAAK,cAAY,cAAcqD,GAAI,EAAGC,GAAI,EAA1C,SACI,cAACC,EAAA,EAAD,UACKZ,EAAiBjD,KAAI,SAAAiD,GAAgB,OAClC,cAACzC,EAAA,EAAOC,IAAR,CAEIqD,MAAI,EACJC,gBAAiB,CACbC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAEVC,UAAW,kBAjG3C,SAAsBnH,GAClB,IAAME,EAAgB,eAAOd,GAED,KAAxBJ,EAAWgB,GAAIlB,MACfoB,EAAiB,GAAGb,GAAkBa,EAAiB,GAAGb,GAAgBwD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,aACtGhB,EAAWgB,KAEd8F,IACID,EAASuB,SAASpI,EAAWgB,IAC7BW,IAAKC,KAAK,CACNC,MAAO,oBACPC,KAAK,GAAD,OAAK9B,EAAWgB,GAAIlB,KAApB,4EACJiC,KAAM,QACNC,SAAUC,IAGd2E,EAAa,GAAD,mBAAKC,GAAL,CAAe7G,EAAWgB,OAG9CK,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAxB,GAC9BsB,OAAOc,KAAKpC,EAAMqC,QAAQb,SAAQ,SAAAuC,GAC3BA,IAAe9D,EAAWgB,GAAIlB,OAC7BC,EAAMqC,OAAO0B,IAAc,SAIvCzC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEXoB,EAyBdpB,oBApBdI,EAAiB,GAAGb,GAAkBa,EAAiB,GAAGb,GAAgBwD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,MAC7Gb,EAAiBe,GAyD4BsE,CAAawB,EAAiBhG,KAC/CqH,YAAa,EACbC,QAAS,CAAEC,QAAS,EAAGC,EAAG,KAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BE,KAAM,CAAEH,QAAS,EAAGI,GAAI,IAAKH,EAAG,KAChCI,WAAY,CACRC,KAAM,YACNC,SAAU,IAhBlB,SAmBI,cAACxE,EAAA,EAAD,UACI,cAACrE,EAAD,CACIC,OAAQ8G,EACR7G,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,OAvBnB2G,EAAiBhG,aA+B1C,gCACI,8BACMZ,EAAa,GAAGC,GAAgBkF,OAAS,GAAK,cAACY,EAAD,CAC5ChG,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,MAGxB,8BACI,cAAC+F,EAAD,CACIjG,iBAAkBA,EAClBC,aAAcA,e,6BC/J3B,SAAS2I,EAAT,GAEE,IAFmBC,EAEpB,EAFoBA,SAGhC,OACI,8BACI,uBAAOpF,UAAU,cAAc,cAAY,aAAayB,YAAY,eAAe+B,SAAU,SAAA3E,GAAK,OAAIuG,EAASvG,EAAMwG,OAAOlJ,Y,OCQzH,SAASmJ,EAAT,GAKE,IALwB/I,EAKzB,EALyBA,iBAAkBC,EAK3C,EAL2CA,aAAcC,EAKzD,EALyDA,eAAgB8I,EAKzE,EALyEA,cAAerC,EAKxF,EALwFA,WAAYF,EAKpG,EALoGA,aAAcC,EAKlH,EALkHA,SAO9H,EAA0BvG,mBAAiB,IAA3C,mBAAO8I,EAAP,KAAcJ,EAAd,KAEA,SAASK,EAAUrI,GACf,IAAME,EAAgB,eAAOd,GACvBkJ,EAyFV,SAA8BtI,GAC1B,OAAOZ,EAAa,GAAGC,GAAgB+H,SAASpI,EAAWgB,IA1FvCuI,CAAqBvI,GACnCwI,EA4FV,SAAgCxI,GAC5B,IAAII,GAAO,EASX,OARAC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAArB,GAClBA,EAAOc,KAAOA,IACdI,GAAO,SAKZA,EAtGmBqI,CAAuBzI,GAGjD,GAAI8F,EACID,EAASuB,SAASpI,EAAWgB,IAC7BW,IAAKC,KAAK,CACNC,MAAO,oBACPC,KAAK,GAAD,OAAK9B,EAAWgB,GAAIlB,KAApB,gEACJiC,KAAM,QACNC,SAAUC,IAGd2E,EAAa,GAAD,mBAAKC,GAAL,CAAe7G,EAAWgB,WAG1C,GAAIsI,GAAeE,EACfF,EACI3H,IAAKC,KAAK,CACNC,MAAO,oBACPC,KAAK,GAAD,OAAK9B,EAAWgB,GAAIlB,KAApB,qEACJiC,KAAM,QACNC,SAAUC,IAEdN,IAAKC,KAAK,CACNC,MAAO,oBACPC,KAAK,GAAD,OAAK9B,EAAWgB,GAAIlB,KAApB,iEACJiC,KAAM,QACNC,SAAUC,QAEf,CAiBH,GAfIZ,OAAOc,KAAKnC,EAAWgB,GAAIoB,QAAQmD,OAAS,IAC5CmE,QAAQC,IAAI3J,EAAWgB,GAAIoB,QACvBf,OAAOC,OAAOtB,EAAWgB,GAAIoB,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KACrDF,EAAWgB,GAAIF,YAAc,SAE7Ba,IAAKC,KACD,iBACA,0CACA,SAEJ5B,EAAWgB,GAAIF,YAAc,OAEjCD,EAAYb,EAAWgB,KAGsB,IAA7CZ,EAAa,GAAKC,GAAgBkF,OAClC5D,IAAKC,KACD,oBACA,qEACA,aAED,CACH,IADI,IAAD,aACE,0BAAO0D,EAAP,KAAYvF,EAAZ,KACD2J,QAAQC,IAAI,CAACrE,EAAIvF,IACjBsB,OAAOc,KAAKpC,EAAMqC,QAAQb,SAAQ,SAAAuC,GAE3BA,IAAe9D,EAAWgB,GAAIlB,OAC7B4J,QAAQC,IAAI7F,GACZ/D,EAAMqC,OAAO0B,IAAc,OANvC,MAA2BzC,OAAOkF,QAAQvG,GAA1C,eAAwD,IAUxDkB,EAAiB,GAAKb,GAAgBuJ,KAAK5J,EAAWgB,IACtDb,EAAiBe,GAGrB,cAA2BG,OAAOkF,QAAQnG,GAA1C,eAAyD,CAApD,0BAAOkF,EAAP,KAAYvF,EAAZ,KACD2J,QAAQC,IAAI,CAACrE,EAAIvF,IACjBK,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEvBD,EAAYqB,SAQpC,SAASrB,EAAYX,GACjB,OAAOA,EAAOY,YA0ClB,OAEI,gCACI,qBAAK8C,UAAU,cAAf,SACI,eAACiG,EAAA,EAAD,CAAgB7I,GAAG,wBAAwBa,MAAM,iBAAjD,UACI,cAACiI,EAAA,EAAS9D,KAAV,CAAe+D,GAAG,SAAStF,QAAS,WA1BhD0E,GAAerC,IA0BH,4BACA,cAACgD,EAAA,EAAS9D,KAAV,CAAe+D,GAAG,SAAStF,QAAS,kBAxBpD,WACI,IAAMuF,EAAmB,eAAO5J,GAEhCJ,EAAW4J,KAAK,CACZ5I,GAAIhB,EAAWuF,OACfzF,KAAM,GACN6F,UAAW,KACXC,QAAS,KACTC,SAAU,MACV1C,YAAa,GACbH,QAAS,EACTZ,OAAQ,GACRtB,YAAa,UAEjBuI,EAAUrJ,EAAWA,EAAWuF,OAAO,GAAGvE,IAC1Cb,EAAiB6J,GASqCC,IAA1C,oCAGR,cAAC,EAAD,CACIjB,SAAUA,IAEd,oBAAIpF,UAAU,aAAd,SACK5D,EAAW6D,QAAO,SAAAqG,GACf,MAAc,KAAVd,GAEOc,EAAKpK,KAAK0B,cAAc4G,SAASgB,EAAM5H,eADvC0I,OACJ,KAGRnG,KAAI,SAAA/D,GAAU,OACb,eAACuE,EAAA,EAAOC,IAAR,CACIqD,MAAI,EACJC,gBAAiB,CACbC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAEVC,UAAW,kBAAMkB,EAAUrJ,EAAWgB,KACtCqH,YAAa,EAEbC,QAAS,CAAEC,QAAS,EAAGC,EAAG,KAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BI,WAAY,CACRC,KAAM,YACNC,SAAU,GAflB,UAiBKY,QAAQC,IAAI3J,EAAWF,MACxB,qBAAI8D,UAAU,SAAd,UAA4C5D,EAAWF,KACnD,wBAAQ8D,UAAU,aAAa,cAAa5D,EAAWF,KAAM2E,QAAS,kBAAM4E,EAAUrJ,EAAWgB,KAAjG,SACI,cAAC,IAAD,MAEFK,OAAOc,KAAKnC,EAAWoC,QAAQmD,OAAS,GAAK,eAACjB,EAAA,EAAD,CAAKV,UAAU,mBAAf,UAC3C,cAACkC,EAAA,EAAD,CAAWqE,OAAK,EAAhB,SACI,eAACrE,EAAA,EAAUE,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACH,EAAA,EAAUI,OAAX,4BACA,cAACJ,EAAA,EAAUL,KAAX,UACKpE,OAAOc,KAAKnC,EAAWoC,QAAQ2B,KAAI,SAAA7D,GAAM,OACtC,8BAAmBA,GAATA,aAK1B,2BAfoBF,EAAWgB,MARlChB,EAAWgB,Y,aCvLzB,SAASoJ,EAAT,GAEE,IAFkBC,EAEnB,EAFmBA,eAM/B,OACI,eAACC,EAAA,EAAD,CAAKC,SAAO,EAAC9C,QAAQ,QAAQ7D,UAAU,cAAcmC,iBAAiB,IAAIyE,SAHzD,SAACvE,GAAD,OAA6BoE,EAAepE,IAG7D,UACI,cAACqE,EAAA,EAAItE,KAAL,UACI,cAACsE,EAAA,EAAIG,KAAL,CAAUxE,SAAS,IAAnB,6BAEJ,cAACqE,EAAA,EAAItE,KAAL,UACI,cAACsE,EAAA,EAAIG,KAAL,CAAU,cAAY,kBAAkBxE,SAAS,IAAjD,mCCjBhB,IAUeyE,EAVS,CACpB,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,G,0BC+HMC,MAzHf,YAOkB,IAPMxK,EAOP,EAPOA,iBAAkBC,EAOzB,EAPyBA,aAAcwK,EAOvC,EAPuCA,WAAYnE,EAOnD,EAPmDA,kBAAmBpG,EAOtE,EAPsEA,eAAgBqG,EAOtF,EAPsFA,kBAAmBmE,EAOzG,EAPyGA,eAAgBC,EAOzH,EAPyHA,WAAY/D,EAOrI,EAPqIA,WAS5IgE,EAAgB,GAAG1K,EAEzB,SAAS2K,EAAa1F,GAClB,IAAM2F,EAAc,eAAOH,GAE3BzJ,OAAOc,KAAK8I,GAAgB1J,SAAQ,SAAAW,GACjB+I,GAAgB/I,GAA/BA,IAASoD,EACTuF,EAAeI,MAGnBxE,EAAkBnB,GAKlBoB,EAAkBK,GAJLzB,EAIqB,GAAGxF,MAOzC,SAAS0F,EAAaxE,GAClB,IAAME,EAAgB,eAAOd,GAED,KAAxBJ,EAAWgB,GAAIlB,MACfoB,EAAiB,GAAGb,GAAkBa,EAAiB,GAAGb,GAAgBwD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,aACtGhB,EAAWgB,KAElBK,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAxB,GAC9BsB,OAAOc,KAAKpC,EAAMqC,QAAQb,SAAQ,SAAAuC,GAC3BA,IAAe9D,EAAWgB,GAAIlB,OAC7BC,EAAMqC,OAAO0B,IAAc,SAIvCzC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEXoB,EAzBdpB,oBA+BdI,EAAiB,GAAGb,GAAkBa,EAAiB,GAAGb,GAAgBwD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,MAC7Gb,EAAiBe,GACjBuF,EAAkBpG,GAatB,OACI,8BACI,eAAC2D,EAAA,EAAD,CAAMJ,UAAU,OAAOK,MAAO,CAAEC,MAAO,QAAvC,UACI,wBAAQN,UAAU,gBAAgBa,QAb9C,WACI,IAAMvD,EAAgB,eAAOd,GAE7BiB,OAAOC,OAAOJ,EAAiB,GAAGb,IAAiBkB,SAAQ,SAAArB,GACvDsF,EAAatF,EAAOc,OAGxBb,EAAiB,2BAAIe,GAAL,kBAAwB,GAAGb,EAAiB,OAMpD,SACI,cAAC,IAAD,OAEDyK,GAAYC,IAAkB,wBAAQnH,UAAU,oBAAoB,cAAY,gBAAgBa,QAAS,kBAAMuG,EAAa,GAAG3K,IAAjG,SAC7B,cAAC,IAAD,MAEFyK,GAAYC,IAAkB,wBAAQnH,UAAU,mBAAmBa,QAAS,kBAAMuG,EAAa,GAAG3K,IAApE,SAC5B,cAAC,IAAD,MAEJ,cAAC2D,EAAA,EAAKyB,KAAN,CAAW7B,UAAU,YAArB,SAEI,eAACsH,EAAA,EAAD,WACI,kCACI,oBAAItH,UAAU,iBAAd,SAAgCmD,GAAYgE,EAAc,GAAGjL,OAC7D,+BACI,wCACA,oBAAIqL,MAAM,MAAV,6BAGR,uBAAO,cAAY,iBAAnB,SACKP,EAAW7G,KAAI,SAAC7D,EAAQc,GAAT,OAEZ,qBAAa,cAAY,qBAAzB,UACI,cAACqC,EAAA,EAAD,CAAgBC,QAAS,CAAC,QAAS,SAAUC,MAAOlC,OAAOC,OAAOpB,EAAOkC,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAAkCsD,UAAYpD,EAAa,GAAGC,GAAgBoD,QAAQvD,GAAU,EAAI,SAAW,MAAQwD,QACpN,eAACC,EAAA,EAAD,CAASC,UAAU,UAAU5C,GAAG,iBAAhC,sBAA2DK,OAAOc,KAAKjC,EAAOkC,QAAQyB,QAAO,SAAAC,GAAU,OACrE,IAA9B5D,EAAOkC,OAAO0B,MAAuBC,KAAI,SAAA7D,GAAM,OAC/C,8BAAmBA,GAATA,MAFd,OADJ,SAII,oBAAI+D,MAAO,CAACE,MAAOjE,EAAOY,aAA1B,SAAyCZ,EAAOJ,SAEpD,6BAAKI,EAAO8C,UACZ,wBAAQY,UAAU,gBAAgBa,QAAS,kBAAMe,EAAatF,EAAOc,KAArE,SACI,cAAC,IAAD,QATCA,mB,OChD1BoK,MAjDR,YAKW,IALWjL,EAKZ,EALYA,iBAAkBC,EAK9B,EAL8BA,aAAcqG,EAK5C,EAL4CA,kBAAmBC,EAK/D,EAL+DA,kBAAmBK,EAKlF,EALkFA,WAO/F,EAAqCzG,mBAAkCoK,GAAvE,mBAAOI,EAAP,KAAmBD,EAAnB,KACMQ,EAAqB,eAAOjL,GAElC,OACI,gCACI,kDAEA,qBAAK,cAAY,cAAjB,SACI,cAACgE,EAAA,EAAD,UAEI,cAACC,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAhB,SAEKtG,OAAOkF,QAAQ8E,GAAuBtH,KAAI,mCAAEuB,EAAF,KAAOvF,EAAP,YACvC,cAACuE,EAAA,EAAD,UACI,cAAC,EAAD,CACInE,iBAAkBA,EAClBC,aAAcA,EACdwK,WAAY7K,EACZ0G,kBAAmBA,EACnBpG,eAAgBiF,EAChBoB,kBAAmBA,EACnBmE,eAAgBA,EAChBC,WAAYA,EACZ/D,WAAYA,KAVVzB,YAmB1B,8BACI,cAACc,EAAD,CACIjG,iBAAkBA,EAClBC,aAAcA,U,SC9CnB,SAASkL,EAAT,GAGE,IAHuBpL,EAGxB,EAHwBA,OAAQ0G,EAGhC,EAHgCA,aAAcC,EAG9C,EAH8CA,SAS1D,OACI,8BACI,eAAC7C,EAAA,EAAD,CAAMJ,UAAU,OAAOK,MAAO,CAAEC,MAAO,SAAvC,UACI,cAACE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACN,EAAA,EAAKU,MAAN,UAAaxE,EAAOJ,SAExB,cAACwE,EAAA,EAAD,UACI,wBAAQV,UAAU,gBAAgBa,QAAS,kBAb7CzD,EAagEd,EAAOc,QAZzF4F,EAAaC,EAAShD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,OAD7D,IAAsBA,GAaE,SACI,cAAC,IAAD,aAKhB,eAACgD,EAAA,EAAKyB,KAAN,CAAW7B,UAAU,YAArB,UACI,eAACI,EAAA,EAAK0B,KAAN,uBACcxF,EAAO8C,WAErB,eAACgB,EAAA,EAAK0B,KAAN,oBACWxF,EAAOyF,UADlB,QACkCzF,EAAO0F,WAGzC,eAAC5B,EAAA,EAAK0B,KAAN,oBACWxF,EAAO2F,YAElB,cAACvB,EAAA,EAAD,CAAKV,UAAU,oBAGf,cAACU,EAAA,EAAD,CAAKV,UAAU,iBAAf,SACI,cAACkC,EAAA,EAAD,UACI,eAACA,EAAA,EAAUE,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACH,EAAA,EAAUI,OAAX,sBACA,eAACJ,EAAA,EAAUL,KAAX,kCACyBvF,EAAOiD,8BCjDjD,SAASoI,EAAT,GAEE,IAFwB3E,EAEzB,EAFyBA,aAQrC,OACI,wBAAQnC,QAAS,WAJjBmC,EAAa,KAIb,uB,OCGO,SAAS4E,EAAT,GAKE,IALiBrC,EAKlB,EALkBA,cAAerC,EAKjC,EALiCA,WAAYF,EAK7C,EAL6CA,aAAcC,EAK3D,EAL2DA,SAAU1G,EAKrE,EALqEA,iBAAkBC,EAKvF,EALuFA,aAAcC,EAKrG,EALqGA,eAQ3GoL,EAAiB5E,EAEvB,SAASwC,EAAUrI,GACf,IAAME,EAAgB,eAAOd,GAGzBA,EAAa,GAAGC,GAAgB+H,SAASpI,EAAWgB,IACpDW,IAAKC,KAAK,CACNC,MAAO,oBACPC,KAAK,GAAD,OAAK9B,EAAWgB,GAAIlB,KAApB,qEACJiC,KAAM,QACNC,SAAUC,IAI6B,IAA3C7B,EAAa,GAAGC,GAAgBkF,OAC5B5D,IAAKC,KACD,oBACA,qEACA,UAEDV,EAAiB,GAAGb,GAAgBuJ,KAAK5J,EAAWgB,IAAMb,EAAiBe,GAQ1F,SAAsBF,GAClB4F,EAAaC,EAAShD,QAAO,SAAA3B,GAAI,OAAIA,IAASlC,EAAWgB,OARjDwE,CAAaxE,IAWzB,OACI,8BACI,eAAC0K,EAAA,EAAD,CAAW9H,UAAU,MAAML,KAAMuD,EAAY6E,OAAQ,kBAAMxC,GAAc,IAAQ3F,UAAU,SAASoI,QAAQ,EAAMC,UAAU,EAA5H,UACI,cAACH,EAAA,EAAUxF,OAAX,CAAkB4F,aAAW,EAA7B,SACI,cAACJ,EAAA,EAAUhH,MAAX,+BAEJ,eAACgH,EAAA,EAAUjG,KAAX,CAAgB7B,UAAU,WAA1B,UACI,cAAC2H,EAAD,CACI3E,aAAcA,IAElB,cAACxC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAhB,SACI,cAACC,EAAA,EAAD,UACK6D,EAAe1H,KAAI,SAAA0H,GAAc,OAC9B,cAAClH,EAAA,EAAOC,IAAR,CAEIqD,MAAI,EACJC,gBAAiB,CACbC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAEVC,UAAW,kBAAMkB,EAAUoC,EAAezK,KAC1CqH,YAAa,EACbC,QAAS,CAAEC,QAAS,EAAGC,EAAG,KAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BE,KAAM,CAAEH,QAAS,EAAGI,GAAI,IAAKH,EAAG,KAChCI,WAAY,CACRC,KAAM,YACNC,SAAU,IAhBlB,SAkBI,cAACxE,EAAA,EAAD,UACI,cAACgH,EAAD,CACIpL,OAAQuL,EACR7E,aAAcA,EACdC,SAAUA,OArBb4E,EAAezK,qBCpE7C,SAAS+K,EAAT,GAEE,IAFoB3L,EAErB,EAFqBA,aAIjC,SAAS4L,KAsCT,WACI,IAAI5K,GAAO,EAQX,OAPAC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAArB,GACK,QAAvBA,EAAOY,cACPM,GAAO,SAIZA,GA9Ca6K,GAGhBtK,IAAKC,KACD,aACA,qEACA,SAGJD,IAAKC,KAAK,CACNC,MAAO,+BACPC,KAAM,QACNoK,MAAO,OACPC,kBAAkB,IACnBC,MAAK,SAACC,GACDA,EAAOtM,OACPuM,aAAaC,QAAQF,EAAOtM,MAAOyM,KAAKC,UAAUrM,IAIlDuB,IAAKC,KACD,SADJ,UAEOyK,EAAOtM,MAFd,+BAGI,YAIJ4B,IAAKC,KACD,gBACA,2CACA,WAmBpB,OACI,wBAAQ6C,QAAS,kBAAMuH,KAAvB,2BCvDO,SAASU,IAsBpB,OACI,wBAAQjI,QAAS,WApBjB9C,IAAKC,KAAK,CACNC,MAAO,+DACP8K,gBAAgB,EAChBC,kBAAmB,mBACnBC,eAAgB,yBAChB9K,KAAM,YACPqK,MAAK,SAACC,GAEDA,EAAOS,aACPR,aAAaS,QACbrD,QAAQC,IAAI2C,cACZ3K,IAAKC,KAAK,4CAAmC,GAAI,YAC1CyK,EAAOW,UACdrL,IAAKC,KAAK,4DAAoC,GAAI,YAO1D,uCCfO,SAASqL,EAAT,GAKE,IAL8B9M,EAK/B,EAL+BA,iBAAkBC,EAKjD,EALiDA,aAAc8M,EAK/D,EAL+DA,iBAAkBC,EAKjF,EALiFA,cAAeC,EAKhG,EALgGA,cAAerG,EAK/G,EAL+GA,WAAYsG,EAK3H,EAL2HA,gBAQvI,SAASC,EAAShI,IAoMlB,WAEI,IADA,IAAMpE,EAAgB,eAAOd,GADL,aAEnB,IAAOkF,EAAP,uBACDjE,OAAOC,OAAOJ,EAAiBoE,IAAM/D,SAAQ,SAAArB,IASrD,SAAsBA,GAClBmB,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAxB,GAC9BsB,OAAOc,KAAKjC,EAAOkC,QAAQb,SAAQ,SAAAuC,GAC5BA,IAAe5D,EAAOJ,OACrBC,EAAMqC,OAAO0B,IAAc,SAKvCzC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEvBD,EAAYqB,UAzBhBmE,CAAanG,GACbgB,EAAiBoE,GAAKiI,SAE1BrM,EAAiBoE,GAAK,IAL1B,MAAoBjE,OAAOkF,QAAQrF,GAAnC,eAAuD,IAOvDf,EAAiBe,GA3MjBsM,GAGA,IAAMC,EAAkBnB,aAAaoB,QAAQpI,IAiBjD,SAA8BqI,GAC1B,IAAMC,EAAQvM,OAAOc,KAAKwL,GAAcpI,OAClCsI,EAA2BV,EAAgB,EAC3CW,EAAgC,GAEtC,GAAID,EAA2BD,EAAO,CAClC,IAAK,IAAIG,EAAIF,EAA0BE,EAAIH,EAAOG,IAC9CD,EAAoBlE,KAAKmE,EAAE,IAavC,SAAqBD,EAA+BH,GAChD,IAAMzM,EAAgB,eAAOd,GAE7B0N,EAAoBvM,SAAQ,SAAA+D,GAExByB,EAAW6C,KAAK,CAAC9J,KAAMkO,EAAgB1I,GAAMvF,MAAOuF,IACpDpE,EAAiB,GAAGoE,GAAO,GAC3BjE,OAAOc,KAAKjB,GAAkBK,SAAQ,SAAA0M,GAClC5M,OAAOc,KAAKwL,GAAcpM,SAAQ,SAAA2M,GAC1B,GAAGD,IAAWC,GAEd7M,OAAOC,OAAOqM,EAAaO,IAAS3M,SAAQ,SAAArB,GACnCgB,EAAiB+M,GAAQ7F,SAASlI,IA+E/D,SAAoBA,EAAgB+N,EAAgB/M,GAE5CG,OAAOc,KAAKnC,EAAWE,EAAOc,IAAIoB,QAAQmD,OAAS,IACnDmE,QAAQC,IAAI3J,EAAWE,EAAOc,IAAIoB,QAC9Bf,OAAOC,OAAOtB,EAAWE,EAAOc,IAAIoB,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC5DF,EAAWE,EAAOc,IAAIF,YAAc,QAGpCd,EAAWE,EAAOc,IAAIF,YAAc,MAExCD,EAAYb,EAAWE,EAAOc,MAElCE,EAAiB+M,GAAQrE,KAAK1J,GAE9B,cAA2BmB,OAAOkF,QAAQrF,GAA1C,eAA6D,CAAxD,0BAAOoE,EAAP,KAAYvF,EAAZ,KACD2J,QAAQC,IAAI,CAACrE,EAAIvF,IACjBmB,EAAiBoE,GAAK/D,SAAQ,SAAAW,GACvBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEvBD,EAAYqB,QAnGAiM,CAAWjO,EAAQ+N,EAAQ/M,eAQnDkM,EAAcrG,GACd5G,EAAiBe,GAlCbkN,CAAYN,EAAqBH,GACjCT,EAAiBU,EAAM,QAnB/B,SAAuBD,GACnBtM,OAAOc,KAAKwL,GAAcpM,SAAQ,SAAA+D,GAC9BjE,OAAOC,OAAOqM,EAAarI,IAAM/D,SAAQ,SAAArB,IAsEjD,SAAmBc,EAAYsE,GAC3B,IAAMpE,EAAgB,eAAOd,GAGzBiB,OAAOc,KAAKnC,EAAWgB,GAAIoB,QAAQmD,OAAS,IAC5CmE,QAAQC,IAAI3J,EAAWgB,GAAIoB,QACvBf,OAAOC,OAAOtB,EAAWgB,GAAIoB,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KACrDF,EAAWgB,GAAIF,YAAc,SAwFrCa,IAAKC,KACD,iBACA,0CACA,SAxFI5B,EAAWgB,GAAIF,YAAc,OAEjCD,EAAYb,EAAWgB,KAG3B,GAAiC,IAA7BZ,EAAakF,GAAKC,OAwFtB5D,IAAKC,KACD,oBACA,qEACA,aAzFG,CACH,IADI,IAAD,aACE,0BAAO0D,EAAP,KAAYvF,EAAZ,KACD2J,QAAQC,IAAI,CAACrE,EAAIvF,IACjBsB,OAAOc,KAAKpC,EAAMqC,QAAQb,SAAQ,SAAAuC,GAE3BA,IAAe9D,EAAWgB,GAAIlB,OAC7B4J,QAAQC,IAAI7F,GACZ/D,EAAMqC,OAAO0B,IAAc,OANvC,MAA2BzC,OAAOkF,QAAQvG,GAA1C,eAAwD,IAUxDkB,EAAiBoE,GAAKsE,KAAK5J,EAAWgB,IACtCb,EAAiBe,GAGrB,cAA2BG,OAAOkF,QAAQnG,GAA1C,eAAyD,CAApD,0BAAOkF,EAAP,KAAYvF,EAAZ,KACD2J,QAAQC,IAAI,CAACrE,EAAIvF,IACjBK,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MAEvBD,EAAYqB,QA9GhBmH,CAAUnJ,EAAOc,GAAIsE,SAmBzB+I,CAAcV,GA3BlBW,CAHqB9B,KAAK+B,MAAM,GAAGd,IAKnCJ,EAAgB/H,GA4DpB,SAAS0I,EAAgBJ,GACrB,IAAIY,EAAWZ,EACXa,EAAS,GASb,OARIb,EAAQ,IAAM,GACdY,GAAYZ,EAAM,GAAK,EACvBa,EAAS,SAETD,EAAWZ,EAAM,EACjBa,EAAS,UAGP,GAAN,OAAUA,EAAV,YAAoBD,GAqJxB,SAAS3N,EAAYX,GACjB,OAAOA,EAAOY,YAGlB,OACI,eAACgJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAS4E,OAAV,CAAiBjH,QAAQ,UAAUzG,GAAG,iBAAtC,6BAGA,eAAC8I,EAAA,EAAS6E,KAAV,WACKtN,OAAOc,KAAKmK,cAAcvI,KAAI,SAAAuB,GAAG,OAC9B,sBACIrB,MAAO,CAAC2K,QAAS,eADrB,UAGI,cAAC9E,EAAA,EAAS9D,KAAV,CACIvB,QAAS,kBAAM6I,EAAShI,IAD5B,SAEEA,IAGF,wBAAQb,QAAS,kBAxFrC,SAA6Ba,GACzB3D,IAAKC,KAAK,CACNC,MAAM,oCAAD,OAAsCyD,EAAtC,MACLqH,gBAAgB,EAChBC,kBAAkB,WAAD,OAAatH,EAAb,KACjBuH,eAAgB,eAChB9K,KAAM,YACPqK,MAAK,SAACC,GAEDA,EAAOS,aACPR,aAAauC,WAAWvJ,GACxB3D,IAAKC,KAAL,WAAc0D,EAAd,2BAAkC,GAAI,YAC/B+G,EAAOW,UACdrL,IAAKC,KAAL,WAAc0D,EAAd,qDAA6C,GAAI,WA2ElBwJ,CAAoBxJ,IAA3C,SACI,cAAC,IAAD,QAPCA,MAWb,cAACoH,EAAD,U,MC3QD,SAASqC,GAAT,GAIE,IAJ2B5O,EAI5B,EAJ4BA,iBAAkBC,EAI9C,EAJ8CA,aAAc8M,EAI5D,EAJ4DA,iBAAkBC,EAI9E,EAJ8EA,cAAeC,EAI7F,EAJ6FA,cAAerG,EAI5G,EAJ4GA,WAmBxH,SAASiH,EAAgBJ,GACrB,IAAIY,EAAWZ,EACXa,EAAS,GASb,OARIb,EAAQ,IAAM,GACdY,GAAYZ,EAAM,GAAK,EACvBa,EAAS,SAETD,EAAWZ,EAAM,EACjBa,EAAS,UAGP,GAAN,OAAUA,EAAV,YAAoBD,GAIxB,OACI,wBAAQ5K,UAAU,aAAa,cAAY,mBAAmBa,QAAS,kBA7B3E,WACI,IAAImJ,EAAQT,EACNjM,EAAgB,eAAOd,GAE7B2G,EAAW6C,KAAK,CAAC9J,KAAMkO,EAAgBb,GAAgBpN,MAAOoN,IAC9DC,EAAcrG,GAEd7F,EAAiB,GAAGiM,GAAiB,GACrChN,EAAiBe,GACjB0M,IACAV,EAAiBU,GAmB4DQ,IAA7E,0BCjCO,SAASY,GAAT,GAME,IAN8B7O,EAM/B,EAN+BA,iBAAkBC,EAMjD,EANiDA,aAAc8M,EAM/D,EAN+DA,iBAAkBC,EAMjF,EANiFA,cAAeC,EAMhG,EANgGA,cAAerG,EAM/G,EAN+GA,WAAYN,EAM3H,EAN2HA,kBAAmBC,EAM9I,EAN8IA,kBAQ1J,SAASuI,IACL,IAAIrB,EAAQT,EACNjM,EAAgB,eAAOd,GAEf,IAAVwN,EACAjM,IAAKC,KACD,qBACA,iDACA,YAKJ6E,EAAkB,KAClBC,EAAkBK,EAAW,GAAGjH,MAkBpCuB,OAAOC,OAAOlB,EAAa+M,EAAc,IAAI5L,SAAQ,SAAArB,IAMzD,SAAsBA,GAClBmB,OAAOC,OAAOtB,GAAYuB,SAAQ,SAAAxB,GAC9BsB,OAAOc,KAAKjC,EAAOkC,QAAQb,SAAQ,SAAAuC,GAC5BA,IAAe5D,EAAOJ,OACrBC,EAAMqC,OAAO0B,IAAc,SAKvCzC,OAAOc,KAAK/B,GAAcmB,SAAQ,SAAA+D,GAC9BlF,EAAakF,GAAK/D,SAAQ,SAAAW,GACnBb,OAAOc,KAAKD,EAAKE,QAAQmD,OAAS,IAC7BlE,OAAOC,OAAOY,EAAKE,QAAQE,OAAM,SAAApC,GAAM,OAAe,IAAXA,KAC3CgC,EAAKpB,YAAc,QAEnBoB,EAAKpB,YAAc,MASvC,SAAqBZ,GACVA,EAAOY,YARFD,CAAYqB,UAtBpBmE,CAAanG,MAEjBC,EAAiB,2BAAIC,GAAL,kBAAoB+M,EAAc,EAAI,MAflDpG,EAAWwG,MACXH,EAAcrG,UAEP7F,EAAiBiM,EAAc,GACtChN,EAAiBe,GAEjB0M,IACAV,EAAiBU,IAuCzB,OACI,wBAAQhK,UAAU,gBAAgB,cAAY,sBAAsBa,QAAS,kBAAMwK,KAAnF,6B,OCjFO,SAASC,GAAT,GAEE,IAF4BC,EAE7B,EAF6BA,aAGzC,OACI,oBAAIvL,UAAU,cAAd,SAA6BuL,IC0ItBC,OA5Hf,YAEiB,IAFGC,EAEJ,EAFIA,YAAahF,EAEjB,EAFiBA,eAG7B,EAA4C/J,mBAAwB,KAApE,mBAAOD,EAAP,KAAuBoG,EAAvB,KACA,EAA4CnG,mBAAiB,UAA7D,mBAAOqG,EAAP,KAAuBD,EAAvB,KAGA,EAAwCpG,mBAAiB,oBAAzD,mBAAO6O,EAAP,KAAqB9B,EAArB,KAGA,EAAoC/M,oBAAkB,GAAtD,mBAAOwG,EAAP,KAAmBqC,EAAnB,KAEA,EAAiC7I,mBADD,IAChC,mBAAOuG,EAAP,KAAiBD,EAAjB,KAEA,EAA0CtG,mBAAiB,GAA3D,mBAAO6M,EAAP,KAAsBD,EAAtB,KACA,EAAoC5M,mBAAuBT,GAA3D,mBAAOkH,EAAP,KAAmBqG,EAAnB,KAGA,EAAyC9M,mBAAmCV,GAA5E,mBAAOQ,EAAP,KAAqBD,EAArB,KAGA,OACI,sBAAKyD,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,6BAEI,qFAEA,cAACmI,EAAD,CACI3L,aAAcA,IAEhBkM,aAAa/G,OAAS,GACxB,gCACI,cAAC0H,EAAD,CACI9M,iBAAkBA,EAClBC,aAAcA,EACd8M,iBAAkBA,EAClBC,cAAeA,EACfC,cAAeA,EACfrG,WAAYA,EACZsG,gBAAiBA,IAErB,cAAC6B,GAAD,CACIC,aAAcA,UAM1B,0BAASvL,UAAU,YAAnB,UACI,qCACA,cAACwG,EAAD,CACIC,eAAgBA,OAGxB,0BAASzG,UAAU,YAAnB,UAEI,cAACoL,GAAD,CACIvI,kBAAmBA,EACnBC,kBAAmBA,EACnBvG,iBAAkBA,EAClBC,aAAcA,EACd8M,iBAAkBA,EAClBC,cAAeA,EACfC,cAAeA,EACfrG,WAAYA,IAGhB,cAACgI,GAAD,CACI5O,iBAAkBA,EAClBC,aAAcA,EACd8M,iBAAkBA,EAClBC,cAAeA,EACfC,cAAeA,EACfrG,WAAYA,IAIE,MAAhBsI,GAAuB,cAAC7I,EAAD,CACrBG,eAAgBA,EAChBD,kBAAmBA,EACnBD,kBAAmBA,EACnBpG,eAAgBA,EAChBF,iBAAkBA,EAClBC,aAAcA,EACdwG,aAAcA,EACdC,SAAUA,EACVC,WAAYA,EACZC,WAAYA,IAGE,MAAhBsI,GAAuB,cAAC,EAAD,CACrBlP,iBAAkBA,EAClBC,aAAcA,EACdqG,kBAAmBA,EACnBC,kBAAmBA,EACnBK,WAAYA,OAIpB,yBAASnD,UAAU,aAAnB,UACuB,MAAhByL,GAAuC,MAAhBA,IAAyB,cAAC,EAAD,CAC/ClP,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,EAChB8I,cAAeA,EACfrC,WAAYA,EACZF,aAAcA,EACdC,SAAUA,MAIlB,cAAC,EAAD,CACIsC,cAAeA,EACfrC,WAAYA,EACZF,aAAcA,EACdC,SAAUA,EACV1G,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,Q,OC1IjB,SAASiP,GAAT,GAEE,IAFqBjF,EAEtB,EAFsBA,eASlC,OACI,qBAAKzG,UAAU,OAAf,SACI,sBAAKA,UAAU,WAAf,UACI,kDACA,0DACA,wBAAQ,cAAY,aAAaa,QAAS,WATlD4F,EAAe,MASP,wBCODkF,OAnBf,WACI,MAAsCjP,mBAAwB,KAA9D,mBAAO+O,EAAP,KAAoBhF,EAApB,KAEA,OACI,gCAEqB,MAAhBgF,GAAuB,cAAC,GAAD,CACpBhF,eAAgBA,IAGH,MAAhBgF,GAAuB,cAAC,GAAD,CACpBhF,eAAgBA,EAChBgF,YAAaA,QCJdG,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBtD,MAAK,YAAkD,IAA/CuD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCFpBO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.2a81cc96.chunk.js","sourcesContent":["import { Course } from \"../../interfaces/course\";\n\nconst SEMESTER_MAP_INIT: Record<string, Course[]> = {\n    \"1\": [],\n    \"2\": [],\n    \"3\": [],\n    \"4\": [],\n    \"5\": [],\n    \"6\": [],\n    \"7\": [],\n    \"8\": [],\n};\nexport default SEMESTER_MAP_INIT;\n","const buttonListInit = [\n    { name: \"Fall 1\", value: 1 },\n    { name: \"Spring 1\", value: 2 },\n    { name: \"Fall 2\", value: 3 },\n    { name: \"Spring 2\", value: 4 },\n    { name: \"Fall 3\", value: 5 },\n    { name: \"Spring 3\", value: 6 },\n    { name: \"Fall 4\", value: 7 },\n    { name: \"Spring 4\", value: 8 },\n];\nexport default buttonListInit;\n","import { Course } from \"../interfaces/course\";\n\nconst courseData: Course[] = [\n    {\n        \"id\": 0,\n        \"name\": \"CISC 100\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"CISC 200\",\n        \"timeStart\": 1400,\n        \"timeEnd\": 1500,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CISC 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"CISC 300\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Science 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CISC 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"MATH 100\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1630,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"MATH 200\",\n        \"timeStart\": 1330,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGL 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"CPEG 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"CPEG 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 100\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"CPEG 300\",\n        \"timeStart\": 900,\n        \"timeEnd\": 955,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Engineering 300, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"CPEG 400\",\n        \"timeStart\": 1600,\n        \"timeEnd\": 1730,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CPEG 300\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"MATH 300\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"MATH 400\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"CPEG 355\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 355, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 300\": false, \"CISC 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"CISC 400\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1055,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CISC 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"ENGL 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is English 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"ENGL 300\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"ENGL 400\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1625,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"HIST 100\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1130,\n        \"schedule\": \"TR\",\n        \"description\": \"This is History 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"PHYS 100\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Physics 100, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"PHYS 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1155,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Physics 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"PHYS 100\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    }\n];\nexport default courseData;\n","export default __webpack_public_path__ + \"static/media/spiderman_meme.4235d597.jpeg\";","// Source Imports\nimport React, { useState } from \"react\";\nimport { Card,Col, Row, Container, Accordion, OverlayTrigger, Popover, Form } from \"react-bootstrap/\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\nimport Swal from \"sweetalert2\";\n\n// Design Imports\nimport \"../../css/courses.css\";\nimport { motion } from \"framer-motion\";\nimport SpiderMan from \"../../assets/images/spiderman_meme.jpeg\";\n\n// Breadcrumbs:\n// Main Page / Board / CourseComp - Course Card that holds information on course\nexport default function CourseComp({ course, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    course: Course,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null\n}):  JSX.Element {\n    \n    //visibility states for courses\n    const [titleEditMode, setTitleEditMode] = useState<boolean>(false);\n    const [descriptionEditMode, setDescriptionEditMode] = useState<boolean>(false);\n    const [creditsEditMode, setCreditsEditMode] = useState<boolean>(false);\n    \n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        if (courseData[id].name === \"\") {\n            NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n            delete courseData[id];\n        } else {\n            Object.values(courseData).forEach(value => {\n                Object.keys(value.preReq).forEach(courseName => {\n                    if(courseName === courseData[id].name) {\n                        value.preReq[courseName] = false;\n                    }\n                });\n            });\n            Object.keys(SEMESTER_MAP).forEach(key => {\n                SEMESTER_MAP[key].forEach(item => {\n                    if(Object.keys(item.preReq).length > 0) {\n                        if (Object.values(item.preReq).every(course => course === true)){\n                            item.preReqCheck = \"black\";\n                        } else {\n                            item.preReqCheck = \"red\";\n                        }\n                        updateColor(item);\n                    }\n                });\n            });\n        }\n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    function isCourseInCourseData(name: string) {\n        let flag = false;\n        Object.values(courseData).forEach(course => {\n            if (course.name.toLowerCase().replace(/\\s/g, \"\") === name.toLowerCase().replace(/\\s/g, \"\")) {\n                flag = true;\n            }\n        });\n        return flag;\n    }\n\n    function changeName(id: number, enteredName: string) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        const duplicateCourse = isCourseInCourseData(enteredName);\n        \n        if (!duplicateCourse) {\n            // Removing Pre-Req for all other courses\n            Object.values(courseData).forEach(item => {\n                Object.keys(item.preReq).forEach(req => {\n                    if (req === enteredName) {\n                        item.preReq[req] = true;\n                    } else if (req === courseData[id].name) {\n                        item.preReq[req] = false;\n                    }\n                });\n                if (Object.values(item.preReq).every(course => course === true)){\n                    item.preReqCheck = \"black\";\n                } else {\n                    item.preReqCheck = \"red\";\n                }\n                updateColor(item);\n            });\n            courseData[id].name = enteredName;\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n            setTitleEditMode(false);\n        } else {\n            Swal.fire({\n                title: \"Course Already Exists!\",\n                text: `${enteredName} already exists. Please enter another course name.`,\n                icon: \"error\",\n                imageUrl: SpiderMan\n            });\n        }\n    }\n\n    function changeDescription(id: number, enteredDescription: string) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        courseData[id].description = enteredDescription;\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        setDescriptionEditMode(false);\n    }\n\n    function changeCredits(id: number, enteredCredits: string) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        courseData[id].credits = +enteredCredits;\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        setCreditsEditMode(false);\n    }\n\n    const handleSubmit = (id: number, cardProperty: string) => (event: { preventDefault: () => void; stopPropagation: () => void; currentTarget: HTMLFormElement; }) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const form = event.currentTarget;\n        \n        switch(cardProperty){\n        case \"name\":\n            changeName(id, form.floatingInput.value);\n            break;\n        case \"credits\":\n            changeCredits(id, form.floatingInput.value);\n            break;\n        case \"description\":\n            changeDescription(id, form.floatingInput.value);\n            break;\n        }\n    };\n\n\n    return (\n        <div>\n            \n            <OverlayTrigger trigger={[\"hover\", \"focus\"]} show={ Object.values(course.preReq).every(course => course === true) ? false : true } placement={ SEMESTER_MAP[\"\"+semesterSelect].indexOf(course) > 2 ? \"bottom\" : \"top\" } overlay={\n                <Popover className=\"popover\" id=\"tooltip-preReq\">Missing: {Object.keys(course.preReq).filter(courseName => \n                    course.preReq[courseName] === false).map(course => \n                    <div key={course}>{course}</div>)} </Popover>}>\n                <Card className=\"card\" data-testid=\"course-card\" style={{ width: \"100%\", color: updateColor(course) }}>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <motion.div\n                                    onClick={() => setTitleEditMode(!titleEditMode)}\n                                >\n                                    <Card.Title className=\"card-title\">\n                                        { !titleEditMode && course.name}\n                                        { (course.name === \"\" || titleEditMode) && <Form onSubmit={handleSubmit(course.id, \"name\")}>\n                                            <Form.Control \n                                                style={{\n                                                    color: \"black\",\n                                                    outline: \"0\",\n                                                    border: \"1px solid #fff\",\n                                                    boxShadow: \"none\",\n                                                    textAlign: \"center\",\n                                                    \n                                                }}\n                                                autoFocus\n                                                size=\"lg\" \n                                                id=\"floatingInput\" \n                                                type=\"task\" \n                                                placeholder={ course.name === \"\" ? \"Enter Name\" : course.name }\n                                            />\n                                        </Form> }\n                                    </Card.Title>\n                                </motion.div>                \n                                <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                    <MdDeleteForever></MdDeleteForever>\n                                </button>\n                            </Col>                        \n                        </Row>\n                    </Container>\n                    <Card.Body className=\"card-body\">\n                        <motion.div\n                            onClick={() => setCreditsEditMode(!creditsEditMode)}\n                        >\n                            <Card.Text>\n                                Credits: { (!creditsEditMode && course.credits !== 0) && course.credits}\n                                { (course.credits === 0 || creditsEditMode) && <Form onSubmit={handleSubmit(course.id, \"credits\")}>\n                                    <Form.Control \n                                        style={{\n                                            color: \"black\",\n                                            outline: \"0\",\n                                            border: \"1px solid #fff\",\n                                            boxShadow: \"none\",\n                                            textAlign: \"center\",\n                                            \n                                        }}\n                                        autoFocus\n                                        size=\"sm\" \n                                        id=\"floatingInput\" \n                                        type=\"task\" \n                                        placeholder={ course.credits === 0 ? \"Enter Credit Hours\" : \"\"+course.credits }\n                                    />\n                                </Form> }\n                            </Card.Text>\n                        </motion.div>\n                        <Card.Text>\n                            From: {course.timeStart} To: {course.timeEnd}\n                        </Card.Text>\n                        \n\n                        <Card.Text>\n                            Days: {course.schedule}\n                        </Card.Text>\n                        <Col className=\"column-dropdown\">\n                        </Col>\n                    \n                        <Col className=\"card-accordion\">\n                            <Accordion defaultActiveKey={course.description === \"\" ? \"0\" : \"1\"}>\n                                <Accordion.Item eventKey=\"0\">\n                                    <Accordion.Header onClick={() => setDescriptionEditMode(false)}>Details</Accordion.Header>\n                                    <motion.div\n                                        onClick={() => setDescriptionEditMode(!descriptionEditMode)}\n                                    >\n                                        <Accordion.Body className=\"card-description\">\n                                            { !descriptionEditMode && course.description}\n                                            { (course.description === \"\" || descriptionEditMode) && <Form onSubmit={handleSubmit(course.id, \"description\")}>\n                                                <Form.Control \n                                                    style={{\n                                                        color: \"black\",\n                                                        outline: \"0\",\n                                                        border: \"1px solid #fff\",\n                                                        boxShadow: \"none\",\n                                                        textAlign: \"center\",\n                                                        \n                                                    }}\n                                                    autoFocus\n                                                    size=\"sm\" \n                                                    id=\"floatingInput\" \n                                                    type=\"task\" \n                                                    placeholder={ course.description === \"\" ? \"Enter Description\" : course.description }\n                                                />\n                                            </Form> }\n                                        </Accordion.Body>\n                                    </motion.div>\n                                </Accordion.Item>\n                            </Accordion>\n                        </Col>\n                    </Card.Body>\n                </Card>\n            </OverlayTrigger>\n        </div>    \n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / Board / ClearSemesterButton\nexport default function ClearSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, \n    SEMESTER_MAP: Record<string, Course[]>, semesterSelect: string | null\n}): JSX.Element {\n\n    function removeAllCourses() {    \n        Object.values(SEMESTER_MAP[\"\"+semesterSelect]).forEach(value => {\n            removePreReq(value);\n        }); \n        \n        SET_SEMESTER_MAP({...SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    function removePreReq(course: Course) {\n        Object.values(courseData).forEach(value => {\n            Object.keys(value.preReq).forEach(courseName => {\n                if(courseName === course.name) {\n                    value.preReq[courseName] = false;\n                }\n            });\n        });\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        });\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <button onClick={removeAllCourses} data-testid=\"btn-clear-semester\">Clear Current Semester</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\nexport default function ClearAllSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP}: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>\n}): JSX.Element {\n    \n    function removeAllSemesters() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP}; \n        for (const [key] of Object.entries(NEW_SEMESTER_MAP)) {\n            Object.values(NEW_SEMESTER_MAP[key]).forEach(course => {\n                removePreReq(course);\n            });\n            NEW_SEMESTER_MAP[key]=[];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        }\n    }\n\n    function removePreReq(course: Course) {\n        Object.values(courseData).forEach(value => {\n            Object.keys(value.preReq).forEach(courseName => {\n                if(courseName === course.name) {\n                    value.preReq[courseName] = false;\n                }\n            });\n        });\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        });\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <button style={{margin: \"5%\"}} onClick={removeAllSemesters}>Clear All Semesters</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Col, Row, Container, ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport Swal from \"sweetalert2\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport CourseComp from \"../Card_Components/CourseComp\";\nimport ClearSemesterButton from \"./ClearSemesterButton\";\n\n// Design Imports\nimport \"../../css/board.css\";\nimport SpiderMan from \"../../assets/images/spiderman_meme.jpeg\";\nimport ClearAllSemesterButton from \"./ClearAllSemesterButton\";\n\n// Breadcrumbs:\n// Main Page / Board - renders each semester and its classes\nexport function Board({ setSemesterSelect, semesterSelect, SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterHeader, semesterHeader, SET_SAVE_BIN, SAVE_BIN, binVisible, buttonList }: {\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void, semesterHeader: string,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    binVisible: boolean,\n    buttonList: ButtonList[],\n}):  JSX.Element {\n\n    // const list variable to map out classList useState variable\n    const classListToPrint = SEMESTER_MAP[\"\"+semesterSelect];\n\n    const buttonToggle = \"\"+semesterSelect;\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        if (courseData[id].name === \"\") {\n            NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n            delete courseData[id];\n        } else {\n            if (binVisible){\n                if (SAVE_BIN.includes(courseData[id])) {\n                    Swal.fire({\n                        title: \"Duplicate Course!\",\n                        text: `${courseData[id].name} is already added to your bin. It will now be removed from the semester.`,\n                        icon: \"error\",\n                        imageUrl: SpiderMan\n                    });\n                } else {\n                    SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n                }\n            }\n            Object.values(courseData).forEach(value => {\n                Object.keys(value.preReq).forEach(courseName => {\n                    if(courseName === courseData[id].name) {\n                        value.preReq[courseName] = false;\n                    }\n                });\n            });\n            Object.keys(SEMESTER_MAP).forEach(key => {\n                SEMESTER_MAP[key].forEach(item => {\n                    if(Object.keys(item.preReq).length > 0) {\n                        if (Object.values(item.preReq).every(course => course === true)){\n                            item.preReqCheck = \"black\";\n                        } else {\n                            item.preReqCheck = \"red\";\n                        }\n                        updateColor(item);\n                    }\n                });\n            });\n        }\n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function handleSelect (val: number) {\n        setSemesterSelect(\"\"+val);\n        setSemesterHeader(buttonList[val-1].name);\n    }\n\n    function checkPreReqWarning(key: string) {\n        let flag = false;\n        SEMESTER_MAP[key].forEach(course => {\n            if(course.preReqCheck === \"red\"){\n                flag = true;\n            }\n        });\n        return flag;\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <div data-testid=\"semester-view\">\n            <div>\n                <h2>Semester View - {semesterHeader}</h2>\n                <ToggleButtonGroup className=\"semester-button\" name=\"options\" value={+buttonToggle} onChange={handleSelect}>\n                    {buttonList.map((radio, idx) =>\n                        <ToggleButton\n                            data-testid=\"btn-semester\"\n                            key={idx}\n                            id={`radio-${idx}`}\n                            type=\"radio\"\n                            variant={ checkPreReqWarning(\"\"+radio.value) ? \"outline-warning\" : SEMESTER_MAP[\"\"+radio.value].length > 0 ? \"outline-success\" :  \"outline-danger\" }\n                            name=\"radio\"\n                            value={radio.value}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    )}\n                </ToggleButtonGroup>\n            </div>\n\n            <div>\n                <Container data-testid=\"board\">\n                    <Row data-testid=\"board-row-1\" xs={1} md={3}>\n                        <AnimatePresence>\n                            {classListToPrint.map(classListToPrint =>\n                                <motion.div\n                                    key={classListToPrint.id}\n                                    drag\n                                    dragConstraints={{\n                                        top: 0,\n                                        bottom: 0,\n                                        right: 0,\n                                        left: 0\n                                    }}\n                                    onDragEnd={() => removeCourse(classListToPrint.id)}\n                                    dragElastic={1}\n                                    initial={{ opacity: 0, x: 180 }}\n                                    animate={{ opacity: 1, x: 0 }}\n                                    exit={{ opacity: 0, y: -200, x: 180 }}\n                                    transition={{\n                                        ease: \"easeInOut\",\n                                        duration: 0.4\n                                    }}>\n                                    \n                                    <Col >\n                                        <CourseComp\n                                            course={classListToPrint}\n                                            SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                            SEMESTER_MAP={SEMESTER_MAP}\n                                            semesterSelect={semesterSelect}\n                                        ></CourseComp>\n                                    </Col>\n                                </motion.div>\n                            )}\n                        </AnimatePresence>\n                    </Row>\n                </Container>\n                <div>\n                    <div>\n                        { SEMESTER_MAP[\"\"+semesterSelect].length > 0 && <ClearSemesterButton\n                            SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                            SEMESTER_MAP={SEMESTER_MAP}\n                            semesterSelect={semesterSelect}\n                        ></ClearSemesterButton> }\n                    </div>\n                    <div>\n                        <ClearAllSemesterButton\n                            SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                            SEMESTER_MAP={SEMESTER_MAP}\n                        ></ClearAllSemesterButton>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport \"../../css/SearchBar.css\";\n\n// Breadcrumbs:\n// Main Page / DisplayCourses / SearchBar\nexport default function SearchBar({ setQuery }: {\n    setQuery: (q: string) => void\n}): JSX.Element {\n    return(\n        <div>\n            <input className=\"form__field\" data-testid=\"search-bar\" placeholder=\"Enter Course\" onChange={event => setQuery(event.target.value)}/>\n        </div>\n    );\n}\n","// Source Imports\nimport React, { useState } from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { MdAdd } from \"react-icons/md\";\nimport { Accordion, Col, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { motion } from \"framer-motion\";\nimport { Course } from \"../../interfaces/course\";\nimport Swal from \"sweetalert2\";\n\n\n// Component Imports\nimport SearchBar from \"./SearchBar\";\n\n// Design Imports\nimport \"../../css/DisplayCourses.css\";\nimport SpiderMan from \"../../assets/images/spiderman_meme.jpeg\";\n\n// Breadcrumbs:\n// Main Page / DisplayCourses - displays list of scrollable courses on right hand side\nexport default function DisplayCourses({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, setBinVisible, binVisible, SET_SAVE_BIN, SAVE_BIN }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null,\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n}): JSX.Element {\n\n    const [query, setQuery] = useState<string>(\"\");\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        const foundCourse = findCourseInSemester(id);\n        const foundCourseInPlan = findCourseInEntirePlan(id);\n        \n        // If bin is open, add courses to bin\n        if (binVisible){\n            if (SAVE_BIN.includes(courseData[id])) {\n                Swal.fire({\n                    title: \"Duplicate Course!\",\n                    text: `${courseData[id].name} is already added to your bin. Please select another course.`,\n                    icon: \"error\",\n                    imageUrl: SpiderMan\n                });\n            } else {\n                SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n            }\n        } else {\n            if (foundCourse || foundCourseInPlan) {\n                foundCourse ?\n                    Swal.fire({\n                        title: \"Duplicate Course!\",\n                        text: `${courseData[id].name} is already added to this semester. Please select another course.`,\n                        icon: \"error\",\n                        imageUrl: SpiderMan\n                    }) :\n                    Swal.fire({\n                        title: \"Duplicate Course!\",\n                        text: `${courseData[id].name} is already added to your plan. Please select another course.`,\n                        icon: \"error\",\n                        imageUrl: SpiderMan\n                    });\n            } else {\n                //  PREREQ MET IN PRIOR SEMESTER\n                if (Object.keys(courseData[id].preReq).length > 0){\n                    console.log(courseData[id].preReq);\n                    if (Object.values(courseData[id].preReq).every(course => course === true)){\n                        courseData[id].preReqCheck = \"black\";\n                    } else {\n                        Swal.fire(\n                            \"Pre-Req Error!\",\n                            \"Warning: Pre-Reqs not met 🤔.\",\n                            \"error\"\n                        );\n                        courseData[id].preReqCheck = \"red\";\n                    }\n                    updateColor(courseData[id]);\n                }\n\n                if (SEMESTER_MAP[\"\" + semesterSelect].length === 6) {\n                    Swal.fire(\n                        \"Getting Studious!\",\n                        \"Warning: Max number of courses selected for semester 📚.\",\n                        \"error\"\n                    );\n                } else {\n                    for (const [key, value] of Object.entries(courseData)) {\n                        console.log([key,value]);\n                        Object.keys(value.preReq).forEach(courseName => {\n                            //console.log(courseName);\n                            if(courseName === courseData[id].name) {\n                                console.log(courseName);\n                                value.preReq[courseName] = true;\n                            }\n                        });\n                    }\n                    NEW_SEMESTER_MAP[\"\" + semesterSelect].push(courseData[id]);\n                    SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n                }\n\n                for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n                    console.log([key,value]);\n                    SEMESTER_MAP[key].forEach(item => {\n                        if(Object.keys(item.preReq).length > 0) {\n                            if (Object.values(item.preReq).every(course => course === true)){\n                                item.preReqCheck = \"black\";\n                            } else {\n                                item.preReqCheck = \"red\";\n                            }\n                            updateColor(item);\n                        }\n                    });\n                }\n            }\n        }   \n    }\n    \n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n    \n    function findCourseInSemester(id: number) {\n        return SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id]);\n    }\n\n    function findCourseInEntirePlan(id: number) {\n        let flag = false;\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(course => {\n                if (course.id === id) {\n                    flag = true;\n                }\n            });\n        });\n\n        return flag;\n    }\n\n    function showBin() {\n        setBinVisible(!binVisible);\n    }\n\n    function createCourse() {\n        const SEMESTER_MAP_BUFFER = {...SEMESTER_MAP};\n\n        courseData.push({ \n            id: courseData.length,\n            name: \"\",\n            timeStart: 1300,\n            timeEnd: 1400,\n            schedule: \"MWF\",\n            description: \"\",\n            credits: 0,\n            preReq: {},\n            preReqCheck: \"black\" });\n        \n        addCourse(courseData[courseData.length-1].id);\n        SET_SEMESTER_MAP(SEMESTER_MAP_BUFFER);\n    }\n    \n    return (\n\n        <div>\n            <div className=\"menu-button\">\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Course Options\">\n                    <Dropdown.Item as=\"button\" onClick={() => showBin()}>Save Later Bin</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => createCourse()}>Create New Course</Dropdown.Item>\n                </DropdownButton>\n            </div>\n            <SearchBar\n                setQuery={setQuery}\n            ></SearchBar>\n            <ul className=\"list-group\">\n                {courseData.filter(post => {\n                    if (query === \"\") {\n                        return post;\n                    } else if (post.name.toLowerCase().includes(query.toLowerCase())) {\n                        return post;\n                    }\n                }).map(courseData => \n                    <motion.div\n                        drag\n                        dragConstraints={{\n                            top: 0,\n                            bottom: 0,\n                            right: 0,\n                            left: 0\n                        }}\n                        onDragEnd={() => addCourse(courseData.id)}\n                        dragElastic={1}\n                        key={courseData.id}\n                        initial={{ opacity: 0, x: 180 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{\n                            ease: \"easeInOut\",\n                            duration: 1,\n                        }}>\n                        {console.log(courseData.name)}\n                        <li className=\"course\" key={courseData.id}>{courseData.name}\n                            <button className=\"add-button\" data-testid={courseData.name} onClick={() => addCourse(courseData.id)}>\n                                <MdAdd />\n                            </button>\n                            { Object.keys(courseData.preReq).length > 0 && <Col className=\"prereq-accordion\">\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"0\">\n                                        <Accordion.Header>Prerequisites</Accordion.Header>\n                                        <Accordion.Body>\n                                            {Object.keys(courseData.preReq).map(course => \n                                                <div key={course}>{course}</div>\n                                            )}\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                                <p></p>\n                            </Col> }\n                        </li>\n                    </motion.div>\n                )}\n            </ul>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap/\";\n\n// Breadcrumbs:\n// Main Page / SideMenu - left hand side menu to change views\nexport default function SideMenu( {setVisibleView} : {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    const handleSelect = (eventKey: string | null) => setVisibleView(eventKey);\n\n    return (\n        <Nav justify variant=\"pills\" className=\"flex-column\" defaultActiveKey=\"2\" onSelect={handleSelect}>\n            <Nav.Item>\n                <Nav.Link eventKey=\"2\">Semester View</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link data-testid=\"degree-view-nav\" eventKey=\"3\">Degree Plan View</Nav.Link>\n            </Nav.Item>\n        </Nav>\n    );\n}","const SELECT_MAP_INIT = {\n    \"1\": false,\n    \"2\": false,\n    \"3\": false,\n    \"4\": false,\n    \"5\": false,\n    \"6\": false,\n    \"7\": false,\n    \"8\": false\n};\nexport default SELECT_MAP_INIT;\n","// Source Imports\nimport React from \"react\";\nimport { Card, Table, OverlayTrigger, Popover } from \"react-bootstrap/\";\nimport { BsEraserFill } from \"react-icons/bs\";\nimport { ImCross, ImRadioChecked, ImRadioUnchecked } from \"react-icons/im\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Design Imports\nimport \"../../css/courses.css\";\n\n// Breadcrumbs:\n// Main Page / DegreePlan / SemesterComp - card that holds all courses in a semester in table form\nfunction SemesterComp({ SET_SEMESTER_MAP, SEMESTER_MAP, courseList, setSemesterSelect, semesterSelect, setSemesterHeader, SET_SELECT_MAP, SELECT_MAP, buttonList }: {\n    courseList: Course[],\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void,\n    SET_SELECT_MAP: (s: Record<string, boolean>) => void, SELECT_MAP: Record<string, boolean>,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    const semesterIndex = \"\"+semesterSelect;\n\n    function selectToggle(key: string) {\n        const NEW_SELECT_MAP = {...SELECT_MAP};\n        \n        Object.keys(NEW_SELECT_MAP).forEach(item => {\n            item === key ? NEW_SELECT_MAP[+item] = true : NEW_SELECT_MAP[+item] = false;\n            SET_SELECT_MAP(NEW_SELECT_MAP);\n        });\n\n        setSemesterSelect(key);\n        handleSelect(key);\n    }\n\n    function handleSelect (val: string) {\n        setSemesterHeader(buttonList[+val-1].name);\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        if (courseData[id].name === \"\") {\n            NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n            delete courseData[id];\n        } else {\n            Object.values(courseData).forEach(value => {\n                Object.keys(value.preReq).forEach(courseName => {\n                    if(courseName === courseData[id].name) {\n                        value.preReq[courseName] = false;\n                    }\n                });\n            });\n            Object.keys(SEMESTER_MAP).forEach(key => {\n                SEMESTER_MAP[key].forEach(item => {\n                    if(Object.keys(item.preReq).length > 0) {\n                        if (Object.values(item.preReq).every(course => course === true)){\n                            item.preReqCheck = \"black\";\n                        } else {\n                            item.preReqCheck = \"red\";\n                        }\n                        updateColor(item);\n                    }\n                });\n            });\n        }\n        \n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        setSemesterSelect(semesterSelect);\n    }\n\n    function removeAllCourses() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        Object.values(NEW_SEMESTER_MAP[\"\"+semesterSelect]).forEach(course => {\n            removeCourse(course.id);\n        });\n\n        SET_SEMESTER_MAP({...NEW_SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    return (\n        <div>\n            <Card className=\"card\" style={{ width: \"100%\" }}>\n                <button className=\"delete-button\" onClick={removeAllCourses}>\n                    <BsEraserFill></BsEraserFill>\n                </button>\n                { !SELECT_MAP[+semesterIndex] && <button className=\"select-button-off\" data-testid=\"select-button\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioUnchecked></ImRadioUnchecked> \n                </button>}\n                { SELECT_MAP[+semesterIndex] && <button className=\"select-button-on\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioChecked></ImRadioChecked>\n                </button>}\n                <Card.Body className=\"card-body\">\n                    \n                    <Table>\n                        <thead>\n                            <th className=\"semester-title\">{buttonList[+semesterIndex-1].name}</th>\n                            <tr>\n                                <th>Course</th>\n                                <th scope=\"col\">Credit(s)</th>\n                            </tr>\n                        </thead>\n                        <tbody data-testid=\"semester-table\">\n                            {courseList.map((course, id) =>\n\n                                <tr key={id} data-testid=\"semester-comp-card\">\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} show={ Object.values(course.preReq).every(course => course === true) ? false : true } placement={ SEMESTER_MAP[\"\"+semesterSelect].indexOf(course) > 2 ? \"bottom\" : \"top\" } overlay={\n                                        <Popover className=\"popover\" id=\"tooltip-preReq\">Missing: {Object.keys(course.preReq).filter(courseName => \n                                            course.preReq[courseName] === false).map(course => \n                                            <div key={course}>{course}</div>)} </Popover>}>\n                                        <th style={{color: course.preReqCheck}}>{course.name}</th>\n                                    </OverlayTrigger>\n                                    <td>{course.credits}</td>\n                                    <button className=\"delete-course\" onClick={() => removeCourse(course.id)}>\n                                        <ImCross></ImCross>\n                                    </button>\n                                </tr>\n\n                            )}\n                        </tbody>\n                    </Table>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default SemesterComp;\n","// Source Imports\nimport React, { useState } from \"react\";\nimport { Row, Col, Container} from \"react-bootstrap\";\nimport SELECT_MAP_INIT from \"../../assets/stateInitializers/radioToggle\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport SemesterComp from \"../Card_Components/SemesterComp\";\nimport ClearAllSemesterButton from \"./ClearAllSemesterButton\";\n\n// Design Imports\nimport \"../../css/calender.css\";\n\n// Breadcrumbs:\n// Main Page / DegreePlan - shows all semesters at once in the Degree Plan View\nexport function DegreePlan({ SET_SEMESTER_MAP ,SEMESTER_MAP, setSemesterSelect, setSemesterHeader, buttonList }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (s: string) => void,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    const [SELECT_MAP, SET_SELECT_MAP] = useState<Record<string, boolean>>(SELECT_MAP_INIT);\n    const SEMESTER_MAP_TO_PRINT = {...SEMESTER_MAP};\n\n    return (\n        <div>\n            <h2>Degree Plan View</h2>\n            \n            <div data-testid=\"degree-view\">\n                <Container>\n                    \n                    <Row xs={2} md={2}>\n                        \n                        {Object.entries(SEMESTER_MAP_TO_PRINT).map(([key, value]) =>\n                            <Col key={key}>\n                                <SemesterComp\n                                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                    SEMESTER_MAP={SEMESTER_MAP}\n                                    courseList={value}\n                                    setSemesterSelect={setSemesterSelect}\n                                    semesterSelect={key}\n                                    setSemesterHeader={setSemesterHeader}\n                                    SET_SELECT_MAP={SET_SELECT_MAP}\n                                    SELECT_MAP={SELECT_MAP}\n                                    buttonList={buttonList}\n                                ></SemesterComp>\n                            </Col>\n                        )}\n                        \n                    </Row>\n                    \n                </Container>\n            </div>\n            <div>\n                <ClearAllSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                ></ClearAllSemesterButton>\n            </div>\n        </div>\n    );\n}\n\nexport default DegreePlan;\n","// Source Imports\nimport React from \"react\";\nimport { Card,Col, Row, Container, Accordion } from \"react-bootstrap/\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\n// Design Imports\nimport \"../../css/courses.css\";\n\n// Breadcrumbs:\n// Main Page / SaveBin / BinCourseCard - card rendered to handle adding/removing from the \"save later bin\" (similar to CourseComp)\nexport default function BinCourseCard({ course, SET_SAVE_BIN, SAVE_BIN }: {\n    course: Course,\n    SET_SAVE_BIN: (b: Course[]) => void, SAVE_BIN: Course[]\n}): JSX.Element {\n    \n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n\n    return (\n        <div>           \n            <Card className=\"card\" style={{ width: \"19rem\" }}>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Card.Title>{course.name}</Card.Title>\n                        </Col>\n                        <Col>\n                            <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                <MdDeleteForever></MdDeleteForever></button>\n                        </Col>                        \n\n                    </Row>\n                </Container>\n                <Card.Body className=\"card-body\">\n                    <Card.Text>\n                        Credits: {course.credits}\n                    </Card.Text>\n                    <Card.Text>\n                        From: {course.timeStart} To: {course.timeEnd}\n                    </Card.Text>\n\n                    <Card.Text>\n                        Days: {course.schedule}\n                    </Card.Text>\n                    <Col className=\"column-dropdown\">\n                    </Col>\n                  \n                    <Col className=\"card-accordion\">\n                        <Accordion>\n                            <Accordion.Item eventKey=\"0\">\n                                <Accordion.Header>Details</Accordion.Header>\n                                <Accordion.Body>\n                                    Course description: {course.description}\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        </Accordion>\n                    </Col>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / SaveBin / ClearBinButton\nexport default function ClearBinButton({ SET_SAVE_BIN }: {\n    SET_SAVE_BIN: (b: Course[]) => void\n}): JSX.Element {\n\n    function ClearBin() {\n        SET_SAVE_BIN([]);\n    }\n    \n    return(\n        <button onClick={() => ClearBin()}>Clear Bin</button>\n    );\n}\n","// Source Imports\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React from \"react\";\nimport { Col, Container, Offcanvas, Row } from \"react-bootstrap\";\nimport Swal from \"sweetalert2\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport BinCourseCard from \"../Card_Components/BinCourseCard\";\nimport ClearBinButton from \"./ClearBinButton\";\n\n// Design Imports\nimport \"../../css/SaveBin.css\";\nimport SpiderMan from \"../../assets/images/spiderman_meme.jpeg\";\n\n// Breadcrumbs:\n// Main Page / SaveBin - bin that pops up to save courses for later\nexport default function SaveBin({ setBinVisible, binVisible, SET_SAVE_BIN, SAVE_BIN, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null\n}): JSX.Element {\n\n    // const list variable to map out SAVE_BIN useState variable\n    const binListToPrint = SAVE_BIN;\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        // If there are less than 6 courses, add the selected course onto the end of the classList\n        if (SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id])) {\n            Swal.fire({\n                title: \"Duplicate Course!\",\n                text: `${courseData[id].name} is already added to this semester. Please select another course.`,\n                icon: \"error\",\n                imageUrl: SpiderMan\n            });\n        } else {\n            // After adding course to the semester, remove it from the save-later bin\n            SEMESTER_MAP[\"\"+semesterSelect].length === 6 ? \n                Swal.fire(\n                    \"Getting Studious!\",\n                    \"Warning: Max number of courses selected for semester 📚.\",\n                    \"error\"\n                )\n                : (NEW_SEMESTER_MAP[\"\"+semesterSelect].push(courseData[id]), SET_SEMESTER_MAP(NEW_SEMESTER_MAP),\n                removeCourse(id));\n        }\n\n        \n\n    }\n\n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n    \n    return(\n        <div>\n            <Offcanvas className=\"bin\" show={binVisible} onHide={() => setBinVisible(false)} placement=\"bottom\" scroll={true} backdrop={false}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Save For Later</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body className=\"bin-body\">\n                    <ClearBinButton\n                        SET_SAVE_BIN={SET_SAVE_BIN}\n                    ></ClearBinButton>\n                    <Container>\n                        <Row xs={1} md={3}>\n                            <AnimatePresence>\n                                {binListToPrint.map(binListToPrint =>\n                                    <motion.div\n                                        key={binListToPrint.id}\n                                        drag\n                                        dragConstraints={{\n                                            top: 0,\n                                            bottom: 0,\n                                            right: 0,\n                                            left: 0\n                                        }}\n                                        onDragEnd={() => addCourse(binListToPrint.id)}\n                                        dragElastic={1}\n                                        initial={{ opacity: 0, x: 180 }}\n                                        animate={{ opacity: 1, x: 0 }}\n                                        exit={{ opacity: 0, y: -200, x: 180 }}\n                                        transition={{\n                                            ease: \"easeInOut\",\n                                            duration: 0.4\n                                        }}>\n                                        <Col >\n                                            <BinCourseCard\n                                                course={binListToPrint}\n                                                SET_SAVE_BIN={SET_SAVE_BIN}\n                                                SAVE_BIN={SAVE_BIN}\n                                            ></BinCourseCard>\n                                        </Col>\n                                    </motion.div>\n                                )}\n                            </AnimatePresence>\n                        </Row>\n                    </Container>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n","import React from \"react\";\nimport Swal from \"sweetalert2\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / SaveButton\nexport default function SaveButton({ SEMESTER_MAP }: {\n    SEMESTER_MAP: Record<string, Course[]>\n}): JSX.Element {\n    \n    function saveSemester() {\n        const preReqError = findPreReqErrorInEntirePlan();\n\n        if (preReqError){\n            Swal.fire(\n                \"Save Error\",\n                \"Error: Cannot save plan due to existing preReq error 🧐.\",\n                \"error\"\n            );\n        } else {\n            Swal.fire({\n                title: \"Give your saved plan a name!\",\n                text: \"Name:\",\n                input: \"text\",\n                showCancelButton: true        \n            }).then((result) => {\n                if (result.value) {\n                    localStorage.setItem(result.value, JSON.stringify(SEMESTER_MAP));\n                    // const retrievedObject = localStorage.getItem(result.value);\n                    // console.log(\"retrievedObject: \", JSON.parse(\"\"+retrievedObject));\n    \n                    Swal.fire(\n                        \"Saved!\",\n                        `${result.value} is now saved 🚀.`,\n                        \"success\"\n                    );\n    \n                } else {\n                    Swal.fire(\n                        \"Canceled Save\",\n                        \"You did not save your plan 😅.\",\n                        \"info\"\n                    );\n                }\n            });\n        }\n    }\n\n    function findPreReqErrorInEntirePlan() {\n        let flag = false;\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(course => {\n                if (course.preReqCheck === \"red\") {\n                    flag = true;\n                }\n            });\n        });\n        return flag;\n    }\n\n    return(\n        <button onClick={() => saveSemester()}>Save Semester</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport Swal from \"sweetalert2\";\n\n// Breadcrumbs:\n// Main Page / AccessSavedSemesterButton / ClearSavedSemestersButton\nexport default function ClearSavedSemestersButton(): JSX.Element {\n    \n    function clearAllSavedSemesters() {\n        Swal.fire({\n            title: \"Are you sure you want to delete all of your saved semesters?\",\n            showDenyButton: true,\n            confirmButtonText: \"Delete All Saves\",\n            denyButtonText: \"Don't delete All Saves\",\n            icon: \"warning\"\n        }).then((result) => {\n            /* Read more about isConfirmed, isDenied below */\n            if (result.isConfirmed) {\n                localStorage.clear();\n                console.log(localStorage);\n                Swal.fire(\"All Saved Semesters Deleted 😁!\", \"\", \"success\");\n            } else if (result.isDenied) {\n                Swal.fire(\"Semesters are not Deleted 😮‍💨.\", \"\", \"info\");\n            }\n        });\n        \n    }\n\n    return(\n        <button onClick={() => clearAllSavedSemesters()}>Clear All Saved Semesters</button>\n    );\n}","// Source Imports\nimport React from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { ImCross } from \"react-icons/im\";\nimport Swal from \"sweetalert2\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport ClearSavedSemestersButton from \"./ClearSavedSemestersButton\";\n\n// Breadcrumbs:\n// Main Page / AccessSavedSemesterButton\nexport default function AccessSavedSemesters({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, setSelectedSave }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    setSelectedSave: (s: string) => void\n}): JSX.Element {\n\n    // Main Load Function\n    function loadSave(key: string) {\n        // Remove all courses and remove pre-req markers.\n        removeAllCourses();\n        \n        // Retrieve Object from localStorage\n        const retrievedObject = localStorage.getItem(key);\n        const parsedObject = JSON.parse(\"\"+retrievedObject) as Record<string, Course[]>;\n\n        // add necessary amount of semesters and courses respectively\n        getNumberOfSemesters(parsedObject);\n\n        setSelectedSave(key);\n    }\n\n    function addLoadedSave(parsedObject: Record<string, Course[]>) {\n        Object.keys(parsedObject).forEach(key => {\n            Object.values(parsedObject[key]).forEach(course => {\n                addCourse(course.id, key);\n            });\n        }); \n    }\n\n    function getNumberOfSemesters(parsedObject: Record<string, Course[]>) {\n        const count = Object.keys(parsedObject).length;\n        const numberOfVisibleSemesters = semesterCount - 1;\n        const semesterCountBuffer: number[] = [];\n        \n        if (numberOfVisibleSemesters < count) {\n            for (let i = numberOfVisibleSemesters; i < count; i++){\n                semesterCountBuffer.push(i+1);\n                // console.log(`NUMBER: ${semesterCountBuffer}`);\n            }\n            addSemester(semesterCountBuffer, parsedObject);\n            setSemesterCount(count+1);\n\n        } else {\n            addLoadedSave(parsedObject);\n        }\n        \n        return semesterCountBuffer;\n    }\n\n    function addSemester(semesterCountBuffer: number[], parsedObject: Record<string, Course[]>) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        semesterCountBuffer.forEach(key => {\n            // Create each new Semester\n            buttonList.push({name: getSemesterName(key), value: key});\n            NEW_SEMESTER_MAP[\"\"+key] = [];\n            Object.keys(NEW_SEMESTER_MAP).forEach(mapKey => {\n                Object.keys(parsedObject).forEach(objKey => {\n                    if (\"\"+mapKey === objKey) {\n                        // While in the same semester for both the current and saved semester\n                        Object.values(parsedObject[objKey]).forEach(course => {\n                            if (!NEW_SEMESTER_MAP[mapKey].includes(course)){\n                                /* If the course in the saved semester is not present in \n                                the current semester then AddCourse */\n                                addCourses(course, mapKey, NEW_SEMESTER_MAP);\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        setButtonList(buttonList);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        \n        return NEW_SEMESTER_MAP;\n    }\n\n    function getSemesterName(count: number) {\n        let newCount = count;\n        let season = \"\";\n        if (count % 2 !== 0) {\n            newCount = (count+1) / 2;\n            season = \"Fall\";\n        } else {\n            newCount = count/2;\n            season = \"Spring\";\n        }\n\n        return `${season} ${newCount}`;\n\n    }\n\n    function addCourse(id: number, key: string) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        //  PREREQ MET IN PRIOR SEMESTER\n        if (Object.keys(courseData[id].preReq).length > 0){\n            console.log(courseData[id].preReq);\n            if (Object.values(courseData[id].preReq).every(course => course === true)){\n                courseData[id].preReqCheck = \"black\";\n            } else {\n                preReqAlert();\n                courseData[id].preReqCheck = \"red\";\n            }\n            updateColor(courseData[id]);\n        }\n\n        if (SEMESTER_MAP[key].length === 6) {\n            maxNumberOfCoursesAlert();\n        } else {\n            for (const [key, value] of Object.entries(courseData)) {\n                console.log([key,value]);\n                Object.keys(value.preReq).forEach(courseName => {\n                    //console.log(courseName);\n                    if(courseName === courseData[id].name) {\n                        console.log(courseName);\n                        value.preReq[courseName] = true;\n                    }\n                });\n            }\n            NEW_SEMESTER_MAP[key].push(courseData[id]);\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        }\n\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n    }\n\n    function addCourses(course: Course, mapKey: string, NEW_SEMESTER_MAP: Record<string, Course[]>) {\n        //  PREREQ MET IN PRIOR SEMESTER\n        if (Object.keys(courseData[course.id].preReq).length > 0){\n            console.log(courseData[course.id].preReq);\n            if (Object.values(courseData[course.id].preReq).every(course => course === true)){\n                courseData[course.id].preReqCheck = \"black\";\n            } else {\n                // alert(\"Warning: Pre-Reqs not met.\");\n                courseData[course.id].preReqCheck = \"red\";\n            }\n            updateColor(courseData[course.id]);\n        }\n        NEW_SEMESTER_MAP[mapKey].push(course);\n\n        for (const [key, value] of Object.entries(NEW_SEMESTER_MAP)) {\n            console.log([key,value]);\n            NEW_SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n    }\n\n    function deleteSavedSemester(key: string) {\n        Swal.fire({\n            title: `Are you sure you want to delete \"${key}\"?`,\n            showDenyButton: true,\n            confirmButtonText: `Delete \"${key}\"`,\n            denyButtonText: \"Don't delete\",\n            icon: \"warning\"\n        }).then((result) => {\n            /* Read more about isConfirmed, isDenied below */\n            if (result.isConfirmed) {\n                localStorage.removeItem(key);\n                Swal.fire(`\"${key}\" Deleted 😁!`, \"\", \"success\");\n            } else if (result.isDenied) {\n                Swal.fire(`\"${key}\" was not Deleted 😮‍💨.`, \"\", \"info\");\n            }\n        });\n    }\n\n    function preReqAlert() {\n        Swal.fire(\n            \"Pre-Req Error!\",\n            \"Warning: Pre-Reqs not met 🤔.\",\n            \"error\"\n        );\n    }\n\n    function maxNumberOfCoursesAlert() {\n        Swal.fire(\n            \"Getting Studious!\",\n            \"Warning: Max number of courses selected for semester 📚.\",\n            \"error\"\n        );\n    }\n\n    function removeAllCourses() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP}; \n        for (const [key] of Object.entries(NEW_SEMESTER_MAP)) {\n            Object.values(NEW_SEMESTER_MAP[key]).forEach(course => {\n                removePreReq(course);\n                NEW_SEMESTER_MAP[key].pop();\n            });\n            NEW_SEMESTER_MAP[key]=[];\n        }\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function removePreReq(course: Course) {\n        Object.values(courseData).forEach(value => {\n            Object.keys(course.preReq).forEach(courseName => {\n                if(courseName === course.name) {\n                    value.preReq[courseName] = false;\n                }\n            });\n        });\n\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        });\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return(\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Saved Semesters\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n                {Object.keys(localStorage).map(key =>\n                    <div \n                        style={{display: \"inline-flex\"}} \n                        key={key}>\n                        <Dropdown.Item \n                            onClick={() => loadSave(key)}\n                        >{key}\n                            \n                        </Dropdown.Item>\n                        <button onClick={() => deleteSavedSemester(key)}>\n                            <ImCross></ImCross>\n                        </button>\n                    </div>\n                )}\n                <ClearSavedSemestersButton></ClearSavedSemestersButton>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\n\n// Design Imports\nimport \"../../css/AddRemoveSemester.css\";\n\n// Breadcrumbs:\n// Main Page / AddSemesterButton - appends new semester\nexport default function AddSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[]\n}): JSX.Element {\n    \n    function addSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        buttonList.push({name: getSemesterName(semesterCount), value: semesterCount});\n        setButtonList(buttonList);\n\n        NEW_SEMESTER_MAP[\"\"+semesterCount] = [];\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        count++;\n        setSemesterCount(count);\n    }\n\n    function getSemesterName(count: number) {\n        let newCount = count;\n        let season = \"\";\n        if (count % 2 !== 0) {\n            newCount = (count+1) / 2;\n            season = \"Fall\";\n        } else {\n            newCount = count/2;\n            season = \"Spring\";\n        }\n\n        return `${season} ${newCount}`;\n\n    }\n\n    return(\n        <button className=\"add_button\" data-testid=\"btn-add-semester\" onClick={() => addSemester()}>Add Semester</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\nimport Swal from \"sweetalert2\";\n\n// Design Imports\nimport \"../../css/AddRemoveSemester.css\";\n\n// Breadcrumbs:\n// Main Page / RemoveSemesterButton - clears courses and removes semester\nexport default function RemoveSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, setSemesterSelect, setSemesterHeader }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (h: string) => void\n}): JSX.Element {\n    \n    function removeSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        if (count === 2) {\n            Swal.fire(\n                \"Invalid Operation!\",\n                \"Cannot remove any more semesters 😅.\",\n                \"warning\"\n            );\n        } else {\n\n            // Default to render first semester since it will never be deleted.\n            setSemesterSelect(\"1\");\n            setSemesterHeader(buttonList[0].name);\n\n            // Clear last semester's courses before deletion\n            removeAllCourses();\n\n            // Remove last semester\n            buttonList.pop();\n            setButtonList(buttonList);\n\n            delete NEW_SEMESTER_MAP[semesterCount-1];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n\n            count--;\n            setSemesterCount(count);\n        }\n    }\n\n    function removeAllCourses() {\n        Object.values(SEMESTER_MAP[semesterCount-1]).forEach(course => {\n            removePreReq(course);\n        });\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [semesterCount-1]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    function removePreReq(course: Course) {\n        Object.values(courseData).forEach(value => {\n            Object.keys(course.preReq).forEach(courseName => {\n                if(courseName === course.name) {\n                    value.preReq[courseName] = false;\n                }\n            });\n        });\n\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        });\n        \n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return(\n        <button className=\"remove_button\" data-testid=\"btn-remove-semester\" onClick={() => removeSemester()}>Remove Semester</button>\n    );\n}\n","import React from \"react\";\n\nimport \"../../css/SelectedSave.css\";\n\n// Breadcrumbs:\n// Main Page / SelectedSaveHeader\nexport default function SelectedSaveHeader({ selectedSave }: {\n    selectedSave: string\n}): JSX.Element {\n    return(\n        <h3 className=\"save-header\">{selectedSave}</h3>\n    );\n}","// Source Imports\nimport React, { useState } from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport SEMESTER_MAP_INIT from \"../assets/stateInitializers/semesterMap\";\nimport buttonListInit from \"../assets/stateInitializers/buttonList\";\n\n// Component Imports\nimport { Board } from \"./Views/Board\";\nimport DisplayCourses from \"./Right_Menu/DisplayCourses\";\nimport SideMenu from \"./Left_Menu/SideMenu\";\nimport DegreePlan from \"./Views/DegreePlan\";\nimport SaveBin from \"./Save_Later_Bin/SaveBin\";\nimport SaveButton from \"./Save_Load_Semesters/SaveButton\";\nimport AccessSavedSemestersButton from \"./Save_Load_Semesters/AccessSavedSemestersButton\";\nimport AddSemesterButton from \"./Add_Remove_Semesters/AddSemesterButton\";\nimport RemoveSemesterButton from \"./Add_Remove_Semesters/RemoveSemesterButton\";\nimport SelectedSaveHeader from \"./Save_Load_Semesters/SelectedSaveHeader\";\n\n// Design Imports\nimport \"../css/App.css\";\n\n// Breadcrumbs:\n// Main Page\nfunction MainPage({ visibleView, setVisibleView }: {\n    setVisibleView: (s: string | null) => void, visibleView: string | null,\n}): JSX.Element {\n    const [semesterSelect, setSemesterSelect] = useState<string | null>(\"1\");\n    const [semesterHeader, setSemesterHeader] = useState<string>(\"Fall 1\");\n\n    // Selected Save Variable\n    const [selectedSave, setSelectedSave] = useState<string>(\"No Save Selected\");\n    \n    // Bin Variables\n    const [binVisible, setBinVisible] = useState<boolean>(false);\n    const SAVE_BIN_INIT: Course[] = [];\n    const [SAVE_BIN, SET_SAVE_BIN] = useState<Course[]>(SAVE_BIN_INIT);\n\n    const [semesterCount, setSemesterCount] = useState<number>(9);\n    const [buttonList, setButtonList] = useState<ButtonList[]>(buttonListInit);\n   \n    // SEMESTER_MAP: useState to modify each semester and its courses\n    const [SEMESTER_MAP, SET_SEMESTER_MAP] = useState<Record<string, Course[]>>(SEMESTER_MAP_INIT);\n\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                UD CIS Scheduler\n                <p>Srinath Venkatesh, Elliot Tingey, Geoffrey Linderman</p>\n\n                <SaveButton\n                    SEMESTER_MAP={SEMESTER_MAP}\n                ></SaveButton>\n                { localStorage.length > 0 && \n                <div>\n                    <AccessSavedSemestersButton\n                        SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                        SEMESTER_MAP={SEMESTER_MAP}\n                        setSemesterCount={setSemesterCount}\n                        semesterCount={semesterCount}\n                        setButtonList={setButtonList}\n                        buttonList={buttonList}\n                        setSelectedSave={setSelectedSave}\n                    ></AccessSavedSemestersButton> \n                    <SelectedSaveHeader\n                        selectedSave={selectedSave}\n                    ></SelectedSaveHeader>\n                </div>\n                }\n                \n            </header>\n            <section className=\"cell-left\">\n                <p>Menu</p>\n                <SideMenu\n                    setVisibleView={setVisibleView}\n                ></SideMenu>\n            </section>\n            <section className=\"cell-main\">\n\n                <RemoveSemesterButton\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                ></RemoveSemesterButton>\n                \n                <AddSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                ></AddSemesterButton>\n\n                \n                { visibleView === \"2\" && <Board\n                    semesterHeader={semesterHeader}\n                    setSemesterHeader={setSemesterHeader}\n                    setSemesterSelect={setSemesterSelect}\n                    semesterSelect={semesterSelect}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                    binVisible={binVisible}\n                    buttonList={buttonList}\n                ></Board> }\n                \n                { visibleView === \"3\" && <DegreePlan\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    buttonList={buttonList}\n                ></DegreePlan> }\n                \n            </section>\n            <section className=\"cell-right\">\n                { (visibleView === \"2\" || visibleView === \"3\") &&  <DisplayCourses\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    semesterSelect={semesterSelect}\n                    setBinVisible={setBinVisible}\n                    binVisible={binVisible}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                ></DisplayCourses> }            \n            </section>\n\n            <SaveBin\n                setBinVisible={setBinVisible}\n                binVisible={binVisible}\n                SET_SAVE_BIN={SET_SAVE_BIN}\n                SAVE_BIN={SAVE_BIN}\n                SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                SEMESTER_MAP={SEMESTER_MAP}\n                semesterSelect={semesterSelect}\n            ></SaveBin>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from \"react\";\n\nimport \"../css/LandingPage.css\";\n\nexport default function LandingPage({ setVisibleView }: {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    function changeView() {\n        setVisibleView(\"2\");\n        //setTimeout(() => setVisibleView(\"2\"), 2000);\n    }\n\n    return(\n        <div className=\"home\">\n            <div className=\"centered\">\n                <h1>UD CIS Scheduler</h1>\n                <h2>Start Building Your Plan</h2>\n                <button data-testid=\"enter-main\" onClick={() => changeView()}>Enter</button>\n            </div>\n        </div>\n    );\n\n}","import React, { useState } from \"react\";\nimport \"./css/App.css\";\n\nimport MainPage from \"./components/MainPage\";\nimport LandingPage from \"./components/LandingPage\";\n\nfunction App(): JSX.Element {\n    const [visibleView, setVisibleView] = useState<string | null>(\"0\"); // Changes the different board views\n\n    return (\n        <div>\n            \n            {visibleView === \"0\" && <LandingPage\n                setVisibleView={setVisibleView}\n            ></LandingPage> }\n        \n            {visibleView !== \"0\" && <MainPage\n                setVisibleView={setVisibleView}\n                visibleView={visibleView}\n            ></MainPage> }\n        \n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}