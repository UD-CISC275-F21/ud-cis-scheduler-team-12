{"version":3,"sources":["assets/stateInitializers/semesterMap.ts","assets/stateInitializers/buttonList.ts","assets/stateInitializers/radioToggle.ts","assets/courses.ts","utilities/updateColor.ts","utilities/removePreReq.ts","components/Views/ClearSemesterButton.tsx","components/Views/ClearAllSemesterButton.tsx","components/Views/SemesterView/SemesterButtons.tsx","assets/images/spiderman_meme.jpeg","utilities/EditCourseFunctions.ts","components/Card_Components/CourseComp.tsx","utilities/duplicateCourse.ts","components/Views/SemesterView/CourseCardContainer.tsx","components/Views/Board.tsx","utilities/findCourseInSemester.ts","utilities/findCourseInEntirePlan.ts","components/Right_Menu/SearchBar.tsx","utilities/preReqAlert.ts","utilities/maxNumberOfCourses.ts","components/Right_Menu/DisplayCourses.tsx","components/Left_Menu/SideMenu.tsx","components/Card_Components/SemesterComp.tsx","components/Views/DegreePlan.tsx","utilities/removeCourseFromBin.ts","components/Card_Components/BinCourseCard.tsx","components/Save_Later_Bin/ClearBinButton.tsx","components/Save_Later_Bin/SaveBin.tsx","components/Save_Load_Semesters/SaveButton.tsx","utilities/getSemesterName.ts","components/Save_Load_Semesters/ClearSavedSemestersButton.tsx","components/Save_Load_Semesters/AccessSavedSemestersButton.tsx","components/Add_Remove_Semesters/AddSemesterButton.tsx","components/Add_Remove_Semesters/RemoveSemesterButton.tsx","components/Save_Load_Semesters/SelectedSaveHeader.tsx","components/MainPage.tsx","components/LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SEMESTER_MAP_INIT","buttonListInit","name","value","SELECT_MAP_INIT","courseDataInit","updateColor","course","preReqCheck","removePreReq","SEMESTER_MAP","courseData","Object","values","forEach","keys","preReq","courseName","key","item","length","every","ClearSemesterButton","SET_SEMESTER_MAP","semesterSelect","onClick","ClearAllSemesterButton","style","margin","NEW_SEMESTER_MAP","entries","SemesterButtons","buttonList","buttonToggle","setSemesterSelect","setSemesterHeader","checkPreReqWarning","flag","ToggleButtonGroup","className","onChange","val","map","radio","idx","ToggleButton","id","type","variant","changeName","enteredName","setTitleEditMode","setCourseData","duplicateCourse","toLowerCase","replace","isCourseInCourseData","Swal","fire","title","text","icon","imageUrl","SpiderMan","req","CourseComp","useState","titleEditMode","descriptionEditMode","setDescriptionEditMode","creditsEditMode","setCreditsEditMode","handleSubmit","cardProperty","event","preventDefault","stopPropagation","form","currentTarget","floatingInput","enteredCredits","credits","changeCredits","enteredDescription","description","changeDescription","OverlayTrigger","trigger","show","placement","indexOf","overlay","Popover","filter","Card","width","color","Container","Row","Col","motion","div","Title","Form","onSubmit","Control","outline","border","boxShadow","textAlign","autoFocus","size","placeholder","pop","removeCourse","Body","Text","timeStart","timeEnd","schedule","Accordion","defaultActiveKey","Item","eventKey","Header","duplicateCourseAlert","duplicateReason","CourseCardContainer","SET_SAVE_BIN","SAVE_BIN","binVisible","classListToPrint","xs","md","AnimatePresence","drag","dragConstraints","top","bottom","right","left","onDragEnd","includes","dragElastic","initial","opacity","x","animate","exit","y","transition","ease","duration","Board","semesterHeader","findCourseInSemester","findCourseInEntirePlan","SearchBar","setQuery","target","preReqAlert","maxNumberOfCoursesAlert","DisplayCourses","setBinVisible","query","addCourse","foundCourse","foundCourseInPlan","push","DropdownButton","Dropdown","as","SEMESTER_MAP_BUFFER","createCourse","post","flush","SideMenu","setVisibleView","Nav","justify","onSelect","Link","SemesterComp","courseList","SET_SELECT_MAP","SELECT_MAP","semesterIndex","selectToggle","NEW_SELECT_MAP","Table","scope","reduce","acc","DegreePlan","SEMESTER_MAP_TO_PRINT","removeCourseFromBin","BinCourseCard","ClearBinButton","SaveBin","binListToPrint","Offcanvas","onHide","scroll","backdrop","closeButton","SaveButton","saveSemester","findPreReqErrorInEntirePlan","input","showCancelButton","then","result","savedPlan","localStorage","setItem","JSON","stringify","getSemesterName","count","newCount","season","ClearSavedSemestersButton","showDenyButton","confirmButtonText","denyButtonText","isConfirmed","clear","console","log","isDenied","AccessSavedSemesters","setSemesterCount","semesterCount","setButtonList","setSelectedSave","loadSaveHandler","findAnyCourseInEntirePlan","loadSave","removeAllCourses","retrievedObject","getItem","parsedObject","parse","parsedSemesterMap","numberOfVisibleSemesters","semesterCountBuffer","i","mapKey","objKey","addCourses","addSemester","addLoadedSave","getNumberOfSemesters","Toggle","Menu","display","removeItem","deleteSavedSemester","AddSemesterButton","SELECT_MAP_BUFFER","RemoveSemesterButton","removeSemester","SelectedSaveHeader","selectedSave","MainPage","visibleView","LandingPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41cf62cc.chunk.js","sourcesContent":["import { Course } from \"../../interfaces/course\";\n\nconst SEMESTER_MAP_INIT: Record<string, Course[]> = {\n    \"1\": [],\n    \"2\": [],\n    \"3\": [],\n    \"4\": [],\n    \"5\": [],\n    \"6\": [],\n    \"7\": [],\n    \"8\": [],\n};\nexport default SEMESTER_MAP_INIT;\n","const buttonListInit = [\n    { name: \"Fall 1\", value: 1 },\n    { name: \"Spring 1\", value: 2 },\n    { name: \"Fall 2\", value: 3 },\n    { name: \"Spring 2\", value: 4 },\n    { name: \"Fall 3\", value: 5 },\n    { name: \"Spring 3\", value: 6 },\n    { name: \"Fall 4\", value: 7 },\n    { name: \"Spring 4\", value: 8 },\n];\nexport default buttonListInit;\n","const SELECT_MAP_INIT = {\n    \"1\": false,\n    \"2\": false,\n    \"3\": false,\n    \"4\": false,\n    \"5\": false,\n    \"6\": false,\n    \"7\": false,\n    \"8\": false\n};\nexport default SELECT_MAP_INIT;\n","import { Course } from \"../interfaces/course\";\n\nconst courseDataInit: Course[] = [\n    {\n        \"id\": 0,\n        \"name\": \"CISC 100\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"CISC 200\",\n        \"timeStart\": 1400,\n        \"timeEnd\": 1500,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CISC 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"CISC 300\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Science 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CISC 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"MATH 100\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1630,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"MATH 200\",\n        \"timeStart\": 1330,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGL 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"CPEG 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"CPEG 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 100\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"CPEG 300\",\n        \"timeStart\": 900,\n        \"timeEnd\": 955,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Engineering 300, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"CPEG 400\",\n        \"timeStart\": 1600,\n        \"timeEnd\": 1730,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CPEG 300\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"MATH 300\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"MATH 400\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"CPEG 355\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 355, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 300\": false, \"CISC 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"CISC 400\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1055,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CISC 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"ENGL 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is English 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"ENGL 300\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"ENGL 400\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1625,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"HIST 100\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1130,\n        \"schedule\": \"TR\",\n        \"description\": \"This is History 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"PHYS 100\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Physics 100, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"PHYS 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1155,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Physics 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"PHYS 100\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    }\n];\nexport default courseDataInit;\n","import { Course } from \"../interfaces/course\";\n\nexport default function updateColor(course: Course): string {\n    return course.preReqCheck;\n}\n","import { Course } from \"../interfaces/course\";\n\nimport updateColor from \"./updateColor\";\n\nexport default function removePreReq(course: Course, SEMESTER_MAP: Record<string, Course[]>, courseData: Course[]): void {\n    Object.values(courseData).forEach(value => {\n        Object.keys(value.preReq).forEach(courseName => {\n            if(courseName === course.name) {\n                value.preReq[courseName] = false;\n            }\n        });\n    });\n    Object.keys(SEMESTER_MAP).forEach(key => {\n        SEMESTER_MAP[key].forEach(item => {\n            if(Object.keys(item.preReq).length > 0) {\n                if (Object.values(item.preReq).every(course => course === true)){\n                    item.preReqCheck = \"black\";\n                } else {\n                    item.preReqCheck = \"red\";\n                }\n                updateColor(item);\n            }\n        });\n    });\n}\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\n\n// Function Imports\nimport removePreReq from \"../../utilities/removePreReq\";\n\n// Breadcrumbs:\n// Main Page / Board / ClearSemesterButton\nexport default function ClearSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, courseData }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>, \n    semesterSelect: string | null,\n    courseData: Course[]\n}): JSX.Element {\n\n    function removeAllCourses() {    \n        Object.values(SEMESTER_MAP[\"\"+semesterSelect]).forEach(value => {\n            removePreReq(value, SEMESTER_MAP, courseData);\n        }); \n        \n        SET_SEMESTER_MAP({...SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    return (\n        <button onClick={removeAllCourses} data-testid=\"btn-clear-semester\">Clear Current Semester</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\n\n// Function Imports\nimport removePreReq from \"../../utilities/removePreReq\";\n\nexport default function ClearAllSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, courseData}: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    courseData: Course[]\n}): JSX.Element {\n    \n    function removeAllSemesters() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP}; \n        for (const [key] of Object.entries(NEW_SEMESTER_MAP)) {\n            Object.values(NEW_SEMESTER_MAP[key]).forEach(course => {\n                removePreReq(course, SEMESTER_MAP, courseData);\n            });\n            NEW_SEMESTER_MAP[key]=[];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        }\n    }\n\n    return (\n        <button style={{margin: \"5%\"}} onClick={removeAllSemesters}>Clear All Semesters</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { ButtonList } from \"../../../interfaces/buttonList\";\nimport { Course } from \"../../../interfaces/course\";\n\n// Component Imports\n\n// Design Imports\nimport \"../../../css/board.css\";\n\nexport default function SemesterButtons({ buttonList, SEMESTER_MAP, buttonToggle, setSemesterSelect, setSemesterHeader }: {\n    buttonList: ButtonList[],\n    SEMESTER_MAP: Record<string, Course[]>,\n    buttonToggle: string,\n    setSemesterHeader: (s: string) => void,\n    setSemesterSelect: (s: string | null) => void\n}): JSX.Element {\n\n    function handleSelect (val: number) {\n        setSemesterSelect(\"\"+val);\n        setSemesterHeader(buttonList[val-1].name);\n    }\n\n    function checkPreReqWarning(key: string) {\n        let flag = false;\n        SEMESTER_MAP[key].forEach(course => {\n            if(course.preReqCheck === \"red\"){\n                flag = true;\n            }\n        });\n        return flag;\n    }\n\n    return(\n        <div>\n            <ToggleButtonGroup className=\"semester-button\" name=\"options\" value={+buttonToggle} onChange={handleSelect}>\n                {buttonList.map((radio, idx) =>\n                    <ToggleButton\n                        data-testid=\"btn-semester\"\n                        key={idx}\n                        id={`radio-${idx}`}\n                        type=\"radio\"\n                        variant={ checkPreReqWarning(\"\"+radio.value) ? \"outline-warning\" : SEMESTER_MAP[\"\"+radio.value].length > 0 ? \"outline-success\" :  \"outline-danger\" }\n                        name=\"radio\"\n                        value={radio.value}\n                    >\n                        {radio.name}\n                    </ToggleButton>\n                )}\n            </ToggleButtonGroup>\n        </div>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/spiderman_meme.4235d597.jpeg\";","import updateColor from \"./updateColor\";\nimport Swal from \"sweetalert2\";\nimport SpiderMan from \"../assets/images/spiderman_meme.jpeg\";\nimport { Course } from \"../interfaces/course\";\n\n\nexport function isCourseInCourseData(name: string, courseData: Course[]): boolean {\n    let flag = false;\n    Object.values(courseData).forEach(course => {\n        if (course.name.toLowerCase().replace(/\\s/g, \"\") === name.toLowerCase().replace(/\\s/g, \"\")) {\n            flag = true;\n        }\n    });\n    return flag;\n}\n\nexport function changeName(id: number, enteredName: string, \n    SEMESTER_MAP: Record<string, Course[]>, SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, \n    setTitleEditMode: (t: boolean) => void, courseData: Course[], setCourseData: (d: Course[]) => void): void {\n\n    const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n    const duplicateCourse = isCourseInCourseData(enteredName, courseData);\n    \n    if (!duplicateCourse) {\n        // Removing Pre-Req for all other courses\n        Object.values(courseData).forEach(item => {\n            Object.keys(item.preReq).forEach(req => {\n                if (req === enteredName) {\n                    item.preReq[req] = true;\n                } else if (req === courseData[id].name) {\n                    item.preReq[req] = false;\n                }\n            });\n            if (Object.values(item.preReq).every(course => course === true)){\n                item.preReqCheck = \"black\";\n            } else {\n                item.preReqCheck = \"red\";\n            }\n            updateColor(item);\n        });\n        courseData[id].name = enteredName;\n        setCourseData(courseData);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        setTitleEditMode(false);\n    } else {\n        Swal.fire({\n            title: \"Course Already Exists!\",\n            text: `${enteredName} already exists. Please enter another course name.`,\n            icon: \"error\",\n            imageUrl: SpiderMan\n        });\n    }\n}\n\nexport function changeDescription(id: number, enteredDescription: string, SEMESTER_MAP: Record<string, Course[]>, SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, \n    setDescriptionEditMode: (d: boolean) => void, courseData: Course[], setCourseData: (d: Course[]) => void): void {\n        \n    const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n    \n    courseData[id].description = enteredDescription;\n    setCourseData(courseData);\n    SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    setDescriptionEditMode(false);\n}\n\nexport function changeCredits(id: number, enteredCredits: string, SEMESTER_MAP: Record<string, Course[]>, SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, \n    setCreditsEditMode: (c: boolean) => void, courseData: Course[], setCourseData: (d: Course[]) => void): void {\n\n    const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n    \n    courseData[id].credits = +enteredCredits;\n    setCourseData(courseData);\n    SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    setCreditsEditMode(false);\n}\n","// Source Imports\nimport React, { useState } from \"react\";\nimport { Card, Col, Row, Container, Accordion, OverlayTrigger, Popover, Form } from \"react-bootstrap/\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { Course } from \"../../interfaces/course\";\n\n// Function Imports\nimport updateColor from \"../../utilities/updateColor\";\nimport removePreReq from \"../../utilities/removePreReq\";\nimport { changeName, changeCredits, changeDescription } from \"../../utilities/EditCourseFunctions\";\n\n// Design Imports\nimport \"../../css/courses.css\";\nimport { motion } from \"framer-motion\";\n\n// Breadcrumbs:\n// Main Page / Board / CourseComp - Course Card that holds information on course\nexport default function CourseComp({ course, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, courseData, setCourseData }: {\n    course: Course,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null,\n    setCourseData: (c: Course[]) => void, courseData: Course[]\n}): JSX.Element {\n\n    //visibility states for courses\n    const [titleEditMode, setTitleEditMode] = useState<boolean>(false);\n    const [descriptionEditMode, setDescriptionEditMode] = useState<boolean>(false);\n    const [creditsEditMode, setCreditsEditMode] = useState<boolean>(false);\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = { ...SEMESTER_MAP };\n\n        if (courseData[id].name === \"\") {\n            NEW_SEMESTER_MAP[\"\" + semesterSelect] = NEW_SEMESTER_MAP[\"\" + semesterSelect].filter(item => item !== courseData[id]);\n            courseData.pop();\n            setCourseData(courseData);\n        } else {\n            removePreReq(courseData[id], SEMESTER_MAP, courseData);\n        }\n        NEW_SEMESTER_MAP[\"\" + semesterSelect] = NEW_SEMESTER_MAP[\"\" + semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    const handleSubmit = (id: number, cardProperty: string) => (event: { preventDefault: () => void; stopPropagation: () => void; currentTarget: HTMLFormElement; }) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const form = event.currentTarget;\n\n        switch (cardProperty) {\n        case \"name\":\n            changeName(id, form.floatingInput.value, SEMESTER_MAP, SET_SEMESTER_MAP, setTitleEditMode, courseData, setCourseData);\n            break;\n        case \"credits\":\n            changeCredits(id, form.floatingInput.value, SEMESTER_MAP, SET_SEMESTER_MAP, setCreditsEditMode, courseData, setCourseData);\n            break;\n        case \"description\":\n            changeDescription(id, form.floatingInput.value, SEMESTER_MAP, SET_SEMESTER_MAP, setDescriptionEditMode, courseData, setCourseData);\n            break;\n        }\n    };\n\n    return (\n        <div>\n\n            <OverlayTrigger trigger={[\"hover\", \"focus\"]} show={Object.values(course.preReq).every(course => course === true) ? false : true} placement={SEMESTER_MAP[\"\" + semesterSelect].indexOf(course) > 2 ? \"bottom\" : \"top\"} overlay={\n                <Popover className=\"popover\" id=\"tooltip-preReq\">Missing: {Object.keys(course.preReq).filter(courseName =>\n                    course.preReq[courseName] === false).map(course =>\n                    <div key={course}>{course}</div>)} </Popover>}>\n                <Card className=\"card\" data-testid=\"course-card\" style={{ width: \"100%\", color: updateColor(course) }}>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <motion.div\n                                    onClick={() => setTitleEditMode(!titleEditMode)}\n                                >\n                                    <Card.Title className=\"card-title\">\n                                        {!titleEditMode && course.name}\n                                        {(course.name === \"\" || titleEditMode) && <Form onSubmit={handleSubmit(course.id, \"name\")}>\n                                            <Form.Control\n                                                style={{\n                                                    color: \"black\",\n                                                    outline: \"0\",\n                                                    border: \"1px solid #fff\",\n                                                    boxShadow: \"none\",\n                                                    textAlign: \"center\",\n\n                                                }}\n                                                autoFocus\n                                                size=\"lg\"\n                                                id=\"floatingInput\"\n                                                type=\"task\"\n                                                placeholder={course.name === \"\" ? \"Enter Name\" : course.name}\n                                            />\n                                        </Form>}\n                                    </Card.Title>\n                                </motion.div>\n                                <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                    <MdDeleteForever></MdDeleteForever>\n                                </button>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <Card.Body className=\"card-body\">\n                        <motion.div\n                            onClick={() => setCreditsEditMode(!creditsEditMode)}\n                        >\n                            <Card.Text className=\"card-credits\">\n                                Credits: {(!creditsEditMode && course.credits !== 0) && course.credits}\n                                {(course.credits === 0 || creditsEditMode) && <Form onSubmit={handleSubmit(course.id, \"credits\")}>\n                                    <Form.Control\n                                        style={{\n                                            color: \"black\",\n                                            outline: \"0\",\n                                            border: \"1px solid #fff\",\n                                            boxShadow: \"none\",\n                                            textAlign: \"center\",\n\n                                        }}\n                                        autoFocus\n                                        size=\"sm\"\n                                        id=\"floatingInput\"\n                                        type=\"task\"\n                                        placeholder={course.credits === 0 ? \"Enter Credit Hours\" : \"\" + course.credits}\n                                    />\n                                </Form>}\n                            </Card.Text>\n                        </motion.div>\n                        <Card.Text>\n                            From: {course.timeStart} To: {course.timeEnd}\n                        </Card.Text>\n\n\n                        <Card.Text>\n                            Days: {course.schedule}\n                        </Card.Text>\n                        <Col className=\"column-dropdown\">\n                        </Col>\n\n                        <Col className=\"card-accordion\">\n                            <Accordion defaultActiveKey={course.description === \"\" ? \"0\" : \"1\"}>\n                                <Accordion.Item eventKey=\"0\">\n                                    <Accordion.Header onClick={() => setDescriptionEditMode(false)}>Details</Accordion.Header>\n                                    <motion.div\n                                        onClick={() => setDescriptionEditMode(!descriptionEditMode)}\n                                    >\n                                        <Accordion.Body className=\"card-description\">\n                                            {!descriptionEditMode && course.description}\n                                            {(course.description === \"\" || descriptionEditMode) && <Form onSubmit={handleSubmit(course.id, \"description\")}>\n                                                <Form.Control\n                                                    style={{\n                                                        color: \"black\",\n                                                        outline: \"0\",\n                                                        border: \"1px solid #fff\",\n                                                        boxShadow: \"none\",\n                                                        textAlign: \"center\",\n\n                                                    }}\n                                                    autoFocus\n                                                    size=\"sm\"\n                                                    id=\"floatingInput\"\n                                                    type=\"task\"\n                                                    placeholder={course.description === \"\" ? \"Enter Description\" : course.description}\n                                                />\n                                            </Form>}\n                                        </Accordion.Body>\n                                    </motion.div>\n                                </Accordion.Item>\n                            </Accordion>\n                        </Col>\n                    </Card.Body>\n                </Card>\n            </OverlayTrigger>\n        </div>\n    );\n}\n","import Swal from \"sweetalert2\";\nimport SpiderMan from \"../assets/images/spiderman_meme.jpeg\";\nimport { Course } from \"../interfaces/course\";\n\n\nexport default function duplicateCourseAlert(id: number, duplicateReason: string, courseData: Course[]): void {\n    switch(duplicateReason){\n    case \"bin\":\n        Swal.fire({\n            title: \"Duplicate Course!\",\n            text: `${courseData[id].name} is already added to your bin. Please select another course.`,\n            icon: \"error\",\n            imageUrl: SpiderMan\n        });\n        break;\n    case \"semester\":\n        Swal.fire({\n            title: \"Duplicate Course!\",\n            text: `${courseData[id].name} is already added to this semester. Please select another course.`,\n            icon: \"error\",\n            imageUrl: SpiderMan\n        });\n        break;\n    case \"plan\":\n        Swal.fire({\n            title: \"Duplicate Course!\",\n            text: `${courseData[id].name} is already added to your plan. Please select another course.`,\n            icon: \"error\",\n            imageUrl: SpiderMan\n        });\n    }\n}\n","// Source Imports\nimport React from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport { Course } from \"../../../interfaces/course\";\n\n// Function Imports\nimport removePreReq from \"../../../utilities/removePreReq\";\n\n// Component Imports\nimport CourseComp from \"../../Card_Components/CourseComp\";\n\n// Design Imports\nimport \"../../../css/board.css\";\nimport duplicateCourseAlert from \"../../../utilities/duplicateCourse\";\n\n// Breadcrumbs:\n// Main Page / Board / CourseCardContainer\nexport default function CourseCardContainer({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, SET_SAVE_BIN, SAVE_BIN, binVisible, setCourseData, courseData }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    binVisible: boolean,\n    setCourseData: (c: Course[]) => void, courseData: Course[]\n}): JSX.Element {\n\n    // const list variable to map out classList useState variable\n    const classListToPrint = SEMESTER_MAP[\"\"+semesterSelect];\n\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        if (courseData[id].name === \"\") {\n            NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n            courseData.pop();\n            setCourseData(courseData);\n        } else {\n            if (binVisible){\n                if (SAVE_BIN.includes(courseData[id])) {\n                    duplicateCourseAlert(id, \"bin\", courseData);\n                } else {\n                    SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n                }\n            }\n            removePreReq(courseData[id], SEMESTER_MAP, courseData);\n        }\n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    return(\n        <div>\n            <Container data-testid=\"board\">\n                <Row data-testid=\"board-row-1\" xs={1} md={3}>\n                    <AnimatePresence>\n                        {classListToPrint.map(classListToPrint =>\n                            <motion.div\n                                key={classListToPrint.id}\n                                drag\n                                dragConstraints={{\n                                    top: 0,\n                                    bottom: 0,\n                                    right: 0,\n                                    left: 0\n                                }}\n                                onDragEnd={() => removeCourse(classListToPrint.id)}\n                                dragElastic={1}\n                                initial={{ opacity: 0, x: 180 }}\n                                animate={{ opacity: 1, x: 0 }}\n                                exit={{ opacity: 0, y: -200, x: 180 }}\n                                transition={{\n                                    ease: \"easeInOut\",\n                                    duration: 0.4\n                                }}>\n                                \n                                <Col >\n                                    {/* Course Card Component */}\n                                    <CourseComp\n                                        course={classListToPrint}\n                                        SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                        SEMESTER_MAP={SEMESTER_MAP}\n                                        semesterSelect={semesterSelect}\n                                        setCourseData={setCourseData}\n                                        courseData={courseData}\n                                    ></CourseComp>\n                                </Col>\n                            </motion.div>\n                        )}\n                    </AnimatePresence>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport ClearSemesterButton from \"./ClearSemesterButton\";\n\n// Design Imports\nimport \"../../css/board.css\";\nimport ClearAllSemesterButton from \"./ClearAllSemesterButton\";\nimport SemesterButtons from \"./SemesterView/SemesterButtons\";\nimport CourseCardContainer from \"./SemesterView/CourseCardContainer\";\n\n// Breadcrumbs:\n// Main Page / Board - renders each semester and its classes\nexport function Board({ setSemesterSelect, semesterSelect, SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterHeader, semesterHeader, SET_SAVE_BIN, SAVE_BIN, binVisible, buttonList, setCourseData, courseData }: {\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void, semesterHeader: string,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    binVisible: boolean,\n    buttonList: ButtonList[],\n    setCourseData: (d: Course[]) => void, courseData: Course[]\n}):  JSX.Element {\n\n    return (\n        <div data-testid=\"semester-view\">\n            <div>\n                <h2>Semester View - {semesterHeader}</h2>\n                <SemesterButtons\n                    buttonList={buttonList}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    buttonToggle={\"\"+semesterSelect}\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                ></SemesterButtons>\n            </div>\n\n            <div>\n                {/* Area where the course cards are placed + animations are handled */}\n                <CourseCardContainer\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                    semesterSelect={semesterSelect}\n                    binVisible={binVisible}\n                    setCourseData={setCourseData}\n                    courseData={courseData}\n                ></CourseCardContainer>\n                <div>\n                    <div>\n                        { SEMESTER_MAP[\"\"+semesterSelect].length > 0 && <ClearSemesterButton\n                            SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                            SEMESTER_MAP={SEMESTER_MAP}\n                            semesterSelect={semesterSelect}\n                            courseData={courseData}\n                        ></ClearSemesterButton> }\n                    </div>\n                    <div>\n                        <ClearAllSemesterButton\n                            SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                            SEMESTER_MAP={SEMESTER_MAP}\n                            courseData={courseData}\n                        ></ClearAllSemesterButton>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { Course } from \"../interfaces/course\";\n\nexport default function findCourseInSemester(id: number, semesterSelect: string | null, SEMESTER_MAP: Record<string, Course[]>, courseData: Course[]): boolean {\n    return SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id]);\n}\n","import { Course } from \"../interfaces/course\";\n\nexport default function findCourseInEntirePlan(id: number, SEMESTER_MAP: Record<string, Course[]>): boolean {\n    let flag = false;\n    Object.keys(SEMESTER_MAP).forEach(key => {\n        SEMESTER_MAP[key].forEach(course => {\n            if (course.id === id) {\n                flag = true;\n            }\n        });\n    });\n\n    return flag;\n}\n\nexport function findAnyCourseInEntirePlan( SEMESTER_MAP: Record<string, Course[]>): boolean {\n    let flag = false;\n    Object.keys(SEMESTER_MAP).forEach(key => {\n        SEMESTER_MAP[key].forEach(course => {\n            if (course) {\n                flag = true;\n            }\n        });\n    });\n\n    return flag;\n}\n","import React from \"react\";\n\nimport \"../../css/SearchBar.css\";\n\n// Breadcrumbs:\n// Main Page / DisplayCourses / SearchBar\nexport default function SearchBar({ setQuery }: {\n    setQuery: (q: string) => void\n}): JSX.Element {\n    return(\n        <div>\n            <input className=\"form__field\" data-testid=\"search-bar\" placeholder=\"Enter Course\" onChange={event => setQuery(event.target.value)}/>\n        </div>\n    );\n}\n","import Swal from \"sweetalert2\";\n\nexport default function preReqAlert(): void {\n    Swal.fire(\n        \"Pre-Req Error!\",\n        \"Warning: Pre-Reqs not met 🤔.\",\n        \"error\"\n    );\n}\n","import Swal from \"sweetalert2\";\n\nexport default function maxNumberOfCoursesAlert(): void {\n    Swal.fire(\n        \"Getting Studious!\",\n        \"Warning: Max number of courses selected for semester 📚.\",\n        \"error\"\n    );\n}\n","// Source Imports\nimport React, { useState } from \"react\";\nimport { MdAdd } from \"react-icons/md\";\nimport { Accordion, Col, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { motion } from \"framer-motion\";\nimport { Course } from \"../../interfaces/course\";\n\n// Function Imports\nimport updateColor from \"../../utilities/updateColor\";\nimport findCourseInSemester from \"../../utilities/findCourseInSemester\";\nimport findCourseInEntirePlan from \"../../utilities/findCourseInEntirePlan\";\n\n// Component Imports\nimport SearchBar from \"./SearchBar\";\n\n// Design Imports\nimport \"../../css/DisplayCourses.css\";\nimport preReqAlert from \"../../utilities/preReqAlert\";\nimport maxNumberOfCoursesAlert from \"../../utilities/maxNumberOfCourses\";\nimport duplicateCourseAlert from \"../../utilities/duplicateCourse\";\n\n// Breadcrumbs:\n// Main Page / DisplayCourses - displays list of scrollable courses on right hand side\nexport default function DisplayCourses({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, setBinVisible, binVisible, SET_SAVE_BIN, SAVE_BIN, courseData, setCourseData }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null,\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    setCourseData: (c: Course[]) => void, courseData: Course[]\n}): JSX.Element {\n\n    const [query, setQuery] = useState<string>(\"\");\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        const foundCourse = findCourseInSemester(id, semesterSelect, SEMESTER_MAP, courseData);\n        const foundCourseInPlan = findCourseInEntirePlan(id, SEMESTER_MAP);\n        \n        // If bin is open, add courses to bin\n        if (binVisible){\n            if (SAVE_BIN.includes(courseData[id])) {\n                duplicateCourseAlert(id, \"bin\", courseData);\n            } else {\n                SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n            }\n        } else {\n            if (foundCourse || foundCourseInPlan) {\n                foundCourse ? duplicateCourseAlert(id, \"semester\", courseData) : duplicateCourseAlert(id, \"plan\", courseData);\n            } else {\n                //  PREREQ MET IN PRIOR SEMESTER\n                if (Object.keys(courseData[id].preReq).length > 0){\n                    if (Object.values(courseData[id].preReq).every(course => course === true)){\n                        courseData[id].preReqCheck = \"black\";\n                    } else {\n                        preReqAlert();\n                        courseData[id].preReqCheck = \"red\";\n                    }\n                    updateColor(courseData[id]);\n                }\n    \n                if (SEMESTER_MAP[\"\" + semesterSelect].length === 6) {\n                    maxNumberOfCoursesAlert();\n                } else {\n                    Object.values(courseData).forEach(value => {\n                        Object.keys(value.preReq).forEach(courseName => {\n                            if(courseName === courseData[id].name) {\n                                value.preReq[courseName] = true;\n                            }\n                        });\n                    });\n                    \n                    NEW_SEMESTER_MAP[\"\" + semesterSelect].push(courseData[id]);\n                    SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n                }\n    \n                Object.keys(SEMESTER_MAP).forEach(key => {\n                    SEMESTER_MAP[key].forEach(item => {\n                        if(Object.keys(item.preReq).length > 0) {\n                            if (Object.values(item.preReq).every(course => course === true)){\n                                item.preReqCheck = \"black\";\n                            } else {\n                                item.preReqCheck = \"red\";\n                            }\n                            updateColor(item);\n                        }\n                    });\n                }); \n            }\n        }\n    }\n\n    function showBin() {\n        setBinVisible(!binVisible);\n    }\n\n    function createCourse() {\n        const SEMESTER_MAP_BUFFER = {...SEMESTER_MAP};\n\n        courseData.push({ \n            id: courseData.length,\n            name: \"\",\n            timeStart: 1300,\n            timeEnd: 1400,\n            schedule: \"MWF\",\n            description: \"\",\n            credits: 0,\n            preReq: {},\n            preReqCheck: \"black\" });\n        \n        addCourse(courseData[courseData.length-1].id);\n        setCourseData(courseData);\n        SET_SEMESTER_MAP(SEMESTER_MAP_BUFFER);\n    }\n    \n    return (\n\n        <div>\n            <div className=\"menu-button\">\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Course Options\">\n                    <Dropdown.Item as=\"button\" onClick={() => showBin()}>Save Later Bin</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => createCourse()}>Create New Course</Dropdown.Item>\n                </DropdownButton>\n            </div>\n            <SearchBar\n                setQuery={setQuery}\n            ></SearchBar>\n            <ul className=\"list-group\">\n                {courseData.filter(post => {\n                    if (query === \"\") {\n                        return post;\n                    } else if (post.name.toLowerCase().includes(query.toLowerCase())) {\n                        return post;\n                    }\n                }).map(courseData => \n                    <motion.div\n                        drag\n                        dragConstraints={{\n                            top: 0,\n                            bottom: 0,\n                            right: 0,\n                            left: 0\n                        }}\n                        onDragEnd={() => addCourse(courseData.id)}\n                        dragElastic={1}\n                        key={courseData.id}\n                        initial={{ opacity: 0, x: 180 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{\n                            ease: \"easeInOut\",\n                            duration: 1,\n                        }}>\n                        <li className=\"course\" key={courseData.id}>{courseData.name}\n                            <button className=\"add-button\" data-testid={courseData.name} onClick={() => addCourse(courseData.id)}>\n                                <MdAdd />\n                            </button>\n                            { Object.keys(courseData.preReq).length > 0 && <Col className=\"prereq-accordion\">\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"0\">\n                                        <Accordion.Header>Prerequisites</Accordion.Header>\n                                        <Accordion.Body>\n                                            {Object.keys(courseData.preReq).map(course => \n                                                <div key={course}>{course}</div>\n                                            )}\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                                <p></p>\n                            </Col> }\n                        </li>\n                    </motion.div>\n                )}\n            </ul>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap/\";\n\n// Breadcrumbs:\n// Main Page / SideMenu - left hand side menu to change views\nexport default function SideMenu( {setVisibleView} : {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    const handleSelect = (eventKey: string | null) => setVisibleView(eventKey);\n\n    return (\n        <Nav justify variant=\"pills\" className=\"flex-column\" defaultActiveKey=\"2\" onSelect={handleSelect}>\n            <Nav.Item>\n                <Nav.Link eventKey=\"2\">Semester View</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link data-testid=\"degree-view-nav\" eventKey=\"3\">Degree Plan View</Nav.Link>\n            </Nav.Item>\n        </Nav>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Card, Table, OverlayTrigger, Popover } from \"react-bootstrap/\";\nimport { BsEraserFill } from \"react-icons/bs\";\nimport { ImCross, ImRadioChecked, ImRadioUnchecked } from \"react-icons/im\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Function Imports\nimport removePreReq from \"../../utilities/removePreReq\";\n\n// Design Imports\nimport \"../../css/courses.css\";\n\n// Breadcrumbs:\n// Main Page / DegreePlan / SemesterComp - card that holds all courses in a semester in table form\nfunction SemesterComp({ SET_SEMESTER_MAP, SEMESTER_MAP, courseList, setSemesterSelect, semesterSelect, setSemesterHeader, SET_SELECT_MAP, SELECT_MAP, buttonList, courseData, setCourseData }: {\n    courseList: Course[],\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void,\n    SET_SELECT_MAP: (s: Record<string, boolean>) => void, SELECT_MAP: Record<string, boolean>,\n    buttonList: ButtonList[],\n    setCourseData: (c: Course[]) => void, courseData: Course[]\n}):  JSX.Element {\n\n    const semesterIndex = \"\"+semesterSelect;\n\n    function selectToggle(key: string) {\n        const NEW_SELECT_MAP = {...SELECT_MAP};\n        \n        Object.keys(NEW_SELECT_MAP).forEach(item => {\n            item === key ? NEW_SELECT_MAP[+item] = true : NEW_SELECT_MAP[+item] = false;\n            SET_SELECT_MAP(NEW_SELECT_MAP);\n        });\n\n        setSemesterSelect(key);\n        handleSelect(key);\n    }\n\n    function handleSelect (val: string) {\n        setSemesterHeader(buttonList[+val-1].name);\n    }\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        if (courseData[id].name === \"\") {\n            NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n            courseData.pop();\n            setCourseData(courseData);\n        } else {\n            removePreReq(courseData[id], SEMESTER_MAP, courseData);\n        }\n        \n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        setSemesterSelect(semesterSelect);\n    }\n\n    function removeAllCourses() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        Object.values(NEW_SEMESTER_MAP[\"\"+semesterSelect]).forEach(course => {\n            removeCourse(course.id);\n        });\n\n        SET_SEMESTER_MAP({...NEW_SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    return (\n        <div>\n            <Card className=\"card\" style={{ width: \"100%\" }}>\n                <button className=\"delete-button\" onClick={removeAllCourses}>\n                    <BsEraserFill></BsEraserFill>\n                </button>\n                { !SELECT_MAP[+semesterIndex] && <button className=\"select-button-off\" data-testid=\"select-button\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioUnchecked></ImRadioUnchecked> \n                </button>}\n                { SELECT_MAP[+semesterIndex] && <button className=\"select-button-on\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioChecked></ImRadioChecked>\n                </button>}\n                <Card.Body className=\"card-body\">\n                    \n                    <Table>\n                        <thead>\n                            <th className=\"semester-title\">{buttonList[+semesterIndex-1].name}</th>\n                            <tr>\n                                <th>Course</th>\n                                <th scope=\"col\">Credit(s)</th>\n                            </tr>\n                        </thead>\n                        <tbody data-testid=\"semester-table\">\n                            {courseList.map((course, id) =>\n\n                                <tr key={id} data-testid=\"semester-comp-card\">\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} show={ Object.values(course.preReq).every(course => course === true) ? false : true } placement={ SEMESTER_MAP[\"\"+semesterSelect].indexOf(course) > 2 ? \"bottom\" : \"top\" } overlay={\n                                        <Popover className=\"popover\" id=\"tooltip-preReq\">Missing: {Object.keys(course.preReq).filter(courseName => \n                                            course.preReq[courseName] === false).map(course => \n                                            <div key={course}>{course}</div>)} </Popover>}>\n                                        <th style={{color: course.preReqCheck}}>{course.name}</th>\n                                    </OverlayTrigger>\n                                    <td>{course.credits}</td>\n                                    <button className=\"delete-course\" onClick={() => removeCourse(course.id)}>\n                                        <ImCross></ImCross>\n                                    </button>\n                                </tr>\n\n                            )}\n                            <tr>\n                                <th>Total Credits: </th>\n                                <td>{Object.values(courseList).reduce((acc, val) => acc + val.credits, 0)}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default SemesterComp;\n","// Source Imports\nimport React from \"react\";\nimport { Row, Col, Container} from \"react-bootstrap\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport SemesterComp from \"../Card_Components/SemesterComp\";\nimport ClearAllSemesterButton from \"./ClearAllSemesterButton\";\n\n// Design Imports\nimport \"../../css/calender.css\";\n\n// Breadcrumbs:\n// Main Page / DegreePlan - shows all semesters at once in the Degree Plan View\nexport function DegreePlan({ SET_SEMESTER_MAP ,SEMESTER_MAP, setSemesterSelect, setSemesterHeader, buttonList, SET_SELECT_MAP, SELECT_MAP, setCourseData, courseData }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (s: string) => void,\n    buttonList: ButtonList[],\n    SET_SELECT_MAP: (s: Record<string, boolean>) => void, SELECT_MAP: Record<string, boolean>,\n    setCourseData: (d: Course[]) => void, courseData: Course[]\n}):  JSX.Element {\n\n    const SEMESTER_MAP_TO_PRINT = {...SEMESTER_MAP};\n\n    return (\n        <div>\n            <h2>Degree Plan View</h2>\n            \n            <div data-testid=\"degree-view\">\n                <Container>\n                    \n                    <Row xs={2} md={2}>\n                        \n                        {Object.entries(SEMESTER_MAP_TO_PRINT).map(([key, value]) =>\n                            <Col key={key}>\n                                <SemesterComp\n                                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                    SEMESTER_MAP={SEMESTER_MAP}\n                                    courseList={value}\n                                    setSemesterSelect={setSemesterSelect}\n                                    semesterSelect={key}\n                                    setSemesterHeader={setSemesterHeader}\n                                    SET_SELECT_MAP={SET_SELECT_MAP}\n                                    SELECT_MAP={SELECT_MAP}\n                                    buttonList={buttonList}\n                                    setCourseData={setCourseData}\n                                    courseData={courseData}\n                                ></SemesterComp>\n                            </Col>\n                        )}\n                        \n                    </Row>\n                    \n                </Container>\n            </div>\n            <div>\n                <ClearAllSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    courseData={courseData}\n                ></ClearAllSemesterButton>\n            </div>\n        </div>\n    );\n}\n\nexport default DegreePlan;\n","import { Course } from \"../interfaces/course\";\n\nfunction removeCourseFromBin(id: number, SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[], courseData: Course[]): void {\n\n    SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n}\nexport default removeCourseFromBin;\n","// Source Imports\nimport React from \"react\";\nimport { Card,Col, Row, Container, Accordion } from \"react-bootstrap/\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { Course } from \"../../interfaces/course\";\n\n// Design Imports\nimport \"../../css/courses.css\";\n\n// Breadcrumbs:\n// Main Page / SaveBin / BinCourseCard - card rendered to handle adding/removing from the \"save later bin\" (similar to CourseComp)\nexport default function BinCourseCard({ course, SET_SAVE_BIN, SAVE_BIN, courseData }: {\n    course: Course,\n    SET_SAVE_BIN: (b: Course[]) => void, SAVE_BIN: Course[],\n    courseData: Course[]\n}): JSX.Element {\n    \n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n\n    return (\n        <div>           \n            <Card className=\"card\" style={{ width: \"19rem\" }}>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Card.Title>{course.name}</Card.Title>\n                        </Col>\n                        <Col>\n                            <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                <MdDeleteForever></MdDeleteForever></button>\n                        </Col>                        \n\n                    </Row>\n                </Container>\n                <Card.Body className=\"card-body\">\n                    <Card.Text>\n                        Credits: {course.credits}\n                    </Card.Text>\n                    <Card.Text>\n                        From: {course.timeStart} To: {course.timeEnd}\n                    </Card.Text>\n\n                    <Card.Text>\n                        Days: {course.schedule}\n                    </Card.Text>\n                    <Col className=\"column-dropdown\">\n                    </Col>\n                  \n                    <Col className=\"card-accordion\">\n                        <Accordion>\n                            <Accordion.Item eventKey=\"0\">\n                                <Accordion.Header>Details</Accordion.Header>\n                                <Accordion.Body>\n                                    Course description: {course.description}\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        </Accordion>\n                    </Col>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / SaveBin / ClearBinButton\nexport default function ClearBinButton({ SET_SAVE_BIN }: {\n    SET_SAVE_BIN: (b: Course[]) => void\n}): JSX.Element {\n\n    function ClearBin() {\n        SET_SAVE_BIN([]);\n    }\n    \n    return(\n        <button onClick={() => ClearBin()}>Clear Bin</button>\n    );\n}\n","// Source Imports\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React from \"react\";\nimport { Col, Container, Offcanvas, Row } from \"react-bootstrap\";\nimport { Course } from \"../../interfaces/course\";\n\n// Function Imports\nimport updateColor from \"../../utilities/updateColor\";\nimport removeCourseFromBin from \"../../utilities/removeCourseFromBin\";\nimport findCourseInSemester from \"../../utilities/findCourseInSemester\";\nimport findCourseInEntirePlan from \"../../utilities/findCourseInEntirePlan\";\nimport preReqAlert from \"../../utilities/preReqAlert\";\nimport duplicateCourseAlert from \"../../utilities/duplicateCourse\";\n\n// Component Imports\nimport BinCourseCard from \"../Card_Components/BinCourseCard\";\nimport ClearBinButton from \"./ClearBinButton\";\n\n// Design Imports\nimport \"../../css/SaveBin.css\";\nimport maxNumberOfCoursesAlert from \"../../utilities/maxNumberOfCourses\";\n\n// Breadcrumbs:\n// Main Page / SaveBin - bin that pops up to save courses for later\nexport default function SaveBin({ setBinVisible, binVisible, SET_SAVE_BIN, SAVE_BIN, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, courseData }: {\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null,\n    courseData: Course[]\n}): JSX.Element {\n\n    // const list variable to map out SAVE_BIN useState variable\n    const binListToPrint = SAVE_BIN;\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        const foundCourse = findCourseInSemester(id, semesterSelect, SEMESTER_MAP, courseData);\n        const foundCourseInPlan = findCourseInEntirePlan(id, SEMESTER_MAP);\n        \n        // If there are less than 6 courses, add the selected course onto the end of the classList\n        if (foundCourse || foundCourseInPlan) {\n            foundCourse ? duplicateCourseAlert(id, \"semester\", courseData) : duplicateCourseAlert(id, \"plan\", courseData);\n        } else {\n            //  PREREQ MET IN PRIOR SEMESTER\n            if (Object.keys(courseData[id].preReq).length > 0){\n                if (Object.values(courseData[id].preReq).every(course => course === true)){\n                    courseData[id].preReqCheck = \"black\";\n                } else {\n                    preReqAlert();\n                    courseData[id].preReqCheck = \"red\";\n                }\n                updateColor(courseData[id]);\n            }\n\n            if (SEMESTER_MAP[\"\" + semesterSelect].length === 6) {\n                maxNumberOfCoursesAlert();\n            } else {\n                Object.values(courseData).forEach(value => {\n                    Object.keys(value.preReq).forEach(courseName => {\n                        if(courseName === courseData[id].name) {\n                            value.preReq[courseName] = true;\n                        }\n                    });\n                });\n                \n                NEW_SEMESTER_MAP[\"\" + semesterSelect].push(courseData[id]);\n                SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n                removeCourseFromBin(id, SET_SAVE_BIN, SAVE_BIN, courseData);\n            }\n\n            Object.keys(SEMESTER_MAP).forEach(key => {\n                SEMESTER_MAP[key].forEach(item => {\n                    if(Object.keys(item.preReq).length > 0) {\n                        if (Object.values(item.preReq).every(course => course === true)){\n                            item.preReqCheck = \"black\";\n                        } else {\n                            item.preReqCheck = \"red\";\n                        }\n                        updateColor(item);\n                    }\n                });\n            }); \n        }\n    }\n    \n    return(\n        <div>\n            <Offcanvas className=\"bin\" show={binVisible} onHide={() => setBinVisible(false)} placement=\"bottom\" scroll={true} backdrop={false}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Save For Later</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body className=\"bin-body\">\n                    <ClearBinButton\n                        SET_SAVE_BIN={SET_SAVE_BIN}\n                    ></ClearBinButton>\n                    <Container>\n                        <Row xs={1} md={3}>\n                            <AnimatePresence>\n                                {binListToPrint.map(binListToPrint =>\n                                    <motion.div\n                                        key={binListToPrint.id}\n                                        drag\n                                        dragConstraints={{\n                                            top: 0,\n                                            bottom: 0,\n                                            right: 0,\n                                            left: 0\n                                        }}\n                                        onDragEnd={() => addCourse(binListToPrint.id)}\n                                        dragElastic={1}\n                                        initial={{ opacity: 0, x: 180 }}\n                                        animate={{ opacity: 1, x: 0 }}\n                                        exit={{ opacity: 0, y: -200, x: 180 }}\n                                        transition={{\n                                            ease: \"easeInOut\",\n                                            duration: 0.4\n                                        }}>\n                                        <Col >\n                                            <BinCourseCard\n                                                course={binListToPrint}\n                                                SET_SAVE_BIN={SET_SAVE_BIN}\n                                                SAVE_BIN={SAVE_BIN}\n                                                courseData={courseData}\n                                            ></BinCourseCard>\n                                        </Col>\n                                    </motion.div>\n                                )}\n                            </AnimatePresence>\n                        </Row>\n                    </Container>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n","import React from \"react\";\nimport Swal from \"sweetalert2\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / SaveButton\nexport default function SaveButton({ SEMESTER_MAP, courseData }: {\n    SEMESTER_MAP: Record<string, Course[]>,\n    courseData: Course[]\n}): JSX.Element {\n    \n    function saveSemester() {\n        const preReqError = findPreReqErrorInEntirePlan();\n\n        if (preReqError){\n            Swal.fire(\n                \"Save Error\",\n                \"Error: Cannot save plan due to existing preReq error 🧐.\",\n                \"error\"\n            );\n        } else {\n            Swal.fire({\n                title: \"Give your saved plan a name!\",\n                text: \"Name:\",\n                input: \"text\",\n                showCancelButton: true        \n            }).then((result) => {\n                if (result.value) {\n                    const savedPlan = {\n                        \"semesterMap\": SEMESTER_MAP,\n                        \"courseData\": courseData\n                    };\n                    localStorage.setItem(result.value, JSON.stringify(savedPlan));\n                    // const retrievedObject = localStorage.getItem(result.value);\n                    // console.log(\"retrievedObject: \", JSON.parse(\"\"+retrievedObject));\n    \n                    Swal.fire(\n                        \"Saved!\",\n                        `${result.value} is now saved 🚀.`,\n                        \"success\"\n                    );\n    \n                } else {\n                    Swal.fire(\n                        \"Canceled Save\",\n                        \"You did not save your plan 😅.\",\n                        \"info\"\n                    );\n                }\n            });\n        }\n    }\n\n    function findPreReqErrorInEntirePlan() {\n        let flag = false;\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(course => {\n                if (course.preReqCheck === \"red\") {\n                    flag = true;\n                }\n            });\n        });\n        return flag;\n    }\n\n    return(\n        <button onClick={() => saveSemester()}>Save Semester</button>\n    );\n}\n","\nexport default function getSemesterName(count: number): string {\n    let newCount = count;\n    let season = \"\";\n    if (count % 2 !== 0) {\n        newCount = (count+1) / 2;\n        season = \"Fall\";\n    } else {\n        newCount = count/2;\n        season = \"Spring\";\n    }\n\n    return `${season} ${newCount}`;\n}\n","// Source Imports\nimport React from \"react\";\nimport Swal from \"sweetalert2\";\n\n// Breadcrumbs:\n// Main Page / AccessSavedSemesterButton / ClearSavedSemestersButton\nexport default function ClearSavedSemestersButton(): JSX.Element {\n    \n    function clearAllSavedSemesters() {\n        Swal.fire({\n            title: \"Are you sure you want to delete all of your saved semesters?\",\n            showDenyButton: true,\n            confirmButtonText: \"Delete All Saves\",\n            denyButtonText: \"Don't delete All Saves\",\n            icon: \"warning\"\n        }).then((result) => {\n            /* Read more about isConfirmed, isDenied below */\n            if (result.isConfirmed) {\n                localStorage.clear();\n                console.log(localStorage);\n                Swal.fire(\"All Saved Semesters Deleted 😁!\", \"\", \"success\");\n            } else if (result.isDenied) {\n                Swal.fire(\"Semesters are not Deleted 😮‍💨.\", \"\", \"info\");\n            }\n        });\n        \n    }\n\n    return(\n        <button onClick={() => clearAllSavedSemesters()}>Clear All Saved Semesters</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { ImCross } from \"react-icons/im\";\nimport Swal from \"sweetalert2\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Function Imports\nimport updateColor from \"../../utilities/updateColor\";\nimport removePreReq from \"../../utilities/removePreReq\";\nimport getSemesterName from \"../../utilities/getSemesterName\";\nimport preReqAlert from \"../../utilities/preReqAlert\";\nimport maxNumberOfCoursesAlert from \"../../utilities/maxNumberOfCourses\";\nimport { findAnyCourseInEntirePlan } from \"../../utilities/findCourseInEntirePlan\";\n\n// Component Imports\nimport ClearSavedSemestersButton from \"./ClearSavedSemestersButton\";\n\n// Breadcrumbs:\n// Main Page / AccessSavedSemesterButton\nexport default function AccessSavedSemesters({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, setSelectedSave, setCourseData, courseData }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    setSelectedSave: (s: string) => void,\n    setCourseData: (d: Course[]) => void, courseData: Course[]\n}): JSX.Element {\n\n    // Main Load Function\n    function loadSaveHandler(key: string) {\n\n        if (findAnyCourseInEntirePlan(SEMESTER_MAP) || courseData.length > 20){\n            Swal.fire({\n                title: \"Overwrite Warning!\",\n                text: \"Your current schedule and custom courses will be overwritten. Please go back and save your current plan if you wish to use it again.\",\n                showDenyButton: true,\n                confirmButtonText: \"Continue\",\n                denyButtonText: \"Go Back\",\n                icon: \"warning\"\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    loadSave(key);\n                } else if (result.isDenied) {\n                    Swal.fire(`\"${key}\" was not Loaded 😮‍💨.`, \"\", \"info\");\n                }\n            });\n        } else {\n            loadSave(key);\n        }\n    }\n\n    function loadSave(key: string) {\n        // Remove all courses and remove pre-req markers.\n        removeAllCourses();\n        \n        // Retrieve Object from localStorage\n        const retrievedObject = localStorage.getItem(key);\n        const parsedObject = JSON.parse(\"\"+retrievedObject);\n\n        const parsedSemesterMap = parsedObject[\"semesterMap\"] as Record<string, Course[]>;\n        const courseData = parsedObject[\"courseData\"] as Course[];\n        setCourseData(courseData);\n\n        // add necessary amount of semesters and courses respectively\n        getNumberOfSemesters(parsedSemesterMap, courseData);\n\n        setSelectedSave(key);\n    }\n\n    function addLoadedSave(parsedObject: Record<string, Course[]>, courseData: Course[]) {\n        Object.keys(parsedObject).forEach(key => {\n            Object.values(parsedObject[key]).forEach(course => {\n                addCourse(course.id, key, courseData);\n            });\n        }); \n    }\n\n    function getNumberOfSemesters(parsedObject: Record<string, Course[]>, courseData: Course[]) {\n        const count = Object.keys(parsedObject).length;\n        const numberOfVisibleSemesters = semesterCount - 1;\n        const semesterCountBuffer: number[] = [];\n        \n        if (numberOfVisibleSemesters < count) {\n            for (let i = numberOfVisibleSemesters; i < count; i++){\n                semesterCountBuffer.push(i+1);\n                // console.log(`NUMBER: ${semesterCountBuffer}`);\n            }\n            addSemester(semesterCountBuffer, parsedObject, courseData);\n            setSemesterCount(count+1);\n\n        } else {\n            addLoadedSave(parsedObject, courseData);\n        }\n        \n        return semesterCountBuffer;\n    }\n\n    function addSemester(semesterCountBuffer: number[], parsedObject: Record<string, Course[]>, courseData: Course[]) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        semesterCountBuffer.forEach(key => {\n            // Create each new Semester\n            buttonList.push({name: getSemesterName(key), value: key});\n            NEW_SEMESTER_MAP[\"\"+key] = [];\n            Object.keys(NEW_SEMESTER_MAP).forEach(mapKey => {\n                Object.keys(parsedObject).forEach(objKey => {\n                    if (\"\"+mapKey === objKey) {\n                        // While in the same semester for both the current and saved semester\n                        Object.values(parsedObject[objKey]).forEach(course => {\n                            if (!NEW_SEMESTER_MAP[mapKey].includes(course)){\n                                /* If the course in the saved semester is not present in \n                                the current semester then AddCourse */\n                                addCourses(course, mapKey, NEW_SEMESTER_MAP, courseData);\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        setButtonList(buttonList);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        \n        return NEW_SEMESTER_MAP;\n    }\n\n    function addCourse(id: number, key: string, courseData: Course[]) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        //  PREREQ MET IN PRIOR SEMESTER\n        if (Object.keys(courseData[id].preReq).length > 0){\n            // console.log(courseData[id].preReq);\n            if (Object.values(courseData[id].preReq).every(course => course === true)){\n                courseData[id].preReqCheck = \"black\";\n            } else {\n                preReqAlert();\n                courseData[id].preReqCheck = \"red\";\n            }\n            updateColor(courseData[id]);\n        }\n\n        if (SEMESTER_MAP[key].length === 6) {\n            maxNumberOfCoursesAlert();\n        } else {\n            Object.values(courseData).forEach(value => {\n                Object.keys(value.preReq).forEach(courseName => {\n                    if(courseName === courseData[id].name) {\n                        value.preReq[courseName] = true;\n                    }\n                });\n            });\n\n            NEW_SEMESTER_MAP[key].push(courseData[id]);\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        }\n\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }); \n    }\n\n    function addCourses(course: Course, mapKey: string, NEW_SEMESTER_MAP: Record<string, Course[]>, courseData: Course[]) {\n        //  PREREQ MET IN PRIOR SEMESTER\n        if (Object.keys(courseData[course.id].preReq).length > 0){\n            // console.log(courseData[course.id].preReq);\n            if (Object.values(courseData[course.id].preReq).every(course => course === true)){\n                courseData[course.id].preReqCheck = \"black\";\n            } else {\n                // alert(\"Warning: Pre-Reqs not met.\");\n                courseData[course.id].preReqCheck = \"red\";\n            }\n            updateColor(courseData[course.id]);\n        }\n        NEW_SEMESTER_MAP[mapKey].push(course);\n\n        Object.keys(NEW_SEMESTER_MAP).forEach(key => {\n            NEW_SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }); \n    }\n\n    function deleteSavedSemester(key: string) {\n        Swal.fire({\n            title: `Are you sure you want to delete \"${key}\"?`,\n            showDenyButton: true,\n            confirmButtonText: `Delete \"${key}\"`,\n            denyButtonText: \"Don't delete\",\n            icon: \"warning\"\n        }).then((result) => {\n            /* Read more about isConfirmed, isDenied below */\n            if (result.isConfirmed) {\n                localStorage.removeItem(key);\n                Swal.fire(`\"${key}\" Deleted 😁!`, \"\", \"success\");\n            } else if (result.isDenied) {\n                Swal.fire(`\"${key}\" was not Deleted 😮‍💨.`, \"\", \"info\");\n            }\n        });\n    }\n\n    function removeAllCourses() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP}; \n        for (const [key] of Object.entries(NEW_SEMESTER_MAP)) {\n            Object.values(NEW_SEMESTER_MAP[key]).forEach(course => {\n                removePreReq(course, SEMESTER_MAP, courseData);\n                NEW_SEMESTER_MAP[key].pop();\n            });\n            NEW_SEMESTER_MAP[key]=[];\n        }\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    return(\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Saved Semesters\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n                {Object.keys(localStorage).map(key =>\n                    <div \n                        style={{display: \"inline-flex\"}} \n                        key={key}>\n                        <Dropdown.Item \n                            onClick={() => loadSaveHandler(key)}\n                        >{key}\n                            \n                        </Dropdown.Item>\n                        <button onClick={() => deleteSavedSemester(key)}>\n                            <ImCross></ImCross>\n                        </button>\n                    </div>\n                )}\n                <ClearSavedSemestersButton></ClearSavedSemestersButton>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\n\n// Function Imports\nimport getSemesterName from \"../../utilities/getSemesterName\";\n\n// Design Imports\nimport \"../../css/AddRemoveSemester.css\";\n\n// Breadcrumbs:\n// Main Page / AddSemesterButton - appends new semester\nexport default function AddSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, SET_SELECT_MAP, SELECT_MAP }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    SET_SELECT_MAP: (s: Record<string, boolean>) => void, SELECT_MAP: Record<string, boolean>\n}): JSX.Element {\n    \n    function addSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        const SELECT_MAP_BUFFER = {...SELECT_MAP};\n\n        buttonList.push({name: getSemesterName(semesterCount), value: semesterCount});\n        setButtonList(buttonList);\n\n        SELECT_MAP_BUFFER[\"\"+semesterCount] = false;\n        SET_SELECT_MAP(SELECT_MAP_BUFFER);\n\n        NEW_SEMESTER_MAP[\"\"+semesterCount] = [];\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        count++;\n        setSemesterCount(count);\n    }\n\n    return(\n        <button className=\"add_button\" data-testid=\"btn-add-semester\" onClick={() => addSemester()}>Add Semester</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\nimport Swal from \"sweetalert2\";\n\n// Function Imports\nimport removePreReq from \"../../utilities/removePreReq\";\n\n// Design Imports\nimport \"../../css/AddRemoveSemester.css\";\nimport courseData from \"../../assets/courses\";\n\n// Breadcrumbs:\n// Main Page / RemoveSemesterButton - clears courses and removes semester\nexport default function RemoveSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, setSemesterSelect, setSemesterHeader }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (h: string) => void\n}): JSX.Element {\n    \n    function removeSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        if (count === 2) {\n            Swal.fire(\n                \"Invalid Operation!\",\n                \"Cannot remove any more semesters 😅.\",\n                \"warning\"\n            );\n        } else {\n\n            // Default to render first semester since it will never be deleted.\n            setSemesterSelect(\"1\");\n            setSemesterHeader(buttonList[0].name);\n\n            // Clear last semester's courses before deletion\n            removeAllCourses();\n\n            // Remove last semester\n            buttonList.pop();\n            setButtonList(buttonList);\n\n            delete NEW_SEMESTER_MAP[semesterCount-1];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n\n            count--;\n            setSemesterCount(count);\n        }\n    }\n\n    function removeAllCourses() {\n        Object.values(SEMESTER_MAP[semesterCount-1]).forEach(course => {\n            removePreReq(course, SEMESTER_MAP, courseData);\n        });\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [semesterCount-1]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    return(\n        <button className=\"remove_button\" data-testid=\"btn-remove-semester\" onClick={() => removeSemester()}>Remove Semester</button>\n    );\n}\n","import React from \"react\";\n\nimport \"../../css/SelectedSave.css\";\n\n// Breadcrumbs:\n// Main Page / SelectedSaveHeader\nexport default function SelectedSaveHeader({ selectedSave }: {\n    selectedSave: string\n}): JSX.Element {\n    return(\n        <h3 className=\"save-header\">{selectedSave}</h3>\n    );\n}\n","// Source Imports\nimport React, { useState } from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport SEMESTER_MAP_INIT from \"../assets/stateInitializers/semesterMap\";\nimport buttonListInit from \"../assets/stateInitializers/buttonList\";\nimport SELECT_MAP_INIT from \"../assets/stateInitializers/radioToggle\";\nimport courseDataInit from \"../assets/courses\";\n\n// Component Imports\nimport { Board } from \"./Views/Board\";\nimport DisplayCourses from \"./Right_Menu/DisplayCourses\";\nimport SideMenu from \"./Left_Menu/SideMenu\";\nimport DegreePlan from \"./Views/DegreePlan\";\nimport SaveBin from \"./Save_Later_Bin/SaveBin\";\nimport SaveButton from \"./Save_Load_Semesters/SaveButton\";\nimport AccessSavedSemestersButton from \"./Save_Load_Semesters/AccessSavedSemestersButton\";\nimport AddSemesterButton from \"./Add_Remove_Semesters/AddSemesterButton\";\nimport RemoveSemesterButton from \"./Add_Remove_Semesters/RemoveSemesterButton\";\nimport SelectedSaveHeader from \"./Save_Load_Semesters/SelectedSaveHeader\";\n\n// Design Imports\nimport \"../css/App.css\";\n\n// Breadcrumbs:\n// Main Page\nfunction MainPage({ visibleView, setVisibleView }: {\n    setVisibleView: (s: string | null) => void, visibleView: string | null,\n}): JSX.Element {\n    const [semesterSelect, setSemesterSelect] = useState<string | null>(\"1\");\n    const [semesterHeader, setSemesterHeader] = useState<string>(\"Fall 1\");\n\n    // Selected Save Variable\n    const [selectedSave, setSelectedSave] = useState<string>(\"No Save Selected\");\n    \n    // Bin Variables\n    const [binVisible, setBinVisible] = useState<boolean>(false);\n    const SAVE_BIN_INIT: Course[] = [];\n    const [SAVE_BIN, SET_SAVE_BIN] = useState<Course[]>(SAVE_BIN_INIT);\n\n    // Is one value above the current semesters\n    const [semesterCount, setSemesterCount] = useState<number>(9);\n    \n    const [buttonList, setButtonList] = useState<ButtonList[]>(buttonListInit);\n    const [SELECT_MAP, SET_SELECT_MAP] = useState<Record<string, boolean>>(SELECT_MAP_INIT);\n   \n    // SEMESTER_MAP: useState to modify each semester and its courses\n    const [SEMESTER_MAP, SET_SEMESTER_MAP] = useState<Record<string, Course[]>>(SEMESTER_MAP_INIT);\n    const [courseData, setCourseData] = useState<Course[]>(courseDataInit);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                UD CIS Scheduler\n                <p>Srinath Venkatesh, Elliot Tingey, Geoffrey Linderman</p>\n\n                <SaveButton\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    courseData={courseData}\n                ></SaveButton>\n                { localStorage.length > 0 && \n                <div>\n                    <AccessSavedSemestersButton\n                        SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                        SEMESTER_MAP={SEMESTER_MAP}\n                        setSemesterCount={setSemesterCount}\n                        semesterCount={semesterCount}\n                        setButtonList={setButtonList}\n                        buttonList={buttonList}\n                        setSelectedSave={setSelectedSave}\n                        setCourseData={setCourseData}\n                        courseData={courseData}\n                    ></AccessSavedSemestersButton> \n                    <SelectedSaveHeader\n                        selectedSave={selectedSave}\n                    ></SelectedSaveHeader>\n                </div>\n                }\n                \n            </header>\n            <section className=\"cell-left\">\n                <p>Menu</p>\n                <SideMenu\n                    setVisibleView={setVisibleView}\n                ></SideMenu>\n            </section>\n            <section className=\"cell-main\">\n\n                <RemoveSemesterButton\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                ></RemoveSemesterButton>\n                \n                <AddSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                    SET_SELECT_MAP={SET_SELECT_MAP}\n                    SELECT_MAP={SELECT_MAP}\n                ></AddSemesterButton>\n\n                \n                { visibleView === \"2\" && <Board\n                    semesterHeader={semesterHeader}\n                    setSemesterHeader={setSemesterHeader}\n                    setSemesterSelect={setSemesterSelect}\n                    semesterSelect={semesterSelect}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                    binVisible={binVisible}\n                    buttonList={buttonList}\n                    setCourseData={setCourseData}\n                    courseData={courseData}\n                ></Board> }\n                \n                { visibleView === \"3\" && <DegreePlan\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    buttonList={buttonList}\n                    SET_SELECT_MAP={SET_SELECT_MAP}\n                    SELECT_MAP={SELECT_MAP}\n                    setCourseData={setCourseData}\n                    courseData={courseData}\n                ></DegreePlan> }\n                \n            </section>\n            <section className=\"cell-right\">\n                { (visibleView === \"2\" || visibleView === \"3\") &&  <DisplayCourses\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    semesterSelect={semesterSelect}\n                    setBinVisible={setBinVisible}\n                    binVisible={binVisible}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                    setCourseData={setCourseData}\n                    courseData={courseData}\n                ></DisplayCourses> }            \n            </section>\n\n            <SaveBin\n                setBinVisible={setBinVisible}\n                binVisible={binVisible}\n                SET_SAVE_BIN={SET_SAVE_BIN}\n                SAVE_BIN={SAVE_BIN}\n                SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                SEMESTER_MAP={SEMESTER_MAP}\n                semesterSelect={semesterSelect}\n                courseData={courseData}\n            ></SaveBin>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from \"react\";\n\nimport \"../css/LandingPage.css\";\n\nexport default function LandingPage({ setVisibleView }: {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    function changeView() {\n        setVisibleView(\"2\");\n        //setTimeout(() => setVisibleView(\"2\"), 2000);\n    }\n\n    return(\n        <div className=\"home\">\n            <div className=\"centered\">\n                <h1>UD CIS Scheduler</h1>\n                <h2>Start Building Your Plan</h2>\n                <button data-testid=\"enter-main\" onClick={() => changeView()}>Enter</button>\n            </div>\n        </div>\n    );\n\n}","import React, { useState } from \"react\";\nimport \"./css/App.css\";\n\nimport MainPage from \"./components/MainPage\";\nimport LandingPage from \"./components/LandingPage\";\n\nfunction App(): JSX.Element {\n    const [visibleView, setVisibleView] = useState<string | null>(\"0\"); // Changes the different board views\n\n    return (\n        <div>\n\n            { visibleView === \"0\" ? \n                <LandingPage\n                    setVisibleView={setVisibleView}\n                ></LandingPage> :\n\n                <MainPage\n                    setVisibleView={setVisibleView}\n                    visibleView={visibleView}\n                ></MainPage> }\n        \n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}