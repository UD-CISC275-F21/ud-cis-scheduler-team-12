{"version":3,"sources":["assets/courses.ts","components/TextInput.tsx","components/TitleInput.tsx","components/CourseComp.tsx","components/ClearSemesterButton.tsx","components/Board.tsx","components/SearchBar.tsx","components/DisplayCourses.tsx","components/SideMenu.tsx","components/SemesterComp.tsx","assets/radioToggle.ts","components/DegreePlan.tsx","components/BinCourseCard.tsx","components/ClearBinButton.tsx","components/SaveBin.tsx","components/AddSemesterButton.tsx","components/RemoveSemesterButton.tsx","assets/buttonList.ts","components/CreateNewCourse.tsx","components/MainPage.tsx","components/LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["courseData","TextInput","setInput","className","type","placeholder","onChange","event","target","value","TitleInput","CourseComp","course","SET_SEMESTER_MAP","SEMESTER_MAP","semesterSelect","useState","input","visible","setVisible","description","setDescription","name","title","setTitle","titleVisible","setTitleVisible","updateColor","preReqCheck","OverlayTrigger","trigger","show","Object","values","preReq","every","placement","indexOf","overlay","Popover","id","keys","filter","courseName","map","Card","style","width","color","Container","Row","Col","Title","onClick","NEW_SEMESTER_MAP","key","console","log","forEach","entries","item","length","removeCourse","Body","Text","credits","timeStart","timeEnd","schedule","Accordion","Item","eventKey","Header","ClearSemesterButton","removePreReq","Board","setSemesterSelect","setSemesterHeader","semesterHeader","SET_SAVE_BIN","SAVE_BIN","binVisible","buttonList","classListToPrint","buttonToggle","checkPreReqWarning","flag","ToggleButtonGroup","val","radio","idx","ToggleButton","variant","xs","md","AnimatePresence","motion","div","drag","dragConstraints","top","bottom","right","left","onDragEnd","includes","alert","dragElastic","initial","opacity","x","animate","exit","y","transition","ease","duration","SearchBar","setQuery","DisplayCourses","setBinVisible","setNewCourseVisible","newCourseVisible","query","addCourse","foundCourse","findCourse","push","DropdownButton","Dropdown","as","post","toLowerCase","flush","SideMenu","setVisibleView","Nav","justify","defaultActiveKey","onSelect","Link","SemesterComp","courseList","SET_SELECT_MAP","SELECT_MAP","semesterIndex","selectToggle","NEW_SELECT_MAP","Table","scope","SELECT_MAP_INIT","DegreePlan","SEMESTER_MAP_TO_PRINT","CourseCard","ClearBinButton","SaveBin","binListToPrint","Offcanvas","onHide","scroll","backdrop","closeButton","AddSemesterButton","setSemesterCount","semesterCount","setButtonList","getSemesterName","count","newCount","season","addSemester","RemoveSemesterButton","removeSemester","removeAllCourses","pop","buttonListInit","CreateNewCourse","MainPage","visibleView","LandingPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6aA8NeA,G,MA9NI,CACf,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,4CACf,QAAW,EACX,OAAmC,GACnC,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,4CACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,4CACf,QAAW,EACX,OAAmC,CAAC,YAAY,EAAO,YAAY,GACnE,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,uCACf,QAAW,EACX,OAAmC,GACnC,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,uCACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAmC,GACnC,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAmC,GACnC,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAmC,CAAC,YAAY,EAAO,YAAY,GACnE,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,IACb,QAAW,IACX,SAAY,MACZ,YAAe,gDACf,QAAW,EACX,OAAmC,CAAC,YAAY,EAAO,YAAY,GACnE,YAAe,SAEnB,CACI,GAAM,EACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAmC,CAAC,YAAY,EAAO,YAAY,GACnE,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,uCACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,uCACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,gDACf,QAAW,EACX,OAAmC,CAAC,YAAY,EAAO,YAAY,GACnE,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,IACb,QAAW,KACX,SAAY,MACZ,YAAe,4CACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,mCACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAmC,CAAC,YAAY,GAChD,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,IACb,QAAW,KACX,SAAY,KACZ,YAAe,mCACf,QAAW,EACX,OAAmC,GACnC,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,KACZ,YAAe,mCACf,QAAW,EACX,OAAmC,GACnC,YAAe,SAEnB,CACI,GAAM,GACN,KAAQ,WACR,UAAa,KACb,QAAW,KACX,SAAY,MACZ,YAAe,mCACf,QAAW,EACX,OAAmC,CAAC,YAAY,EAAO,YAAY,GACnE,YAAe,W,+BCvNR,SAASC,EAAT,GAEE,IAFmBC,EAEpB,EAFoBA,SAGhC,OACI,8BACI,uBAAOC,UAAU,aAAaC,KAAK,cAAcC,YAAY,oBAAoBC,SAAU,SAAAC,GAAK,OAAIL,EAASK,EAAMC,OAAOC,YCLvH,SAASC,EAAT,GAEE,IAFoBR,EAErB,EAFqBA,SAGjC,OACI,8BACI,uBAAOC,UAAU,aAAa,cAAY,cAAcC,KAAK,QAAQC,YAAY,cAAcC,SAAU,SAAAC,GAAK,OAAIL,EAASK,EAAMC,OAAOC,YCErI,SAASE,EAAT,GAIG,IAJmBC,EAIpB,EAJoBA,OAAQC,EAI5B,EAJ4BA,iBAAkBC,EAI9C,EAJ8CA,aAAcC,EAI5D,EAJ4DA,eAMzE,EAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcf,EAAd,KACA,EAA8Bc,mBAAiB,GAA/C,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAsCH,mBAAiBJ,EAAOQ,aAA9D,mBAAOA,EAAP,KAAoBC,EAApB,KACA,EAA0BL,mBAAiBJ,EAAOU,MAAlD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCR,mBAAiB,GAAzD,mBAAOS,EAAP,KAAqBC,EAArB,KAqDA,SAASC,EAAYf,GACjB,OAAOA,EAAOgB,YAGlB,OACI,8BACI,cAACC,EAAA,EAAD,CAAgBC,QAAS,CAAC,QAAS,SAAUC,MAAOC,OAAOC,OAAOrB,EAAOsB,QAAQC,OAAM,SAAAvB,GAAM,OAAe,IAAXA,KAAkCwB,UAAYtB,EAAa,GAAGC,GAAgBsB,QAAQzB,GAAU,EAAI,SAAW,MAAQ0B,QACpN,eAACC,EAAA,EAAD,CAASpC,UAAU,UAAUqC,GAAG,iBAAhC,sBAA2DR,OAAOS,KAAK7B,EAAOsB,QAAQQ,QAAO,SAAAC,GAAU,OACrE,IAA9B/B,EAAOsB,OAAOS,MAAuBC,KAAI,SAAAhC,GAAM,OAC/C,8BAAmBA,GAATA,MAFd,OADJ,SAII,eAACiC,EAAA,EAAD,CAAM1C,UAAU,OAAO,cAAY,cAAc2C,MAAO,CAAEC,MAAO,OAAQC,MAAOrB,EAAYf,IAA5F,UACI,cAACqC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACN,EAAA,EAAKO,MAAN,UAAa7B,IACM,IAAjBE,GAAsB,cAACf,EAAD,CACpBR,SAAUA,IAEI,IAAjBuB,GAAsB,wBAAQ4B,QAAS,kBA/DhE7B,EAASP,QACTS,EAAgB,IA8D+B,oBAGvB,wBAAQvB,UAAU,gBAAgBkD,QAAS,kBAnDvE,SAAsBb,GAGlB,IAFA,IAAMc,EAAgB,eAAOxC,GADC,aAGzB,0BAAOyC,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBuB,OAAOS,KAAKhC,EAAMyB,QAAQwB,SAAQ,SAAAf,GAE3BA,IAAe3C,EAAWwC,GAAIlB,OAC7BkC,QAAQC,IAAId,GACZlC,EAAMyB,OAAOS,IAAc,OANvC,MAA2BX,OAAO2B,QAAQ3D,GAA1C,eAAwD,IAUxD,cAA2BgC,OAAO2B,QAAQ7C,GAA1C,eAAyD,CAApD,0BAAOyC,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBK,EAAayC,GAAKG,SAAQ,SAAAE,GACnB5B,OAAOS,KAAKmB,EAAK1B,QAAQ2B,OAAS,IAC7B7B,OAAOC,OAAO2B,EAAK1B,QAAQC,OAAM,SAAAvB,GAAM,OAAe,IAAXA,KAC3CgD,EAAKhC,YAAc,QAEnBgC,EAAKhC,YAAc,MAEvBD,EAAYiC,OAIxBN,EAAiB,GAAGvC,GAAkBuC,EAAiB,GAAGvC,GAAgB2B,QAAO,SAAAkB,GAAI,OAAIA,IAAS5D,EAAWwC,MAC7G3B,EAAiByC,GAwBwDQ,CAAalD,EAAO4B,KAArE,SACI,cAAC,IAAD,MACJ,wBAAQrC,UAAU,cAAc,cAAY,iBAAiBkD,QAAS,WAxE9F3B,EAAgB,IAwEQ,SAAyF,cAAC,IAAD,aAIrG,eAACmB,EAAA,EAAKkB,KAAN,CAAW5D,UAAU,YAArB,UACI,eAAC0C,EAAA,EAAKmB,KAAN,uBACcpD,EAAOqD,WAErB,eAACpB,EAAA,EAAKmB,KAAN,oBACWpD,EAAOsD,UADlB,QACkCtD,EAAOuD,WAIzC,eAACtB,EAAA,EAAKmB,KAAN,oBACWpD,EAAOwD,YAElB,cAACjB,EAAA,EAAD,CAAKhD,UAAU,oBAGf,cAACgD,EAAA,EAAD,CAAKhD,UAAU,iBAAf,SACI,cAACkE,EAAA,EAAD,UACI,eAACA,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACF,EAAA,EAAUG,OAAX,sBACA,eAACH,EAAA,EAAUN,KAAX,WACK3C,EACa,IAAZF,GAAiB,cAAC,EAAD,CACfhB,SAAUA,IAGA,IAAZgB,GAAiB,wBAAQf,UAAU,mBAAmBkD,QAAS,WA3FjGlC,EAAW,IA2FwC,SAAuE,cAAC,IAAD,MAC5E,IAAZD,GAAiB,wBAAQf,UAAU,GAAGkD,QAAS,kBAvFjFhC,EAAeJ,QACfE,EAAW,IAsFwC,uC,WC3H5C,SAASsD,EAAT,GAGE,IAH6B5D,EAG9B,EAH8BA,iBAAkBC,EAGhD,EAHgDA,aAAcC,EAG9D,EAH8DA,eAa1E,SAAS2D,EAAa9D,GAClB,IADmC,IAAD,aAC7B,0BAAO2C,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBuB,OAAOS,KAAKhC,EAAMyB,QAAQwB,SAAQ,SAAAf,GAE3BA,IAAe/B,EAAOU,OACrBkC,QAAQC,IAAId,GACZlC,EAAMyB,OAAOS,IAAc,OANvC,MAA2BX,OAAO2B,QAAQ3D,GAA1C,eAAwD,IAUxD,cAA2BgC,OAAO2B,QAAQ7C,GAA1C,eAAyD,CAApD,0BAAOyC,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBK,EAAayC,GAAKG,SAAQ,SAAAE,GACnB5B,OAAOS,KAAKmB,EAAK1B,QAAQ2B,OAAS,IAC7B7B,OAAOC,OAAO2B,EAAK1B,QAAQC,OAAM,SAAAvB,GAAM,OAAe,IAAXA,KAC3CgD,EAAKhC,YAAc,QAEnBgC,EAAKhC,YAAc,MAEvBD,EAAYiC,QAM5B,SAASjC,EAAYf,GACjB,OAAOA,EAAOgB,YAGlB,OACI,wBAAQyB,QAvCZ,WACI,cAA2BrB,OAAO2B,QAAQ7C,EAAa,GAAGC,IAA1D,eAA4E,CAAvE,0BAAOwC,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAIF,GACZmB,EAAajE,GAEjBI,EAAiB,2BAAIC,GAAL,kBAAoB,GAAGC,EAAiB,OAkCrB,cAAY,qBAA/C,+B,6BCpCD,SAAS4D,EAAT,GAOW,IAPMC,EAOP,EAPOA,kBAAmB7D,EAO1B,EAP0BA,eAAgBF,EAO1C,EAP0CA,iBAAkBC,EAO5D,EAP4DA,aAAc+D,EAO1E,EAP0EA,kBAAmBC,EAO7F,EAP6FA,eAAgBC,EAO7G,EAP6GA,aAAcC,EAO3H,EAP2HA,SAAUC,EAOrI,EAPqIA,WAAYC,EAOjJ,EAPiJA,WAUxJC,EAAmBrE,EAAa,GAAGC,GAEnCqE,EAAe,GAAGrE,EA4CxB,SAASsE,EAAmB9B,GACxB,IAAI+B,GAAO,EAMX,OALAxE,EAAayC,GAAKG,SAAQ,SAAA9C,GACI,QAAvBA,EAAOgB,cACN0D,GAAO,MAGRA,EAOX,OACI,sBAAK,cAAY,gBAAjB,UACI,gCACI,kDAAqBR,KACrB,cAACS,EAAA,EAAD,CAAmBpF,UAAU,kBAAkBmB,KAAK,UAAUb,OAAQ2E,EAAc9E,SAvBhG,SAAuBkF,GACnBZ,EAAkB,GAAGY,GACrBX,EAAkBK,EAAWM,EAAI,GAAGlE,OAqB5B,SACK4D,EAAWtC,KAAI,SAAC6C,EAAOC,GAAR,OACZ,cAACC,EAAA,EAAD,CACI,cAAY,eAEZnD,GAAE,gBAAWkD,GACbtF,KAAK,QACLwF,QAAUP,EAAmB,GAAGI,EAAMhF,OAAS,kBAAoBK,EAAa,GAAG2E,EAAMhF,OAAOoD,OAAS,EAAI,kBAAqB,iBAClIvC,KAAK,QACLb,MAAOgF,EAAMhF,MAPjB,SASKgF,EAAMnE,MAPFoE,WAarB,gCACI,cAACzC,EAAA,EAAD,CAAW,cAAY,QAAvB,SACI,cAACC,EAAA,EAAD,CAAK,cAAY,cAAc2C,GAAI,EAAGC,GAAI,EAA1C,SACI,cAACC,EAAA,EAAD,UACKZ,EAAiBvC,KAAI,SAAAuC,GAAgB,OAClC,cAACa,EAAA,EAAOC,IAAR,CAEIC,MAAI,EACJC,gBAAiB,CACbC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAEVC,UAAW,kBA3F3C,SAAsBhE,GAClB,IAAMc,EAAgB,eAAOxC,GAEzBmE,IACID,EAASyB,SAASzG,EAAWwC,IAC7BkE,MAAM,GAAD,OAAI1G,EAAWwC,GAAIlB,KAAnB,6EAELyD,EAAa,GAAD,mBAAKC,GAAL,CAAehF,EAAWwC,OAG9C,IAV8B,iBAUzB,0BAAOe,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBuB,OAAOS,KAAKhC,EAAMyB,QAAQwB,SAAQ,SAAAf,GAE3BA,IAAe3C,EAAWwC,GAAIlB,OAC7BkC,QAAQC,IAAId,GACZlC,EAAMyB,OAAOS,IAAc,OANvC,MAA2BX,OAAO2B,QAAQ3D,GAA1C,eAAwD,IAUxD,cAA2BgC,OAAO2B,QAAQ7C,GAA1C,eAAyD,CAApD,0BAAOyC,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBK,EAAayC,GAAKG,SAAQ,SAAAE,GACnB5B,OAAOS,KAAKmB,EAAK1B,QAAQ2B,OAAS,IAC7B7B,OAAOC,OAAO2B,EAAK1B,QAAQC,OAAM,SAAAvB,GAAM,OAAe,IAAXA,KAC3CgD,EAAKhC,YAAc,QAEnBgC,EAAKhC,YAAc,MAEXgC,EAwBVhC,gBApBd0B,EAAiB,GAAGvC,GAAkBuC,EAAiB,GAAGvC,GAAgB2B,QAAO,SAAAkB,GAAI,OAAIA,IAAS5D,EAAWwC,MAC7G3B,EAAiByC,GAyD4BQ,CAAaqB,EAAiB3C,KAC/CmE,YAAa,EACbC,QAAS,CAAEC,QAAS,EAAGC,EAAG,KAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BE,KAAM,CAAEH,QAAS,EAAGI,GAAI,IAAKH,EAAG,KAChCI,WAAY,CACRC,KAAM,YACNC,SAAU,IAhBlB,SAkBI,cAACjE,EAAA,EAAD,UACI,cAACxC,EAAD,CACIC,OAAQuE,EACRtE,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,OAtBnBoE,EAAiB3C,aA8BxC1B,EAAa,GAAGC,GAAgB8C,OAAS,GAAK,cAACY,EAAD,CAC5C5D,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,U,cC1IrB,SAASsG,EAAT,GAEE,IAFmBC,EAEpB,EAFoBA,SAGhC,OACI,8BACI,uBAAOnH,UAAU,cAAc,cAAY,aAAaE,YAAY,eAAeC,SAAU,SAAAC,GAAK,OAAI+G,EAAS/G,EAAMC,OAAOC,Y,sBCCzH,SAAS8G,EAAT,GAME,IANwB1G,EAMzB,EANyBA,iBAAkBC,EAM3C,EAN2CA,aAAcC,EAMzD,EANyDA,eAAgByG,EAMzE,EANyEA,cAAevC,EAMxF,EANwFA,WAAYwC,EAMpG,EANoGA,oBAAqBC,EAMzH,EANyHA,iBAAkB3C,EAM3I,EAN2IA,aAAcC,EAMzJ,EANyJA,SAQrK,EAA0BhE,mBAAiB,IAA3C,mBAAO2G,EAAP,KAAcL,EAAd,KAIA,SAASM,EAAUpF,GACf,IAAMc,EAAgB,eAAOxC,GACvB+G,EAqEV,SAAoBrF,GAChB,OAAO1B,EAAa,GAAGC,GAAgB0F,SAASzG,EAAWwC,IAtEvCsF,CAAWtF,GAG/B,GAAIyC,EACID,EAASyB,SAASzG,EAAWwC,IAC7BkE,MAAM,GAAD,OAAI1G,EAAWwC,GAAIlB,KAAnB,iEAELyD,EAAa,GAAD,mBAAKC,GAAL,CAAehF,EAAWwC,WAG1C,GAAIqF,EACAnB,MAAM,GAAD,OAAI1G,EAAWwC,GAAIlB,KAAnB,0EACF,CAaH,GAXIU,OAAOS,KAAKzC,EAAWwC,GAAIN,QAAQ2B,OAAS,IAC5CL,QAAQC,IAAIzD,EAAWwC,GAAIN,QACvBF,OAAOC,OAAOjC,EAAWwC,GAAIN,QAAQC,OAAM,SAAAvB,GAAM,OAAe,IAAXA,KACrDZ,EAAWwC,GAAIZ,YAAc,SAE7B8E,MAAM,8BACN1G,EAAWwC,GAAIZ,YAAc,OAEjCD,EAAY3B,EAAWwC,KAGsB,IAA7C1B,EAAa,GAAKC,GAAgB8C,OAClC6C,MAAM,oDACH,CACH,IADI,IAAD,aACE,0BAAOnD,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBuB,OAAOS,KAAKhC,EAAMyB,QAAQwB,SAAQ,SAAAf,GAE3BA,IAAe3C,EAAWwC,GAAIlB,OAC7BkC,QAAQC,IAAId,GACZlC,EAAMyB,OAAOS,IAAc,OANvC,MAA2BX,OAAO2B,QAAQ3D,GAA1C,eAAwD,IAUxDsD,EAAiB,GAAKvC,GAAgBgH,KAAK/H,EAAWwC,IACtD3B,EAAiByC,GAGrB,cAA2BtB,OAAO2B,QAAQ7C,GAA1C,eAAyD,CAApD,0BAAOyC,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBK,EAAayC,GAAKG,SAAQ,SAAAE,GACnB5B,OAAOS,KAAKmB,EAAK1B,QAAQ2B,OAAS,IAC7B7B,OAAOC,OAAO2B,EAAK1B,QAAQC,OAAM,SAAAvB,GAAM,OAAe,IAAXA,KAC3CgD,EAAKhC,YAAc,QAEnBgC,EAAKhC,YAAc,MAEvBD,EAAYiC,SAcpC,SAASjC,EAAYf,GACjB,OAAOA,EAAOgB,YAgBlB,OACI,gCACI,qBAAKzB,UAAU,cAAf,SACI,eAAC6H,EAAA,EAAD,CAAgBxF,GAAG,wBAAwBjB,MAAM,kBAAjD,UACI,cAAC0G,EAAA,EAAS3D,KAAV,CAAe4D,GAAG,SAAlB,2BACA,cAACD,EAAA,EAAS3D,KAAV,CAAe4D,GAAG,SAAS7E,QAAS,WAZhDmE,GAAevC,IAYH,oCACA,cAACgD,EAAA,EAAS3D,KAAV,CAAe4D,GAAG,SAAS7E,QAAS,WAThDoE,GAAqBC,IAST,sCAGR,cAAC,EAAD,CACIJ,SAAUA,IAEd,oBAAInH,UAAU,aAAd,SACKH,EAAW0C,QAAO,SAAAyF,GACf,MAAc,KAAVR,GAEOQ,EAAK7G,KAAK8G,cAAc3B,SAASkB,EAAMS,eADvCD,OACJ,KAGRvF,KAAI,SAAA5C,GAAU,OACb,cAACgG,EAAA,EAAOC,IAAR,CACIC,MAAI,EACJC,gBAAiB,CACbC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAEVC,UAAW,kBAAMoB,EAAU5H,EAAWwC,KACtCmE,YAAa,EAEbC,QAAS,CAAEC,QAAS,EAAGC,EAAG,KAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BI,WAAY,CACRC,KAAM,YACNC,SAAU,GAflB,SAiBI,qBAAIjH,UAAU,SAAd,UAA4CH,EAAWsB,KACnD,wBAAQnB,UAAU,aAAa,cAAaH,EAAWsB,KAAM+B,QAAS,kBAAMuE,EAAU5H,EAAWwC,KAAjG,SACI,cAAC,IAAD,MAEFR,OAAOS,KAAKzC,EAAWkC,QAAQ2B,OAAS,GAAK,eAACV,EAAA,EAAD,CAAKhD,UAAU,mBAAf,UAC3C,cAACkE,EAAA,EAAD,CAAWgE,OAAK,EAAhB,SACI,eAAChE,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACF,EAAA,EAAUG,OAAX,4BACA,cAACH,EAAA,EAAUN,KAAX,UACK/B,OAAOS,KAAKzC,EAAWkC,QAAQU,KAAI,SAAAhC,GAAM,OACtC,8BAAmBA,GAATA,aAK1B,2BAfoBZ,EAAWwC,KAPlCxC,EAAWwC,Y,aCrIzB,SAAS8F,EAAT,GAEE,IAFkBC,EAEnB,EAFmBA,eAM/B,OACI,eAACC,EAAA,EAAD,CAAKC,SAAO,EAAC7C,QAAQ,QAAQzF,UAAU,cAAcuI,iBAAiB,IAAIC,SAHzD,SAACpE,GAAD,OAA6BgE,EAAehE,IAG7D,UACI,cAACiE,EAAA,EAAIlE,KAAL,UACI,cAACkE,EAAA,EAAII,KAAL,CAAUrE,SAAS,IAAnB,6BAEJ,cAACiE,EAAA,EAAIlE,KAAL,UACI,cAACkE,EAAA,EAAII,KAAL,CAAU,cAAY,kBAAkBrE,SAAS,IAAjD,mC,4BC8EDsE,MAjFf,YAOkB,IAPMhI,EAOP,EAPOA,iBAAkBC,EAOzB,EAPyBA,aAAcgI,EAOvC,EAPuCA,WAAYlE,EAOnD,EAPmDA,kBAAmB7D,EAOtE,EAPsEA,eAAgB8D,EAOtF,EAPsFA,kBAAmBkE,EAOzG,EAPyGA,eAAgBC,EAOzH,EAPyHA,WAAY9D,EAOrI,EAPqIA,WAS5I+D,EAAgB,GAAGlI,EAEzB,SAASmI,EAAa3F,GAClB,IAAM4F,EAAc,eAAOH,GAE3BhH,OAAOS,KAAK0G,GAAgBzF,SAAQ,SAAAE,GACjBuF,GAAgBvF,GAA/BA,IAASL,EACTwF,EAAeI,MAGnBvE,EAAkBrB,GAKlBsB,EAAkBK,GAJL3B,EAIqB,GAAGjC,MAezC,OACI,8BACI,eAACuB,EAAA,EAAD,CAAM1C,UAAU,OAAO2C,MAAO,CAAEC,MAAO,QAAvC,UACI,wBAAQ5C,UAAU,gBAAgBkD,QAP9C,WACIxC,EAAiB,2BAAIC,GAAL,kBAAoB,GAAGC,EAAiB,OAMhD,SACI,cAAC,IAAD,OAEDiI,GAAYC,IAAkB,wBAAQ9I,UAAU,oBAAoB,cAAY,gBAAgBkD,QAAS,kBAAM6F,EAAa,GAAGnI,IAAjG,SAC7B,cAAC,IAAD,MAEFiI,GAAYC,IAAkB,wBAAQ9I,UAAU,mBAAmBkD,QAAS,kBAAM6F,EAAa,GAAGnI,IAApE,SAC5B,cAAC,IAAD,MAEJ,cAAC8B,EAAA,EAAKkB,KAAN,CAAW5D,UAAU,YAArB,SAEI,eAACiJ,EAAA,EAAD,WACI,kCACI,oBAAIjJ,UAAU,iBAAd,SAAgC+E,GAAY+D,EAAc,GAAG3H,OAC7D,+BACI,wCACA,oBAAI+H,MAAM,MAAV,6BAGR,uBAAO,cAAY,iBAAnB,SACKP,EAAWlG,KAAI,SAAChC,EAAQ4B,GAAT,OAEZ,qBAAa,cAAY,qBAAzB,UACI,6BAAK5B,EAAOU,OACZ,6BAAKV,EAAOqD,UACZ,wBAAQ9D,UAAU,gBAAgBkD,QAAS,kBAxC3E,SAAsBb,GAClB,IAAMc,EAAgB,eAAOxC,GAE7BwC,EAAiB,GAAGvC,GAAkBuC,EAAiB,GAAGvC,GAAgB2B,QAAO,SAAAkB,GAAI,OAAIA,IAAS5D,EAAWwC,MAC7G3B,EAAiByC,GACjBsB,EAAkB7D,GAmC2D+C,CAAalD,EAAO4B,KAArE,SACI,cAAC,IAAD,QAJCA,mBClE1B8G,EAVS,CACpB,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,GCoGMC,MAxFR,YAKW,IALW1I,EAKZ,EALYA,iBAAkBC,EAK9B,EAL8BA,aAAc8D,EAK5C,EAL4CA,kBAAmBC,EAK/D,EAL+DA,kBAAmBK,EAKlF,EALkFA,WAO/F,EAAqClE,mBAAkCsI,GAAvE,mBAAON,EAAP,KAAmBD,EAAnB,KACMS,EAAqB,eAAO1I,GAUlC,OACI,gCAEI,kDAEA,qBAAK,cAAY,cAAjB,SACI,cAACmC,EAAA,EAAD,UAEI,cAACC,EAAA,EAAD,CAAK2C,GAAI,EAAGC,GAAI,EAAhB,SAEK9D,OAAO2B,QAAQ6F,GAAuB5G,KAAI,mCAAEW,EAAF,KAAO9C,EAAP,YACvC,cAAC0C,EAAA,EAAD,UACI,cAAC,EAAD,CACItC,iBAAkBA,EAClBC,aAAcA,EACdgI,WAAYrI,EACZmE,kBAAmBA,EACnB7D,eAAgBwC,EAChBsB,kBAAmBA,EACnBkE,eAAgBA,EAChBC,WAAYA,EACZ9D,WAAYA,KAVV3B,YAmB1B,8BACI,wBAAQF,QAvCpB,WAEI,IADA,IAAMC,EAAgB,eAAOxC,GAC7B,MAAoBkB,OAAO2B,QAAQL,GAAnC,eAAsD,CAClDA,EADC,wBACqB,GACtBzC,EAAiByC,KAmCwB,cAAY,uBAAjD,uC,eC3DD,SAASmG,EAAT,GAGE,IAHoB7I,EAGrB,EAHqBA,OAAQmE,EAG7B,EAH6BA,aAAcC,EAG3C,EAH2CA,SAmBvD,OACI,8BACI,eAACnC,EAAA,EAAD,CAAM1C,UAAU,OAAO2C,MAAO,CAAEC,MAAO,SAAvC,UACI,cAACE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACN,EAAA,EAAKO,MAAN,UAAaxC,EAAOU,SAExB,cAAC6B,EAAA,EAAD,UACI,wBAAQhD,UAAU,gBAAgBkD,QAAS,kBAb7Cb,EAagE5B,EAAO4B,QAZzFuC,EAAaC,EAAStC,QAAO,SAAAkB,GAAI,OAAIA,IAAS5D,EAAWwC,OAD7D,IAAsBA,GAaE,SACI,cAAC,IAAD,aAKhB,eAACK,EAAA,EAAKkB,KAAN,CAAW5D,UAAU,YAArB,UACI,eAAC0C,EAAA,EAAKmB,KAAN,uBACcpD,EAAOqD,WAErB,eAACpB,EAAA,EAAKmB,KAAN,oBACWpD,EAAOsD,UADlB,QACkCtD,EAAOuD,WAGzC,eAACtB,EAAA,EAAKmB,KAAN,oBACWpD,EAAOwD,YAElB,cAACjB,EAAA,EAAD,CAAKhD,UAAU,oBAGf,cAACgD,EAAA,EAAD,CAAKhD,UAAU,iBAAf,SACI,cAACkE,EAAA,EAAD,UACI,eAACA,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,UACI,cAACF,EAAA,EAAUG,OAAX,sBACA,eAACH,EAAA,EAAUN,KAAX,WACI,wBAAQ5D,UAAU,cAAckD,QAAS,aAAzC,SACI,cAAC,IAAD,MAFR,uBAGyBzC,EAAOQ,8BC9DjD,SAASsI,EAAT,GAEE,IAFwB3E,EAEzB,EAFyBA,aAQrC,OACI,wBAAQ1B,QAAS,WAJjB0B,EAAa,KAIb,uBCDO,SAAS4E,EAAT,GAKE,IALiBnC,EAKlB,EALkBA,cAAevC,EAKjC,EALiCA,WAAYF,EAK7C,EAL6CA,aAAcC,EAK3D,EAL2DA,SAAUnE,EAKrE,EALqEA,iBAAkBC,EAKvF,EALuFA,aAAcC,EAKrG,EALqGA,eAQ3G6I,EAAiB5E,EAEvB,SAAS4C,EAAUpF,GACf,IAAMc,EAAgB,eAAOxC,GAGzBA,EAAa,GAAGC,GAAgB0F,SAASzG,EAAWwC,IACpDkE,MAAM,GAAD,OAAI1G,EAAWwC,GAAIlB,KAAnB,sEAUsC,IAA3CR,EAAa,GAAGC,GAAgB8C,OAAe6C,MAAM,iDAC9CpD,EAAiB,GAAGvC,GAAgBgH,KAAK/H,EAAWwC,IAAM3B,EAAiByC,GAQ1F,SAAsBd,GAClBuC,EAAaC,EAAStC,QAAO,SAAAkB,GAAI,OAAIA,IAAS5D,EAAWwC,OARjDsB,CAAatB,IAWzB,OACI,8BACI,eAACqH,EAAA,EAAD,CAAW1J,UAAU,MAAM4B,KAAMkD,EAAY6E,OAAQ,kBAAMtC,GAAc,IAAQpF,UAAU,SAAS2H,QAAQ,EAAMC,UAAU,EAA5H,UACI,cAACH,EAAA,EAAUrF,OAAX,CAAkByF,aAAW,EAA7B,SACI,cAACJ,EAAA,EAAUzG,MAAX,+BAEJ,eAACyG,EAAA,EAAU9F,KAAX,CAAgB5D,UAAU,WAA1B,UACI,cAACuJ,EAAD,CACI3E,aAAcA,IAElB,cAAC9B,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAK2C,GAAI,EAAGC,GAAI,EAAhB,SACI,cAACC,EAAA,EAAD,UACK6D,EAAehH,KAAI,SAAAgH,GAAc,OAC9B,cAAC5D,EAAA,EAAOC,IAAR,CAEIC,MAAI,EACJC,gBAAiB,CACbC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAEVC,UAAW,kBAAMoB,EAAUgC,EAAepH,KAC1CmE,YAAa,EACbC,QAAS,CAAEC,QAAS,EAAGC,EAAG,KAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BE,KAAM,CAAEH,QAAS,EAAGI,GAAI,IAAKH,EAAG,KAChCI,WAAY,CACRC,KAAM,YACNC,SAAU,IAhBlB,SAkBI,cAACjE,EAAA,EAAD,UACI,cAAC,EAAD,CACIvC,OAAQgJ,EACR7E,aAAcA,EACdC,SAAUA,OArBb4E,EAAepH,qB,MC3D7C,SAAS0H,EAAT,GAIE,IAJ2BrJ,EAI5B,EAJ4BA,iBAAkBC,EAI9C,EAJ8CA,aAAcqJ,EAI5D,EAJ4DA,iBAAkBC,EAI9E,EAJ8EA,cAAeC,EAI7F,EAJ6FA,cAAenF,EAI5G,EAJ4GA,WAmBxH,SAASoF,EAAgBC,GACrB,IAAIC,EAAWD,EACXE,EAAS,GASb,OARIF,EAAQ,IAAM,GACdC,GAAYD,EAAM,GAAK,EACvBE,EAAS,SAETD,EAAWD,EAAM,EACjBE,EAAS,UAGP,GAAN,OAAUA,EAAV,YAAoBD,GAIxB,OACI,wBAAQrK,UAAU,aAAa,cAAY,mBAAmBkD,QAAS,kBA7B3E,WACI,IAAIkH,EAAQH,EACN9G,EAAgB,eAAOxC,GAE7BoE,EAAW6C,KAAK,CAACzG,KAAMgJ,EAAgBF,GAAgB3J,MAAO2J,IAC9DC,EAAcnF,GAEd5B,EAAiB,GAAG8G,GAAiB,GACrCvJ,EAAiByC,GACjBiH,IACAJ,EAAiBI,GAmB4DG,IAA7E,0BClCO,SAASC,EAAT,GAME,IAN8B9J,EAM/B,EAN+BA,iBAAkBC,EAMjD,EANiDA,aAAcqJ,EAM/D,EAN+DA,iBAAkBC,EAMjF,EANiFA,cAAeC,EAMhG,EANgGA,cAAenF,EAM/G,EAN+GA,WAAYN,EAM3H,EAN2HA,kBAAmBC,EAM9I,EAN8IA,kBAQ1J,SAAS+F,IACL,IAAIL,EAAQH,EACN9G,EAAgB,eAAOxC,GAEf,IAAVyJ,EACA7D,MAAM,gCAIN9B,EAAkB,KAClBC,EAAkBK,EAAW,GAAG5D,MAiBxC,WACI,cAA2BU,OAAO2B,QAAQ7C,EAAasJ,EAAc,IAArE,eAA0E,CAArE,0BAAO7G,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAIF,GACZmB,EAAajE,GAEjBI,EAAiB,2BAAIC,GAAL,kBAAoBsJ,EAAc,EAAI,MAnBlDS,GAGA3F,EAAW4F,MACXT,EAAcnF,UAEP5B,EAAiB8G,EAAc,GACtCvJ,EAAiByC,GAEjBiH,IACAJ,EAAiBI,IAYzB,SAAS7F,EAAa9D,GAClB,IADmC,IAAD,aAC7B,0BAAO2C,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBuB,OAAOS,KAAKhC,EAAMyB,QAAQwB,SAAQ,SAAAf,GAE3BA,IAAe/B,EAAOU,OACrBkC,QAAQC,IAAId,GACZlC,EAAMyB,OAAOS,IAAc,OANvC,MAA2BX,OAAO2B,QAAQ3D,GAA1C,eAAwD,IAUxD,cAA2BgC,OAAO2B,QAAQ7C,GAA1C,eAAyD,CAApD,0BAAOyC,EAAP,KAAY9C,EAAZ,KACD+C,QAAQC,IAAI,CAACF,EAAI9C,IACjBK,EAAayC,GAAKG,SAAQ,SAAAE,GACnB5B,OAAOS,KAAKmB,EAAK1B,QAAQ2B,OAAS,IAC7B7B,OAAOC,OAAO2B,EAAK1B,QAAQC,OAAM,SAAAvB,GAAM,OAAe,IAAXA,KAC3CgD,EAAKhC,YAAc,QAEnBgC,EAAKhC,YAAc,MAEvBD,EAAYiC,QAO5B,SAASjC,EAAYf,GACjB,OAAOA,EAAOgB,YAGlB,OACI,wBAAQzB,UAAU,gBAAgB,cAAY,sBAAsBkD,QAAS,kBAAMuH,KAAnF,6BCjFR,IAUeG,EAVQ,CACnB,CAAEzJ,KAAM,SAAUb,MAAO,GACzB,CAAEa,KAAM,WAAYb,MAAO,GAC3B,CAAEa,KAAM,SAAUb,MAAO,GACzB,CAAEa,KAAM,WAAYb,MAAO,GAC3B,CAAEa,KAAM,SAAUb,MAAO,GACzB,CAAEa,KAAM,WAAYb,MAAO,GAC3B,CAAEa,KAAM,SAAUb,MAAO,GACzB,CAAEa,KAAM,WAAYb,MAAO,ICGhB,SAASuK,EAAT,GAME,IANyBvD,EAM1B,EAN0BA,oBAAqBC,EAM/C,EAN+CA,iBAAkB3C,EAMjE,EANiEA,aAAcC,EAM/E,EAN+EA,SAAUnE,EAMzF,EANyFA,iBAAkBC,EAM3G,EAN2GA,aAAcC,EAMzH,EANyHA,eAS/H6I,EAAiB5E,EAEvB,SAAS4C,EAAUpF,GACf,IAAMc,EAAgB,eAAOxC,GAGzBA,EAAa,GAAGC,GAAgB0F,SAASzG,EAAWwC,IACpDkE,MAAM,GAAD,OAAI1G,EAAWwC,GAAIlB,KAAnB,sEAUsC,IAA3CR,EAAa,GAAGC,GAAgB8C,OAAe6C,MAAM,iDAC9CpD,EAAiB,GAAGvC,GAAgBgH,KAAK/H,EAAWwC,IAAM3B,EAAiByC,GAQ1F,SAAsBd,GAClBuC,EAAaC,EAAStC,QAAO,SAAAkB,GAAI,OAAIA,IAAS5D,EAAWwC,OARjDsB,CAAatB,IAUzB,OACI,8BACI,eAACqH,EAAA,EAAD,CAAW1J,UAAU,MAAM4B,KAAM2F,EAAkBoC,OAAQ,kBAAMrC,GAAoB,IAAQrF,UAAU,SAAS2H,QAAQ,EAAMC,UAAU,EAAxI,UACI,cAACH,EAAA,EAAUrF,OAAX,CAAkByF,aAAW,EAA7B,SACI,cAACJ,EAAA,EAAUzG,MAAX,oCAEJ,eAACyG,EAAA,EAAU9F,KAAX,CAAgB5D,UAAU,WAA1B,UACI,cAACuJ,EAAD,CACI3E,aAAcA,IAElB,cAAC9B,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAK2C,GAAI,EAAGC,GAAI,EAAhB,SACI,cAACC,EAAA,EAAD,UACK6D,EAAehH,KAAI,SAAAgH,GAAc,OAC9B,cAAC5D,EAAA,EAAOC,IAAR,CAEIC,MAAI,EACJC,gBAAiB,CACbC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAEVC,UAAW,kBAAMoB,EAAUgC,EAAepH,KAC1CmE,YAAa,EACbC,QAAS,CAAEC,QAAS,EAAGC,EAAG,KAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BE,KAAM,CAAEH,QAAS,EAAGI,GAAI,IAAKH,EAAG,KAChCI,WAAY,CACRC,KAAM,YACNC,SAAU,IAhBlB,SAkBI,cAACjE,EAAA,EAAD,UACI,cAAC,EAAD,CACIvC,OAAQgJ,EACR7E,aAAcA,EACdC,SAAUA,OArBb4E,EAAepH,qBC6E7CyI,MA7Hf,YAEiB,IAFGC,EAEJ,EAFIA,YAAa3C,EAEjB,EAFiBA,eAG7B,EAA4CvH,mBAAwB,KAApE,mBAAOD,EAAP,KAAuB6D,EAAvB,KACA,EAA4C5D,mBAAiB,UAA7D,mBAAO8D,EAAP,KAAuBD,EAAvB,KAEA,EAAgD7D,oBAAkB,GAAlE,mBAAO0G,EAAP,KAAyBD,EAAzB,KAIA,EAAoCzG,oBAAkB,GAAtD,mBAAOiE,EAAP,KAAmBuC,EAAnB,KAEA,EAAiCxG,mBADD,IAChC,mBAAOgE,EAAP,KAAiBD,EAAjB,KAEA,EAA0C/D,mBAAiB,GAA3D,mBAAOoJ,EAAP,KAAsBD,EAAtB,KACA,EAAoCnJ,mBAAuB+J,GAA3D,mBAAO7F,EAAP,KAAmBmF,EAAnB,KAYA,EAAyCrJ,mBAVW,CAChD,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,KAET,mBAAOF,EAAP,KAAqBD,EAArB,KAEA,OACI,sBAAKV,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,6BAEI,wFAIJ,0BAASA,UAAU,YAAnB,UACI,qCACA,cAACmI,EAAD,CACIC,eAAgBA,OAGxB,0BAASpI,UAAU,YAAnB,UAEI,cAACwK,EAAD,CACI/F,kBAAmBA,EACnBC,kBAAmBA,EACnBhE,iBAAkBA,EAClBC,aAAcA,EACdqJ,iBAAkBA,EAClBC,cAAeA,EACfC,cAAeA,EACfnF,WAAYA,IAGhB,cAACgF,EAAD,CACIrJ,iBAAkBA,EAClBC,aAAcA,EACdqJ,iBAAkBA,EAClBC,cAAeA,EACfC,cAAeA,EACfnF,WAAYA,IAIE,MAAhBgG,GAAuB,cAACvG,EAAD,CACrBG,eAAgBA,EAChBD,kBAAmBA,EACnBD,kBAAmBA,EACnB7D,eAAgBA,EAChBF,iBAAkBA,EAClBC,aAAcA,EACdiE,aAAcA,EACdC,SAAUA,EACVC,WAAYA,EACZC,WAAYA,IAGE,MAAhBgG,GAAuB,cAAC,EAAD,CACrBrK,iBAAkBA,EAClBC,aAAcA,EACd8D,kBAAmBA,EACnBC,kBAAmBA,EACnBK,WAAYA,OAIpB,yBAAS/E,UAAU,aAAnB,UACuB,MAAhB+K,GAAuC,MAAhBA,IAAyB,cAAC,EAAD,CAC/CrK,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,EAChByG,cAAeA,EACfvC,WAAYA,EACZF,aAAcA,EACdC,SAAUA,EACV0C,iBAAkBA,EAClBD,oBAAqBA,MAI7B,cAAC,EAAD,CACID,cAAeA,EACfvC,WAAYA,EACZF,aAAcA,EACdC,SAAUA,EACVnE,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,IAGpB,cAACiK,EAAD,CACIvD,oBAAqBA,EACrBC,iBAAkBA,EAClB3C,aAAcA,EACdC,SAAUA,EACVnE,iBAAkBA,EAClBC,aAAcA,EACdC,eAAgBA,Q,OCnIjB,SAASoK,EAAT,GAEE,IAFqB5C,EAEtB,EAFsBA,eASlC,OACI,qBAAKpI,UAAU,OAAf,SACI,sBAAKA,UAAU,WAAf,UACI,kDACA,0DACA,wBAAQ,cAAY,aAAakD,QAAS,WATlDkF,EAAe,MASP,wBCOD6C,MAnBf,WACI,MAAsCpK,mBAAwB,KAA9D,mBAAOkK,EAAP,KAAoB3C,EAApB,KAEA,OACI,gCAEqB,MAAhB2C,GAAuB,cAAC,EAAD,CACpB3C,eAAgBA,IAGH,MAAhB2C,GAAuB,cAAC,EAAD,CACpB3C,eAAgBA,EAChB2C,YAAaA,QCJdG,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.65e679e1.chunk.js","sourcesContent":["const courseData = [\n    {\n        \"id\": 0,\n        \"name\": \"CISC 100\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"CISC 200\",\n        \"timeStart\": 1400,\n        \"timeEnd\": 1500,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": <Record<string, boolean>>{\"CISC 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"CISC 300\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Science 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"CISC 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"MATH 100\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1630,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"MATH 200\",\n        \"timeStart\": 1330,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGL 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"CPEG 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"CPEG 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": <Record<string, boolean>>{\"CPEG 100\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"CPEG 300\",\n        \"timeStart\": 900,\n        \"timeEnd\": 955,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Engineering 300, section 10.\",\n        \"credits\": 4,\n        \"preReq\": <Record<string, boolean>>{\"CPEG 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"CPEG 400\",\n        \"timeStart\": 1600,\n        \"timeEnd\": 1730,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"CPEG 300\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"MATH 300\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"MATH 400\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"MATH 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"CPEG 355\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 355, section 10.\",\n        \"credits\": 4,\n        \"preReq\": <Record<string, boolean>>{\"CPEG 300\": false, \"CISC 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"CISC 400\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1055,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"CISC 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"ENGL 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is English 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"ENGL 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"ENGL 300\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"ENGL 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"ENGL 400\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1625,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{\"ENGL 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"HIST 100\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1130,\n        \"schedule\": \"TR\",\n        \"description\": \"This is History 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": <Record<string, boolean>>{},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"PHYS 100\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Physics 100, section 10.\",\n        \"credits\": 4,\n        \"preReq\": <Record<string, boolean>>{},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"PHYS 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1155,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Physics 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": <Record<string, boolean>>{\"PHYS 100\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    }\n];\nexport default courseData;\n","import React from \"react\";\nimport \"../css/TextInput.css\";\n\n\nexport default function TextInput({ setInput }: {\n    setInput: (q: string) => void,\n}): JSX.Element {\n    return (\n        <div>\n            <input className=\"text_input\" type=\"description\" placeholder=\"Enter Description\" onChange={event => setInput(event.target.value)}/>\n        </div>\n    );\n}\n\n","import React from \"react\";\nimport \"../css/TextInput.css\";\n\n\nexport default function TitleInput({ setInput }: {\n    setInput: (q: string) => void,\n}): JSX.Element {\n    return (\n        <div>\n            <input className=\"text_input\" data-testId=\"input-title\" type=\"title\" placeholder=\"Enter Title\" onChange={event => setInput(event.target.value)}/>\n        </div>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport { Card,Col, Row, Container, Accordion, OverlayTrigger, Popover } from \"react-bootstrap/\";\nimport \"../css/courses.css\";\nimport \"../assets/courses\";\nimport { GrEdit } from \"react-icons/gr\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport courseData from \"../assets/courses\";\nimport TextInput from \"./TextInput\";\nimport TitleInput from \"./TitleInput\";\nimport { Course } from \"../interfaces/course\";\n\nexport default function CourseComp({ course, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    course: Course,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null\n}):  JSX.Element {\n    \n    const [input, setInput] = useState<string>(\"\");\n    const [visible, setVisible] = useState<number>(0);\n    const [description, setDescription] = useState<string>(course.description);\n    const [title, setTitle] = useState<string>(course.name);\n    const [titleVisible, setTitleVisible] = useState<number>(0);\n\n \n    function editTitle() {\n        setTitleVisible(1);\n    }\n\n    function submitTitle() {\n        setTitle(input);\n        setTitleVisible(0);\n    }\n\n    function editDescription() {\n\n        setVisible(1);\n        //alert(input);\n    }\n\n    function submitDescription() {\n        setDescription(input);\n        setVisible(0);\n    }\n    \n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                //console.log(courseName);\n                if(courseName === courseData[id].name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <div>           \n            <OverlayTrigger trigger={[\"hover\", \"focus\"]} show={ Object.values(course.preReq).every(course => course === true) ? false : true } placement={ SEMESTER_MAP[\"\"+semesterSelect].indexOf(course) > 2 ? \"bottom\" : \"top\" } overlay={\n                <Popover className=\"popover\" id=\"tooltip-preReq\">Missing: {Object.keys(course.preReq).filter(courseName => \n                    course.preReq[courseName] === false).map(course => \n                    <div key={course}>{course}</div>)} </Popover>}>\n                <Card className=\"card\" data-testid=\"course-card\" style={{ width: \"100%\", color: updateColor(course) }}>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Card.Title>{title}</Card.Title>\n                                { titleVisible === 1 && <TitleInput \n                                    setInput={setInput}\n                                ></TitleInput> }\n                                {titleVisible === 1 && <button onClick={() => submitTitle()}>Submit</button>\n                                }\n                            \n                                <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                    <MdDeleteForever></MdDeleteForever></button>\n                                <button className=\"edit-button\" data-testid=\"title-edit-btn\" onClick={() => editTitle()}><GrEdit></GrEdit></button>\n                            </Col>                        \n                        </Row>\n                    </Container>\n                    <Card.Body className=\"card-body\">\n                        <Card.Text>\n                            Credits: {course.credits}\n                        </Card.Text>\n                        <Card.Text>\n                            From: {course.timeStart} To: {course.timeEnd}\n                        </Card.Text>\n                        \n\n                        <Card.Text>\n                            Days: {course.schedule}\n                        </Card.Text>\n                        <Col className=\"column-dropdown\">\n                        </Col>\n                    \n                        <Col className=\"card-accordion\">\n                            <Accordion>\n                                <Accordion.Item eventKey=\"0\">\n                                    <Accordion.Header>Details</Accordion.Header>\n                                    <Accordion.Body>\n                                        {description}\n                                        { visible === 1 && <TextInput \n                                            setInput={setInput}\n                                        ></TextInput>}\n                                        \n                                        { visible === 0 && <button className=\"edit-desc-button\" onClick={() => editDescription()}><GrEdit></GrEdit></button> }\n                                        { visible === 1 && <button className=\"\" onClick={() => submitDescription()}>Enter</button> }   \n                                        \n                                    </Accordion.Body>\n                                </Accordion.Item>\n                            </Accordion>\n                        </Col>\n                    </Card.Body>\n                </Card>\n            </OverlayTrigger>\n        </div>    \n    );\n}","import React from \"react\";\nimport courseData from \"../assets/courses\";\nimport { Course } from \"../interfaces/course\";\n\nexport default function ClearSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, \n    SEMESTER_MAP: Record<string, Course[]>, semesterSelect: string | null\n}): JSX.Element {\n\n    function removeAllCourses() {    \n        for (const [key, value] of Object.entries(SEMESTER_MAP[\"\"+semesterSelect])) {\n            console.log(key);\n            removePreReq(value);\n        }\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    function removePreReq(course: Course) {\n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                //console.log(courseName);\n                if(courseName === course.name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <button onClick={removeAllCourses} data-testid=\"btn-clear-semester\">Clear All Courses</button>\n    );\n}\n","import React from \"react\";\nimport { Col, Row, Container, ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\n\nimport CourseComp from \"./CourseComp\";\nimport ClearSemesterButton from \"./ClearSemesterButton\";\nimport \"../css/board.css\";\nimport courseData from \"../assets/courses\";\n\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport { Course } from \"../interfaces/course\";\n\nexport function Board({ setSemesterSelect, semesterSelect, SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterHeader, semesterHeader, SET_SAVE_BIN, SAVE_BIN, binVisible, buttonList }: {\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void, semesterHeader: string,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    binVisible: boolean,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    // const list variable to map out classList useState variable\n    const classListToPrint = SEMESTER_MAP[\"\"+semesterSelect];\n\n    const buttonToggle = \"\"+semesterSelect;\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        if (binVisible){\n            if (SAVE_BIN.includes(courseData[id])) {\n                alert(`${courseData[id].name} is already added to your bin. It will now be removed from the semester.`);\n            } else {\n                SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n            }\n        }\n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                // console.log(courseName);\n                if(courseName === courseData[id].name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function handleSelect (val: number) {\n        setSemesterSelect(\"\"+val);\n        setSemesterHeader(buttonList[val-1].name);\n    }\n\n    function checkPreReqWarning(key: string) {\n        let flag = false;\n        SEMESTER_MAP[key].forEach(course => {\n            if(course.preReqCheck === \"red\"){\n                flag = true;\n            }\n        });\n        return flag;\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <div data-testid=\"semester-view\">\n            <div>\n                <h2>Semester View - {semesterHeader}</h2>\n                <ToggleButtonGroup className=\"semester-button\" name=\"options\" value={+buttonToggle} onChange={handleSelect}>\n                    {buttonList.map((radio, idx) =>\n                        <ToggleButton\n                            data-testid=\"btn-semester\"\n                            key={idx}\n                            id={`radio-${idx}`}\n                            type=\"radio\"\n                            variant={ checkPreReqWarning(\"\"+radio.value) ? \"outline-warning\" : SEMESTER_MAP[\"\"+radio.value].length > 0 ? \"outline-success\" :  \"outline-danger\" }\n                            name=\"radio\"\n                            value={radio.value}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    )}\n                </ToggleButtonGroup>\n            </div>\n\n            <div>\n                <Container data-testid=\"board\">\n                    <Row data-testid=\"board-row-1\" xs={1} md={3}>\n                        <AnimatePresence>\n                            {classListToPrint.map(classListToPrint =>\n                                <motion.div\n                                    key={classListToPrint.id}\n                                    drag\n                                    dragConstraints={{\n                                        top: 0,\n                                        bottom: 0,\n                                        right: 0,\n                                        left: 0\n                                    }}\n                                    onDragEnd={() => removeCourse(classListToPrint.id)}\n                                    dragElastic={1}\n                                    initial={{ opacity: 0, x: 180 }}\n                                    animate={{ opacity: 1, x: 0 }}\n                                    exit={{ opacity: 0, y: -200, x: 180 }}\n                                    transition={{\n                                        ease: \"easeInOut\",\n                                        duration: 0.4\n                                    }}>\n                                    <Col >\n                                        <CourseComp\n                                            course={classListToPrint}\n                                            SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                            SEMESTER_MAP={SEMESTER_MAP}\n                                            semesterSelect={semesterSelect}\n                                        ></CourseComp>\n                                    </Col>\n                                </motion.div>\n                            )}\n                        </AnimatePresence>\n                    </Row>\n                </Container>\n                { SEMESTER_MAP[\"\"+semesterSelect].length > 0 && <ClearSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    semesterSelect={semesterSelect}\n                ></ClearSemesterButton> }\n            </div>\n\n        </div>\n    );\n}","import React from \"react\";\n\nimport \"../css/SearchBar.css\";\n\nexport default function SearchBar({ setQuery }: {\n    setQuery: (q: string) => void\n}): JSX.Element {\n    return(\n        <div>\n            <input className=\"form__field\" data-testid=\"search-bar\" placeholder=\"Enter Course\" onChange={event => setQuery(event.target.value)}/>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport courseData from \"../assets/courses\";\nimport { MdAdd } from \"react-icons/md\";\nimport \"../css/DisplayCourses.css\";\nimport SearchBar from \"./SearchBar\";\nimport { Accordion, Col } from \"react-bootstrap\";\nimport { motion } from \"framer-motion\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\n\nexport default function DisplayCourses({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, setBinVisible, binVisible, setNewCourseVisible, newCourseVisible, SET_SAVE_BIN, SAVE_BIN }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null,\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    setNewCourseVisible: (b: boolean) => void, newCourseVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n}): JSX.Element {\n\n    const [query, setQuery] = useState<string>(\"\");\n    \n    newCourseVisible;\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        const foundCourse = findCourse(id);\n        \n        // If bin is open, add courses to bin\n        if (binVisible){\n            if (SAVE_BIN.includes(courseData[id])) {\n                alert(`${courseData[id].name} is already added to your bin. Please select another course.`);\n            } else {\n                SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n            }\n        } else {\n            if (foundCourse) {\n                alert(`${courseData[id].name} is already added to this semester. Please select another course.`);\n            } else {\n                //  PREREQ MET IN PRIOR SEMESTER\n                if (Object.keys(courseData[id].preReq).length > 0){\n                    console.log(courseData[id].preReq);\n                    if (Object.values(courseData[id].preReq).every(course => course === true)){\n                        courseData[id].preReqCheck = \"black\";\n                    } else {\n                        alert(\"Warning: Pre-Reqs not met.\");\n                        courseData[id].preReqCheck = \"red\";\n                    }\n                    updateColor(courseData[id]);\n                }\n\n                if (SEMESTER_MAP[\"\" + semesterSelect].length === 6) {\n                    alert(\"Max number of courses selected for semester.\");\n                } else {\n                    for (const [key, value] of Object.entries(courseData)) {\n                        console.log([key,value]);\n                        Object.keys(value.preReq).forEach(courseName => {\n                            //console.log(courseName);\n                            if(courseName === courseData[id].name) {\n                                console.log(courseName);\n                                value.preReq[courseName] = true;\n                            }\n                        });\n                    }\n                    NEW_SEMESTER_MAP[\"\" + semesterSelect].push(courseData[id]);\n                    SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n                }\n\n                for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n                    console.log([key,value]);\n                    SEMESTER_MAP[key].forEach(item => {\n                        if(Object.keys(item.preReq).length > 0) {\n                            if (Object.values(item.preReq).every(course => course === true)){\n                                item.preReqCheck = \"black\";\n                            } else {\n                                item.preReqCheck = \"red\";\n                            }\n                            updateColor(item);\n                        }\n                    });\n                }\n\n                // SEMESTER_MAP[\"\"+semesterSelect].length === 6 ? alert(\"Max number of courses selected for semester.\")\n                //     : (NEW_SEMESTER_MAP[\"\"+semesterSelect].push(courseData[id]), \n                //     SET_SEMESTER_MAP(NEW_SEMESTER_MAP));\n\n            \n            }\n        }   \n    }\n    \n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n    \n    function findCourse(id: number) {\n        return SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id]);\n    }\n    \n\n    function showBin() {\n        setBinVisible(!binVisible);\n    }\n    \n    function showCreateNewCourse() {\n        setNewCourseVisible(!newCourseVisible);\n    }\n\n    return (\n        <div>\n            <div className=\"menu-button\">\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\">\n                    <Dropdown.Item as=\"button\">Search Course</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => showBin()}>Save Courses for Later</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => showCreateNewCourse()}>Create A New Course</Dropdown.Item>\n                </DropdownButton>\n            </div>\n            <SearchBar\n                setQuery={setQuery}\n            ></SearchBar>\n            <ul className=\"list-group\">\n                {courseData.filter(post => {\n                    if (query === \"\") {\n                        return post;\n                    } else if (post.name.toLowerCase().includes(query.toLowerCase())) {\n                        return post;\n                    }\n                }).map(courseData => \n                    <motion.div\n                        drag\n                        dragConstraints={{\n                            top: 0,\n                            bottom: 0,\n                            right: 0,\n                            left: 0\n                        }}\n                        onDragEnd={() => addCourse(courseData.id)}\n                        dragElastic={1}\n                        key={courseData.id}\n                        initial={{ opacity: 0, x: 180 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{\n                            ease: \"easeInOut\",\n                            duration: 1,\n                        }}>\n                        <li className=\"course\" key={courseData.id}>{courseData.name}\n                            <button className=\"add-button\" data-testid={courseData.name} onClick={() => addCourse(courseData.id)}>\n                                <MdAdd />\n                            </button>\n                            { Object.keys(courseData.preReq).length > 0 && <Col className=\"prereq-accordion\">\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"0\">\n                                        <Accordion.Header>Prerequisites</Accordion.Header>\n                                        <Accordion.Body>\n                                            {Object.keys(courseData.preReq).map(course => \n                                                <div key={course}>{course}</div>\n                                            )}\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                                <p></p>\n                            </Col> }\n                        </li>\n                    </motion.div>\n                )}\n            </ul>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap/\";\n\nexport default function SideMenu( {setVisibleView} : {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    const handleSelect = (eventKey: string | null) => setVisibleView(eventKey);\n\n    return (\n        <Nav justify variant=\"pills\" className=\"flex-column\" defaultActiveKey=\"2\" onSelect={handleSelect}>\n            <Nav.Item>\n                <Nav.Link eventKey=\"2\">Semester View</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link data-testid=\"degree-view-nav\" eventKey=\"3\">Degree Plan View</Nav.Link>\n            </Nav.Item>\n  \n        </Nav>\n    );\n}","import React from \"react\";\nimport { Card, Table } from \"react-bootstrap/\";\nimport \"../css/courses.css\";\nimport \"../assets/courses\";\n\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { ImCross, ImRadioChecked, ImRadioUnchecked } from \"react-icons/im\";\nimport courseData from \"../assets/courses\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport { Course } from \"../interfaces/course\";\n\n\nfunction SemesterComp({ SET_SEMESTER_MAP, SEMESTER_MAP, courseList, setSemesterSelect, semesterSelect, setSemesterHeader, SET_SELECT_MAP, SELECT_MAP, buttonList }: {\n    courseList: Course[],\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void,\n    SET_SELECT_MAP: (s: Record<string, boolean>) => void, SELECT_MAP: Record<string, boolean>,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    const semesterIndex = \"\"+semesterSelect;\n\n    function selectToggle(key: string) {\n        const NEW_SELECT_MAP = {...SELECT_MAP};\n        \n        Object.keys(NEW_SELECT_MAP).forEach(item => {\n            item === key ? NEW_SELECT_MAP[+item] = true : NEW_SELECT_MAP[+item] = false;\n            SET_SELECT_MAP(NEW_SELECT_MAP);\n        });\n\n        setSemesterSelect(key);\n        handleSelect(key);\n    }\n\n    function handleSelect (val: string) {\n        setSemesterHeader(buttonList[+val-1].name);\n    }\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        setSemesterSelect(semesterSelect);\n    }\n\n    function removeAllCourses() {\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    return (\n        <div>\n            <Card className=\"card\" style={{ width: \"100%\" }}>\n                <button className=\"delete-button\" onClick={removeAllCourses}>\n                    <MdDeleteForever></MdDeleteForever>\n                </button>\n                { !SELECT_MAP[+semesterIndex] && <button className=\"select-button-off\" data-testid=\"select-button\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioUnchecked></ImRadioUnchecked> \n                </button>}\n                { SELECT_MAP[+semesterIndex] && <button className=\"select-button-on\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioChecked></ImRadioChecked>\n                </button>}\n                <Card.Body className=\"card-body\">\n                    \n                    <Table>\n                        <thead>\n                            <th className=\"semester-title\">{buttonList[+semesterIndex-1].name}</th>\n                            <tr>\n                                <th>Course</th>\n                                <th scope=\"col\">Credit(s)</th>\n                            </tr>\n                        </thead>\n                        <tbody data-testid=\"semester-table\">\n                            {courseList.map((course, id) =>\n\n                                <tr key={id} data-testid=\"semester-comp-card\">\n                                    <th>{course.name}</th>\n                                    <td>{course.credits}</td>\n                                    <button className=\"delete-course\" onClick={() => removeCourse(course.id)}>\n                                        <ImCross></ImCross>\n                                    </button>\n                                </tr>\n\n                            )}\n                        </tbody>\n                    </Table>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default SemesterComp;\n","const SELECT_MAP_INIT = {\n    \"1\": false,\n    \"2\": false,\n    \"3\": false,\n    \"4\": false,\n    \"5\": false,\n    \"6\": false,\n    \"7\": false,\n    \"8\": false\n};\nexport default SELECT_MAP_INIT;\n","import React, { useState } from \"react\";\nimport { Row, Col, Container} from \"react-bootstrap\";\nimport \"../css/calender.css\";\n// import CourseComp from \"./CourseComp\";\nimport SemesterComp from \"./SemesterComp\";\n// import ClearSemesterButton from \"./ClearSemesterButton\";\nimport SELECT_MAP_INIT from \"../assets/radioToggle\";\nimport { ButtonList } from \"../interfaces/buttonList\";\n\nimport { Course } from \"../interfaces/course\";\n/**\n * \n * export function Calender({ setNumberOfCourses, numberOfCourses, courseID }: {\n    setNumberOfCourses: (s: number) => void,  numberOfCourses: number, courseID: number\n}):  JSX.Element {\n\n * at symbol returns \n */\n\n\nexport function DegreePlan({ SET_SEMESTER_MAP ,SEMESTER_MAP, setSemesterSelect, setSemesterHeader, buttonList }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (s: string) => void,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    const [SELECT_MAP, SET_SELECT_MAP] = useState<Record<string, boolean>>(SELECT_MAP_INIT);\n    const SEMESTER_MAP_TO_PRINT = {...SEMESTER_MAP};\n\n    function removeAllSemesters() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP}; \n        for (const [key] of Object.entries(NEW_SEMESTER_MAP)) {\n            NEW_SEMESTER_MAP[key]=[];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        }\n    }\n\n    return (\n        <div>\n            \n            <h2>Degree Plan View</h2>\n\n            <div data-testid=\"degree-view\">\n                <Container>\n                    \n                    <Row xs={2} md={2}>\n                        \n                        {Object.entries(SEMESTER_MAP_TO_PRINT).map(([key, value]) =>\n                            <Col key={key}>\n                                <SemesterComp\n                                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                    SEMESTER_MAP={SEMESTER_MAP}\n                                    courseList={value}\n                                    setSemesterSelect={setSemesterSelect}\n                                    semesterSelect={key}\n                                    setSemesterHeader={setSemesterHeader}\n                                    SET_SELECT_MAP={SET_SELECT_MAP}\n                                    SELECT_MAP={SELECT_MAP}\n                                    buttonList={buttonList}\n                                ></SemesterComp>\n                            </Col>\n                        )}\n                        \n                    </Row>\n                    \n                </Container>\n            </div>\n            <div>\n                <button onClick={removeAllSemesters} data-testid=\"btn-remove-semesters\">Clear All Semesters</button>\n            </div>\n        </div>\n    );\n}\n\n/**\n * \n * \n * DONT DELETE!!!!\nexport function Calender():  JSX.Element {\n    return (\n        <Container>\n            <h2>Calender</h2>\n            <Row>\n                <div className=\"cal-container\">\n                    {Weekdays.map(day => \n                        <div key={day.id}>{day.name}</div>\n                    )}\n                </div>\n            </Row>\n            <Row>\n                <div className = \"cal-background\">\n                    <Col>\n                        <div>\n                            {Hours.map(value =>\n                                <div key={value.id}>{value.time}</div>\n                            )}\n                        </div>\n                    </Col>\n                </div>\n            </Row>\n        </Container>\n    );\n}\n\n\n*/\n\nexport default DegreePlan;\n","import React from \"react\";\nimport { Card,Col, Row, Container, Accordion } from \"react-bootstrap/\";\nimport \"../css/courses.css\";\nimport \"../assets/courses\";\nimport { GrEdit } from \"react-icons/gr\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport courseData from \"../assets/courses\";\nimport { Course } from \"../interfaces/course\";\n\n\nexport default function CourseCard({ course, SET_SAVE_BIN, SAVE_BIN }: {\n    course: Course,\n    SET_SAVE_BIN: (b: Course[]) => void, SAVE_BIN: Course[]\n}): JSX.Element {\n    \n    function editDescription() {\n        <form>\n            <label>\n                Name:\n                <input type=\"text\" name=\"name\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n        </form>;\n    }\n\n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n\n    return (\n        <div>           \n            <Card className=\"card\" style={{ width: \"19rem\" }}>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Card.Title>{course.name}</Card.Title>\n                        </Col>\n                        <Col>\n                            <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                <MdDeleteForever></MdDeleteForever></button>\n                        </Col>                        \n\n                    </Row>\n                </Container>\n                <Card.Body className=\"card-body\">\n                    <Card.Text>\n                        Credits: {course.credits}\n                    </Card.Text>\n                    <Card.Text>\n                        From: {course.timeStart} To: {course.timeEnd}\n                    </Card.Text>\n\n                    <Card.Text>\n                        Days: {course.schedule}\n                    </Card.Text>\n                    <Col className=\"column-dropdown\">\n                    </Col>\n                  \n                    <Col className=\"card-accordion\">\n                        <Accordion>\n                            <Accordion.Item eventKey=\"0\">\n                                <Accordion.Header>Details</Accordion.Header>\n                                <Accordion.Body>\n                                    <button className=\"edit-button\" onClick={() => editDescription()}>\n                                        <GrEdit></GrEdit></button>\n                                    Course description: {course.description}\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        </Accordion>\n                    </Col>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Course } from \"../interfaces/course\";\n\nexport default function ClearBinButton({ SET_SAVE_BIN }: {\n    SET_SAVE_BIN: (b: Course[]) => void\n}): JSX.Element {\n\n    function ClearBin() {\n        SET_SAVE_BIN([]);\n    }\n    \n    return(\n        <button onClick={() => ClearBin()}>Clear Bin</button>\n    );\n}\n","import { AnimatePresence, motion } from \"framer-motion\";\nimport React from \"react\";\nimport { Col, Container, Offcanvas, Row } from \"react-bootstrap\";\n\nimport \"../css/SaveBin.css\";\n\nimport courseData from \"../assets/courses\";\nimport BinCourseCard from \"./BinCourseCard\";\nimport ClearBinButton from \"./ClearBinButton\";\nimport { Course } from \"../interfaces/course\";\n\nexport default function SaveBin({ setBinVisible, binVisible, SET_SAVE_BIN, SAVE_BIN, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null\n}): JSX.Element {\n\n    // const list variable to map out SAVE_BIN useState variable\n    const binListToPrint = SAVE_BIN;\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        // If there are less than 6 courses, add the selected course onto the end of the classList\n        if (SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id])) {\n            alert(`${courseData[id].name} is already added to this semester. Please select another course.`);\n        } else {\n            // for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            //     console.log(key,value);\n            //     if (SEMESTER_MAP[key].includes(courseData[id])) {\n            //         alert(`Warning: ${courseData[id].name} is already added to semester ${key}.`);\n            //     }\n            // }\n\n            // After adding course to the semester, remove it from the save-later bin\n            SEMESTER_MAP[\"\"+semesterSelect].length === 6 ? alert(\"Max number of courses selected for semester.\")\n                : (NEW_SEMESTER_MAP[\"\"+semesterSelect].push(courseData[id]), SET_SEMESTER_MAP(NEW_SEMESTER_MAP),\n                removeCourse(id));\n        }\n\n        \n\n    }\n\n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n    \n    return(\n        <div>\n            <Offcanvas className=\"bin\" show={binVisible} onHide={() => setBinVisible(false)} placement=\"bottom\" scroll={true} backdrop={false}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Save For Later</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body className=\"bin-body\">\n                    <ClearBinButton\n                        SET_SAVE_BIN={SET_SAVE_BIN}\n                    ></ClearBinButton>\n                    <Container>\n                        <Row xs={1} md={3}>\n                            <AnimatePresence>\n                                {binListToPrint.map(binListToPrint =>\n                                    <motion.div\n                                        key={binListToPrint.id}\n                                        drag\n                                        dragConstraints={{\n                                            top: 0,\n                                            bottom: 0,\n                                            right: 0,\n                                            left: 0\n                                        }}\n                                        onDragEnd={() => addCourse(binListToPrint.id)}\n                                        dragElastic={1}\n                                        initial={{ opacity: 0, x: 180 }}\n                                        animate={{ opacity: 1, x: 0 }}\n                                        exit={{ opacity: 0, y: -200, x: 180 }}\n                                        transition={{\n                                            ease: \"easeInOut\",\n                                            duration: 0.4\n                                        }}>\n                                        <Col >\n                                            <BinCourseCard\n                                                course={binListToPrint}\n                                                SET_SAVE_BIN={SET_SAVE_BIN}\n                                                SAVE_BIN={SAVE_BIN}\n                                            ></BinCourseCard>\n                                        </Col>\n                                    </motion.div>\n                                )}\n                            </AnimatePresence>\n                        </Row>\n                    </Container>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport \"../css/AddRemoveSemester.css\";\n\nexport default function AddSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[]\n}): JSX.Element {\n    \n    function addSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        buttonList.push({name: getSemesterName(semesterCount), value: semesterCount});\n        setButtonList(buttonList);\n\n        NEW_SEMESTER_MAP[\"\"+semesterCount] = [];\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        count++;\n        setSemesterCount(count);\n    }\n\n    function getSemesterName(count: number) {\n        let newCount = count;\n        let season = \"\";\n        if (count % 2 !== 0) {\n            newCount = (count+1) / 2;\n            season = \"Fall\";\n        } else {\n            newCount = count/2;\n            season = \"Spring\";\n        }\n\n        return `${season} ${newCount}`;\n\n    }\n\n    return(\n        <button className=\"add_button\" data-testid=\"btn-add-semester\" onClick={() => addSemester()}>Add Semester</button>\n    );\n}","import React from \"react\";\nimport courseData from \"../assets/courses\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport { Course } from \"../interfaces/course\";\nimport \"../css/AddRemoveSemester.css\";\n\nexport default function RemoveSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, setSemesterSelect, setSemesterHeader }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (h: string) => void\n}): JSX.Element {\n    \n    function removeSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        if (count === 2) {\n            alert(\"Can't remove more semesters\");\n        } else {\n\n            // Default to render first semester since it will never be deleted.\n            setSemesterSelect(\"1\");\n            setSemesterHeader(buttonList[0].name);\n\n            // Clear last semester's courses before deletion\n            removeAllCourses();\n\n            // Remove last semester\n            buttonList.pop();\n            setButtonList(buttonList);\n\n            delete NEW_SEMESTER_MAP[semesterCount-1];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n\n            count--;\n            setSemesterCount(count);\n        }\n    }\n\n    function removeAllCourses() {    \n        for (const [key, value] of Object.entries(SEMESTER_MAP[semesterCount-1])) {\n            console.log(key);\n            removePreReq(value);\n        }\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [semesterCount-1]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    function removePreReq(course: Course) {\n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                //console.log(courseName);\n                if(courseName === course.name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n        \n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return(\n        <button className=\"remove_button\" data-testid=\"btn-remove-semester\" onClick={() => removeSemester()}>Remove Semester</button>\n    );\n}","const buttonListInit = [\n    { name: \"Fall 1\", value: 1 },\n    { name: \"Spring 1\", value: 2 },\n    { name: \"Fall 2\", value: 3 },\n    { name: \"Spring 2\", value: 4 },\n    { name: \"Fall 3\", value: 5 },\n    { name: \"Spring 3\", value: 6 },\n    { name: \"Fall 4\", value: 7 },\n    { name: \"Spring 4\", value: 8 },\n];\nexport default buttonListInit;\n","import { AnimatePresence, motion } from \"framer-motion\";\nimport React from \"react\";\nimport { Col, Container, Offcanvas, Row } from \"react-bootstrap\";\n\nimport \"../css/SaveBin.css\";\n\nimport courseData from \"../assets/courses\";\nimport CreateNewCourseCard from \"./BinCourseCard\";\nimport ClearBinButton from \"./ClearBinButton\";\nimport { Course } from \"../interfaces/course\";\n\nexport default function CreateNewCourse({ setNewCourseVisible, newCourseVisible, SET_SAVE_BIN, SAVE_BIN, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: \n    {\n    setNewCourseVisible: (b: boolean) => void, newCourseVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null\n}): JSX.Element {\n\n    // const list variable to map out SAVE_BIN useState variable\n    const binListToPrint = SAVE_BIN;\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        // If there are less than 6 courses, add the selected course onto the end of the classList\n        if (SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id])) {\n            alert(`${courseData[id].name} is already added to this semester. Please select another course.`);\n        } else {\n            // for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            //     console.log(key,value);\n            //     if (SEMESTER_MAP[key].includes(courseData[id])) {\n            //         alert(`Warning: ${courseData[id].name} is already added to semester ${key}.`);\n            //     }\n            // }\n\n            // After adding course to the semester, remove it from the save-later bin\n            SEMESTER_MAP[\"\"+semesterSelect].length === 6 ? alert(\"Max number of courses selected for semester.\")\n                : (NEW_SEMESTER_MAP[\"\"+semesterSelect].push(courseData[id]), SET_SEMESTER_MAP(NEW_SEMESTER_MAP),\n                removeCourse(id));\n        }\n\n        \n\n    }\n\n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n    return(\n        <div>\n            <Offcanvas className=\"bin\" show={newCourseVisible} onHide={() => setNewCourseVisible(false)} placement=\"bottom\" scroll={true} backdrop={false}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Create a New Course</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body className=\"bin-body\">\n                    <ClearBinButton\n                        SET_SAVE_BIN={SET_SAVE_BIN}\n                    ></ClearBinButton>\n                    <Container>\n                        <Row xs={1} md={3}>\n                            <AnimatePresence>\n                                {binListToPrint.map(binListToPrint =>\n                                    <motion.div\n                                        key={binListToPrint.id}\n                                        drag\n                                        dragConstraints={{\n                                            top: 0,\n                                            bottom: 0,\n                                            right: 0,\n                                            left: 0\n                                        }}\n                                        onDragEnd={() => addCourse(binListToPrint.id)}\n                                        dragElastic={1}\n                                        initial={{ opacity: 0, x: 180 }}\n                                        animate={{ opacity: 1, x: 0 }}\n                                        exit={{ opacity: 0, y: -200, x: 180 }}\n                                        transition={{\n                                            ease: \"easeInOut\",\n                                            duration: 0.4\n                                        }}>\n                                        <Col >\n                                            <CreateNewCourseCard\n                                                course={binListToPrint}\n                                                SET_SAVE_BIN={SET_SAVE_BIN}\n                                                SAVE_BIN={SAVE_BIN}\n                                            ></CreateNewCourseCard>\n                                        </Col>\n                                    </motion.div>\n                                )}\n                            </AnimatePresence>\n                        </Row>\n                    </Container>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport \"../css/App.css\";\n\n\nimport { Board } from \"../components/Board\";\nimport DisplayCourses from \"../components/DisplayCourses\";\nimport SideMenu from \"../components/SideMenu\";\nimport DegreePlan from \"../components/DegreePlan\";\nimport { Course } from \"../interfaces/course\";\nimport SaveBin from \"./SaveBin\";\nimport AddSemesterButton from \"./AddSemesterButton\";\nimport RemoveSemesterButton from \"./RemoveSemesterButton\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport buttonListInit from \"../assets/buttonList\";\nimport CreateNewCourse from \"./CreateNewCourse\";\n\nfunction MainPage({ visibleView, setVisibleView }: {\n    setVisibleView: (s: string | null) => void, visibleView: string | null\n}): JSX.Element {\n    const [semesterSelect, setSemesterSelect] = useState<string | null>(\"1\");\n    const [semesterHeader, setSemesterHeader] = useState<string>(\"Fall 1\");\n\n    const [newCourseVisible, setNewCourseVisible] = useState<boolean>(false);\n    //Pre-req Check Variables\n    \n    // Bin Variables\n    const [binVisible, setBinVisible] = useState<boolean>(false);\n    const SAVE_BIN_INIT: Course[] = [];\n    const [SAVE_BIN, SET_SAVE_BIN] = useState<Course[]>(SAVE_BIN_INIT);\n\n    const [semesterCount, setSemesterCount] = useState<number>(9);\n    const [buttonList, setButtonList] = useState<ButtonList[]>(buttonListInit);\n   \n    const SEMESTER_MAP_INIT: Record<string, Course[]> = {\n        \"1\": [],\n        \"2\": [],\n        \"3\": [],\n        \"4\": [],\n        \"5\": [],\n        \"6\": [],\n        \"7\": [],\n        \"8\": [],\n    };\n    const [SEMESTER_MAP, SET_SEMESTER_MAP] = useState<Record<string, Course[]>>(SEMESTER_MAP_INIT);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                UD CIS Scheduler\n                <p>Srinath Venkatesh, Elliot Tingey, Geoffrey Linderman</p>\n                \n                \n            </header>\n            <section className=\"cell-left\">\n                <p>Menu</p>\n                <SideMenu\n                    setVisibleView={setVisibleView}\n                ></SideMenu>\n            </section>\n            <section className=\"cell-main\">\n\n                <RemoveSemesterButton\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                ></RemoveSemesterButton>\n                \n                <AddSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                ></AddSemesterButton>\n\n                \n                { visibleView === \"2\" && <Board\n                    semesterHeader={semesterHeader}\n                    setSemesterHeader={setSemesterHeader}\n                    setSemesterSelect={setSemesterSelect}\n                    semesterSelect={semesterSelect}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                    binVisible={binVisible}\n                    buttonList={buttonList}\n                ></Board> }\n                \n                { visibleView === \"3\" && <DegreePlan\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    buttonList={buttonList}\n                ></DegreePlan> }\n                \n            </section>\n            <section className=\"cell-right\">\n                { (visibleView === \"2\" || visibleView === \"3\") &&  <DisplayCourses\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    semesterSelect={semesterSelect}\n                    setBinVisible={setBinVisible}\n                    binVisible={binVisible}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                    newCourseVisible={newCourseVisible}\n                    setNewCourseVisible={setNewCourseVisible}\n                ></DisplayCourses> }            \n            </section>\n\n            <SaveBin\n                setBinVisible={setBinVisible}\n                binVisible={binVisible}\n                SET_SAVE_BIN={SET_SAVE_BIN}\n                SAVE_BIN={SAVE_BIN}\n                SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                SEMESTER_MAP={SEMESTER_MAP}\n                semesterSelect={semesterSelect}\n            ></SaveBin>\n\n            <CreateNewCourse\n                setNewCourseVisible={setNewCourseVisible}\n                newCourseVisible={newCourseVisible}\n                SET_SAVE_BIN={SET_SAVE_BIN}\n                SAVE_BIN={SAVE_BIN}\n                SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                SEMESTER_MAP={SEMESTER_MAP}\n                semesterSelect={semesterSelect}\n            ></CreateNewCourse>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from \"react\";\n\nimport \"../css/LandingPage.css\";\n\nexport default function LandingPage({ setVisibleView }: {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    function changeView() {\n        setVisibleView(\"2\");\n        //setTimeout(() => setVisibleView(\"2\"), 2000);\n    }\n\n    return(\n        <div className=\"home\">\n            <div className=\"centered\">\n                <h1>UD CIS Scheduler</h1>\n                <h2>Start Building Your Plan</h2>\n                <button data-testid=\"enter-main\" onClick={() => changeView()}>Enter</button>\n            </div>\n        </div>\n    );\n\n}","import React, { useState } from \"react\";\nimport \"./css/App.css\";\n\nimport MainPage from \"./components/MainPage\";\nimport LandingPage from \"./components/LandingPage\";\n\nfunction App(): JSX.Element {\n    const [visibleView, setVisibleView] = useState<string | null>(\"0\"); // Changes the different board views\n\n    return (\n        <div>\n            \n            {visibleView === \"0\" && <LandingPage\n                setVisibleView={setVisibleView}\n            ></LandingPage> }\n        \n            {visibleView !== \"0\" && <MainPage\n                setVisibleView={setVisibleView}\n                visibleView={visibleView}\n            ></MainPage> }\n        \n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}