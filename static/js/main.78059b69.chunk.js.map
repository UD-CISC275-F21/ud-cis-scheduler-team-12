{"version":3,"sources":["assets/stateInitializers/semesterMap.ts","assets/stateInitializers/buttonList.ts","assets/courses.ts","components/TextInput.tsx","components/TitleInput.tsx","components/Card_Components/CourseComp.tsx","components/Views/ClearSemesterButton.tsx","assets/images/spiderman_meme.jpeg","components/Views/ClearAllSemesterButton.tsx","components/Views/Board.tsx","components/Right_Menu/SearchBar.tsx","components/Right_Menu/DisplayCourses.tsx","components/Left_Menu/SideMenu.tsx","assets/stateInitializers/radioToggle.ts","components/Card_Components/SemesterComp.tsx","components/Views/DegreePlan.tsx","components/Card_Components/BinCourseCard.tsx","components/Save_Later_Bin/ClearBinButton.tsx","components/Save_Later_Bin/SaveBin.tsx","components/Save_Load_Semesters/SaveButton.tsx","components/Save_Load_Semesters/ClearSavedSemestersButton.tsx","components/Save_Load_Semesters/AccessSavedSemestersButton.tsx","components/Add_Remove_Semesters/AddSemesterButton.tsx","components/Add_Remove_Semesters/RemoveSemesterButton.tsx","components/Save_Load_Semesters/SelectedSaveHeader.tsx","components/MainPage.tsx","components/LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SEMESTER_MAP_INIT","buttonListInit","name","value","courseData","TextInput","setInput","className","type","placeholder","onChange","event","target","TitleInput","CourseComp","course","SET_SEMESTER_MAP","SEMESTER_MAP","semesterSelect","useState","input","visible","setVisible","description","setDescription","title","setTitle","titleVisible","setTitleVisible","updateColor","preReqCheck","OverlayTrigger","trigger","show","Object","values","preReq","every","placement","indexOf","overlay","Popover","id","keys","filter","courseName","map","Card","style","width","color","Container","Row","Col","Title","onClick","NEW_SEMESTER_MAP","key","console","log","forEach","entries","item","length","removeCourse","Body","Text","credits","timeStart","timeEnd","schedule","Accordion","Item","eventKey","Header","ClearSemesterButton","removePreReq","ClearAllSemesterButton","margin","Board","setSemesterSelect","setSemesterHeader","semesterHeader","SET_SAVE_BIN","SAVE_BIN","binVisible","buttonList","classListToPrint","buttonToggle","checkPreReqWarning","flag","ToggleButtonGroup","val","radio","idx","ToggleButton","variant","xs","md","AnimatePresence","motion","div","drag","dragConstraints","top","bottom","right","left","onDragEnd","includes","Swal","fire","text","icon","imageUrl","SpiderMan","dragElastic","initial","opacity","x","animate","exit","y","transition","ease","duration","SearchBar","setQuery","DisplayCourses","setBinVisible","query","addCourse","foundCourse","findCourseInSemester","foundCourseInPlan","findCourseInEntirePlan","push","DropdownButton","Dropdown","as","post","toLowerCase","flush","SideMenu","setVisibleView","Nav","justify","defaultActiveKey","onSelect","Link","SELECT_MAP_INIT","SemesterComp","courseList","SET_SELECT_MAP","SELECT_MAP","semesterIndex","selectToggle","NEW_SELECT_MAP","Table","scope","DegreePlan","SEMESTER_MAP_TO_PRINT","BinCourseCard","ClearBinButton","SaveBin","binListToPrint","Offcanvas","onHide","scroll","backdrop","closeButton","SaveButton","saveSemester","findPreReqErrorInEntirePlan","showCancelButton","then","result","localStorage","setItem","JSON","stringify","retrievedObject","getItem","parse","ClearSavedSemestersButton","showDenyButton","confirmButtonText","denyButtonText","isConfirmed","clear","isDenied","AccessSavedSemesters","setSemesterCount","semesterCount","setButtonList","setSelectedSave","loadSave","pop","removeAllCourses","parsedObject","count","numberOfVisibleSemesters","semesterCountBuffer","i","getSemesterName","mapKey","objKey","addSemester","addLoadedSave","getNumberOfSemesters","newCount","season","Toggle","Menu","display","removeItem","deleteSavedSemester","AddSemesterButton","RemoveSemesterButton","removeSemester","SelectedSaveHeader","selectedSave","MainPage","visibleView","LandingPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78059b69.chunk.js","sourcesContent":["import { Course } from \"../../interfaces/course\";\n\nconst SEMESTER_MAP_INIT: Record<string, Course[]> = {\n    \"1\": [],\n    \"2\": [],\n    \"3\": [],\n    \"4\": [],\n    \"5\": [],\n    \"6\": [],\n    \"7\": [],\n    \"8\": [],\n};\nexport default SEMESTER_MAP_INIT;\n","const buttonListInit = [\n    { name: \"Fall 1\", value: 1 },\n    { name: \"Spring 1\", value: 2 },\n    { name: \"Fall 2\", value: 3 },\n    { name: \"Spring 2\", value: 4 },\n    { name: \"Fall 3\", value: 5 },\n    { name: \"Spring 3\", value: 6 },\n    { name: \"Fall 4\", value: 7 },\n    { name: \"Spring 4\", value: 8 },\n];\nexport default buttonListInit;\n","import { Course } from \"../interfaces/course\";\n\nconst courseData: Course[] = [\n    {\n        \"id\": 0,\n        \"name\": \"CISC 100\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"CISC 200\",\n        \"timeStart\": 1400,\n        \"timeEnd\": 1500,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CISC 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"CISC 300\",\n        \"timeStart\": 1200,\n        \"timeEnd\": 1300,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Science 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CISC 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"MATH 100\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1630,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"MATH 200\",\n        \"timeStart\": 1330,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"ENGL 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"CPEG 100\",\n        \"timeStart\": 1700,\n        \"timeEnd\": 1800,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"CPEG 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 100\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"CPEG 300\",\n        \"timeStart\": 900,\n        \"timeEnd\": 955,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Engineering 300, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 200\": false, \"MATH 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"CPEG 400\",\n        \"timeStart\": 1600,\n        \"timeEnd\": 1730,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CPEG 300\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"MATH 300\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Mathematics 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"MATH 400\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Mathematics 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"MATH 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"CPEG 355\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Computer Engineering 355, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"CPEG 300\": false, \"CISC 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"CISC 400\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1055,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Computer Science 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"CISC 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"ENGL 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1230,\n        \"schedule\": \"TR\",\n        \"description\": \"This is English 200, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 100\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"ENGL 300\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1355,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 300, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 200\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"ENGL 400\",\n        \"timeStart\": 1530,\n        \"timeEnd\": 1625,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is English 400, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {\"ENGL 300\": false},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"HIST 100\",\n        \"timeStart\": 1000,\n        \"timeEnd\": 1130,\n        \"schedule\": \"TR\",\n        \"description\": \"This is History 100, section 10.\",\n        \"credits\": 3,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"PHYS 100\",\n        \"timeStart\": 1300,\n        \"timeEnd\": 1430,\n        \"schedule\": \"TR\",\n        \"description\": \"This is Physics 100, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {},\n        \"preReqCheck\": \"black\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"PHYS 200\",\n        \"timeStart\": 1100,\n        \"timeEnd\": 1155,\n        \"schedule\": \"MWF\",\n        \"description\": \"This is Physics 200, section 10.\",\n        \"credits\": 4,\n        \"preReq\": {\"PHYS 100\": false, \"MATH 200\": false},\n        \"preReqCheck\": \"black\"\n    }\n];\nexport default courseData;\n","import React from \"react\";\nimport \"../css/TextInput.css\";\n\n\nexport default function TextInput({ setInput }: {\n    setInput: (q: string) => void,\n}): JSX.Element {\n    return (\n        <div>\n            <input className=\"text_input\" type=\"description\" placeholder=\"Enter Description\" onChange={event => setInput(event.target.value)}/>\n        </div>\n    );\n}\n\n","import React from \"react\";\nimport \"../css/TextInput.css\";\n\n\nexport default function TitleInput({ setInput }: {\n    setInput: (q: string) => void,\n}): JSX.Element {\n    return (\n        <div>\n            <input className=\"text_input\" data-testId=\"input-title\" type=\"title\" placeholder=\"Enter Title\" onChange={event => setInput(event.target.value)}/>\n        </div>\n    );\n}\n\n","// Source Imports\nimport React, { useState } from \"react\";\nimport { Card,Col, Row, Container, Accordion, OverlayTrigger, Popover } from \"react-bootstrap/\";\nimport { GrEdit } from \"react-icons/gr\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport TextInput from \"../TextInput\";\nimport TitleInput from \"../TitleInput\";\n\n// Design Imports\nimport \"../../css/courses.css\";\n\n// Breadcrumbs:\n// Main Page / Board / CourseComp - Course Card that holds information on course\nexport default function CourseComp({ course, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    course: Course,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null\n}):  JSX.Element {\n    \n    const [input, setInput] = useState<string>(\"\");\n    const [visible, setVisible] = useState<number>(0);\n    const [description, setDescription] = useState<string>(course.description);\n    const [title, setTitle] = useState<string>(course.name);\n    const [titleVisible, setTitleVisible] = useState<number>(0);\n\n\n    function editTitle() {\n        setTitleVisible(1);\n    }\n\n    function submitTitle() {\n        setTitle(input);\n        setTitleVisible(0);\n    }\n\n    function editDescription() {\n\n        setVisible(1);\n        //alert(input);\n    }\n\n    function submitDescription() {\n        setDescription(input);\n        setVisible(0);\n    }\n    \n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                //console.log(courseName);\n                if(courseName === courseData[id].name) {\n                    console.log(`found ${courseName}`);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <div>           \n            <OverlayTrigger trigger={[\"hover\", \"focus\"]} show={ Object.values(course.preReq).every(course => course === true) ? false : true } placement={ SEMESTER_MAP[\"\"+semesterSelect].indexOf(course) > 2 ? \"bottom\" : \"top\" } overlay={\n                <Popover className=\"popover\" id=\"tooltip-preReq\">Missing: {Object.keys(course.preReq).filter(courseName => \n                    course.preReq[courseName] === false).map(course => \n                    <div key={course}>{course}</div>)} </Popover>}>\n                <Card className=\"card\" data-testid=\"course-card\" style={{ width: \"100%\", color: updateColor(course) }}>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Card.Title>{title}</Card.Title>\n                                { titleVisible === 1 && <TitleInput \n                                    setInput={setInput}\n                                ></TitleInput> }\n                                {titleVisible === 1 && <button onClick={() => submitTitle()}>Submit</button>\n                                }\n                            \n                                <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                    <MdDeleteForever></MdDeleteForever></button>\n                                <button className=\"edit-button\" data-testid=\"title-edit-btn\" onClick={() => editTitle()}><GrEdit></GrEdit></button>\n                            </Col>                        \n                        </Row>\n                    </Container>\n                    <Card.Body className=\"card-body\">\n                        <Card.Text>\n                            Credits: {course.credits}\n                        </Card.Text>\n                        <Card.Text>\n                            From: {course.timeStart} To: {course.timeEnd}\n                        </Card.Text>\n                        \n\n                        <Card.Text>\n                            Days: {course.schedule}\n                        </Card.Text>\n                        <Col className=\"column-dropdown\">\n                        </Col>\n                    \n                        <Col className=\"card-accordion\">\n                            <Accordion>\n                                <Accordion.Item eventKey=\"0\">\n                                    <Accordion.Header>Details</Accordion.Header>\n                                    <Accordion.Body>\n                                        {description}\n                                        { visible === 1 && <TextInput \n                                            setInput={setInput}\n                                        ></TextInput>}\n                                        \n                                        { visible === 0 && <button className=\"edit-desc-button\" onClick={() => editDescription()}><GrEdit></GrEdit></button> }\n                                        { visible === 1 && <button className=\"\" onClick={() => submitDescription()}>Enter</button> }   \n                                        \n                                    </Accordion.Body>\n                                </Accordion.Item>\n                            </Accordion>\n                        </Col>\n                    </Card.Body>\n                </Card>\n            </OverlayTrigger>\n        </div>    \n    );\n}","// Source Imports\nimport React from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / Board / ClearSemesterButton\nexport default function ClearSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, \n    SEMESTER_MAP: Record<string, Course[]>, semesterSelect: string | null\n}): JSX.Element {\n\n    function removeAllCourses() {    \n        for (const [key, value] of Object.entries(SEMESTER_MAP[\"\"+semesterSelect])) {\n            console.log(key);\n            removePreReq(value);\n        }\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    function removePreReq(course: Course) {\n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                //console.log(courseName);\n                if(courseName === course.name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <button onClick={removeAllCourses} data-testid=\"btn-clear-semester\">Clear Current Semester</button>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/spiderman_meme.4235d597.jpeg\";","// Source Imports\nimport React from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\nexport default function ClearAllSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP}: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>\n}): JSX.Element {\n    \n    function removeAllSemesters() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP}; \n        for (const [key] of Object.entries(NEW_SEMESTER_MAP)) {\n            Object.values(NEW_SEMESTER_MAP[key]).forEach(course => {\n                removePreReq(course);\n            });\n            NEW_SEMESTER_MAP[key]=[];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        }\n    }\n\n    function removePreReq(course: Course) {\n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                //console.log(courseName);\n                if(courseName === course.name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <button style={{margin: \"5%\"}} onClick={removeAllSemesters}>Clear All Semesters</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Col, Row, Container, ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport Swal from \"sweetalert2\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport CourseComp from \"../Card_Components/CourseComp\";\nimport ClearSemesterButton from \"./ClearSemesterButton\";\n\n// Design Imports\nimport \"../../css/board.css\";\nimport SpiderMan from \"../../assets/images/spiderman_meme.jpeg\";\nimport ClearAllSemesterButton from \"./ClearAllSemesterButton\";\n\n// Breadcrumbs:\n// Main Page / Board - renders each semester and its classes\nexport function Board({ setSemesterSelect, semesterSelect, SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterHeader, semesterHeader, SET_SAVE_BIN, SAVE_BIN, binVisible, buttonList}: {\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void, semesterHeader: string,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    binVisible: boolean,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    // const list variable to map out classList useState variable\n    const classListToPrint = SEMESTER_MAP[\"\"+semesterSelect];\n\n    const buttonToggle = \"\"+semesterSelect;\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        if (binVisible){\n            if (SAVE_BIN.includes(courseData[id])) {\n                Swal.fire({\n                    title: \"Duplicate Course!\",\n                    text: `${courseData[id].name} is already added to your bin. It will now be removed from the semester.`,\n                    icon: \"error\",\n                    imageUrl: SpiderMan\n                });\n            } else {\n                SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n            }\n        }\n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                // console.log(courseName);\n                if(courseName === courseData[id].name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function handleSelect (val: number) {\n        setSemesterSelect(\"\"+val);\n        setSemesterHeader(buttonList[val-1].name);\n    }\n\n    function checkPreReqWarning(key: string) {\n        let flag = false;\n        SEMESTER_MAP[key].forEach(course => {\n            if(course.preReqCheck === \"red\"){\n                flag = true;\n            }\n        });\n        return flag;\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return (\n        <div data-testid=\"semester-view\">\n            <div>\n                <h2>Semester View - {semesterHeader}</h2>\n                <ToggleButtonGroup className=\"semester-button\" name=\"options\" value={+buttonToggle} onChange={handleSelect}>\n                    {buttonList.map((radio, idx) =>\n                        <ToggleButton\n                            data-testid=\"btn-semester\"\n                            key={idx}\n                            id={`radio-${idx}`}\n                            type=\"radio\"\n                            variant={ checkPreReqWarning(\"\"+radio.value) ? \"outline-warning\" : SEMESTER_MAP[\"\"+radio.value].length > 0 ? \"outline-success\" :  \"outline-danger\" }\n                            name=\"radio\"\n                            value={radio.value}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    )}\n                </ToggleButtonGroup>\n            </div>\n\n            <div>\n                <Container data-testid=\"board\">\n                    <Row data-testid=\"board-row-1\" xs={1} md={3}>\n                        <AnimatePresence>\n                            {classListToPrint.map(classListToPrint =>\n                                <motion.div\n                                    key={classListToPrint.id}\n                                    drag\n                                    dragConstraints={{\n                                        top: 0,\n                                        bottom: 0,\n                                        right: 0,\n                                        left: 0\n                                    }}\n                                    onDragEnd={() => removeCourse(classListToPrint.id)}\n                                    dragElastic={1}\n                                    initial={{ opacity: 0, x: 180 }}\n                                    animate={{ opacity: 1, x: 0 }}\n                                    exit={{ opacity: 0, y: -200, x: 180 }}\n                                    transition={{\n                                        ease: \"easeInOut\",\n                                        duration: 0.4\n                                    }}>\n                                    <Col >\n                                        <CourseComp\n                                            course={classListToPrint}\n                                            SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                            SEMESTER_MAP={SEMESTER_MAP}\n                                            semesterSelect={semesterSelect}\n                                        ></CourseComp>\n                                    </Col>\n                                </motion.div>\n                            )}\n                        </AnimatePresence>\n                    </Row>\n                </Container>\n                { SEMESTER_MAP[\"\"+semesterSelect].length > 0 && \n                <div>\n                    <ClearSemesterButton\n                        SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                        SEMESTER_MAP={SEMESTER_MAP}\n                        semesterSelect={semesterSelect}\n                    ></ClearSemesterButton>\n                    <ClearAllSemesterButton\n                        SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                        SEMESTER_MAP={SEMESTER_MAP}\n                    ></ClearAllSemesterButton>\n                </div> }\n            </div>\n\n        </div>\n    );\n}","import React from \"react\";\n\nimport \"../../css/SearchBar.css\";\n\n// Breadcrumbs:\n// Main Page / DisplayCourses / SearchBar\nexport default function SearchBar({ setQuery }: {\n    setQuery: (q: string) => void\n}): JSX.Element {\n    return(\n        <div>\n            <input className=\"form__field\" data-testid=\"search-bar\" placeholder=\"Enter Course\" onChange={event => setQuery(event.target.value)}/>\n        </div>\n    );\n}\n","// Source Imports\nimport React, { useState } from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { MdAdd } from \"react-icons/md\";\nimport { Accordion, Col, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { motion } from \"framer-motion\";\nimport { Course } from \"../../interfaces/course\";\nimport Swal from \"sweetalert2\";\n\n// Component Imports\nimport SearchBar from \"./SearchBar\";\n\n// Design Imports\nimport \"../../css/DisplayCourses.css\";\nimport SpiderMan from \"../../assets/images/spiderman_meme.jpeg\";\n\n// Breadcrumbs:\n// Main Page / DisplayCourses - displays list of scrollable courses on right hand side\nexport default function DisplayCourses({ SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect, setBinVisible, binVisible, SET_SAVE_BIN, SAVE_BIN }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null,\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n}): JSX.Element {\n\n    const [query, setQuery] = useState<string>(\"\");\n    \n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        const foundCourse = findCourseInSemester(id);\n        const foundCourseInPlan = findCourseInEntirePlan(id);\n        \n        // If bin is open, add courses to bin\n        if (binVisible){\n            if (SAVE_BIN.includes(courseData[id])) {\n                Swal.fire({\n                    title: \"Duplicate Course!\",\n                    text: `${courseData[id].name} is already added to your bin. Please select another course.`,\n                    icon: \"error\",\n                    imageUrl: SpiderMan\n                });\n            } else {\n                SET_SAVE_BIN([...SAVE_BIN, courseData[id]]);\n            }\n        } else {\n            if (foundCourse || foundCourseInPlan) {\n                foundCourse ?\n                    Swal.fire({\n                        title: \"Duplicate Course!\",\n                        text: `${courseData[id].name} is already added to this semester. Please select another course.`,\n                        icon: \"error\",\n                        imageUrl: SpiderMan\n                    }) :\n                    Swal.fire({\n                        title: \"Duplicate Course!\",\n                        text: `${courseData[id].name} is already added to your plan. Please select another course.`,\n                        icon: \"error\",\n                        imageUrl: SpiderMan\n                    });\n            } else {\n                //  PREREQ MET IN PRIOR SEMESTER\n                if (Object.keys(courseData[id].preReq).length > 0){\n                    console.log(courseData[id].preReq);\n                    if (Object.values(courseData[id].preReq).every(course => course === true)){\n                        courseData[id].preReqCheck = \"black\";\n                    } else {\n                        Swal.fire(\n                            \"Pre-Req Error!\",\n                            \"Warning: Pre-Reqs not met 🤔.\",\n                            \"error\"\n                        );\n                        courseData[id].preReqCheck = \"red\";\n                    }\n                    updateColor(courseData[id]);\n                }\n\n                if (SEMESTER_MAP[\"\" + semesterSelect].length === 6) {\n                    Swal.fire(\n                        \"Getting Studious!\",\n                        \"Warning: Max number of courses selected for semester 📚.\",\n                        \"error\"\n                    );\n                } else {\n                    for (const [key, value] of Object.entries(courseData)) {\n                        console.log([key,value]);\n                        Object.keys(value.preReq).forEach(courseName => {\n                            //console.log(courseName);\n                            if(courseName === courseData[id].name) {\n                                console.log(courseName);\n                                value.preReq[courseName] = true;\n                            }\n                        });\n                    }\n                    NEW_SEMESTER_MAP[\"\" + semesterSelect].push(courseData[id]);\n                    SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n                }\n\n                for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n                    console.log([key,value]);\n                    SEMESTER_MAP[key].forEach(item => {\n                        if(Object.keys(item.preReq).length > 0) {\n                            if (Object.values(item.preReq).every(course => course === true)){\n                                item.preReqCheck = \"black\";\n                            } else {\n                                item.preReqCheck = \"red\";\n                            }\n                            updateColor(item);\n                        }\n                    });\n                }\n            }\n        }   \n    }\n    \n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n    \n    function findCourseInSemester(id: number) {\n        return SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id]);\n    }\n\n    function findCourseInEntirePlan(id: number) {\n        let flag = false;\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(course => {\n                if (course.id === id) {\n                    flag = true;\n                }\n            });\n        });\n\n        return flag;\n    }\n    \n\n\n    function showBin() {\n        setBinVisible(!binVisible);\n    }\n    \n    return (\n        <div>\n            <div className=\"menu-button\">\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Course Options\">\n                    <Dropdown.Item as=\"button\" onClick={() => showBin()}>Save Later Bin</Dropdown.Item>\n                </DropdownButton>\n            </div>\n            <SearchBar\n                setQuery={setQuery}\n            ></SearchBar>\n            <ul className=\"list-group\">\n                {courseData.filter(post => {\n                    if (query === \"\") {\n                        return post;\n                    } else if (post.name.toLowerCase().includes(query.toLowerCase())) {\n                        return post;\n                    }\n                }).map(courseData => \n                    <motion.div\n                        drag\n                        dragConstraints={{\n                            top: 0,\n                            bottom: 0,\n                            right: 0,\n                            left: 0\n                        }}\n                        onDragEnd={() => addCourse(courseData.id)}\n                        dragElastic={1}\n                        key={courseData.id}\n                        initial={{ opacity: 0, x: 180 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{\n                            ease: \"easeInOut\",\n                            duration: 1,\n                        }}>\n                        <li className=\"course\" key={courseData.id}>{courseData.name}\n                            <button className=\"add-button\" data-testid={courseData.name} onClick={() => addCourse(courseData.id)}>\n                                <MdAdd />\n                            </button>\n                            { Object.keys(courseData.preReq).length > 0 && <Col className=\"prereq-accordion\">\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"0\">\n                                        <Accordion.Header>Prerequisites</Accordion.Header>\n                                        <Accordion.Body>\n                                            {Object.keys(courseData.preReq).map(course => \n                                                <div key={course}>{course}</div>\n                                            )}\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                                <p></p>\n                            </Col> }\n                        </li>\n                    </motion.div>\n                )}\n            </ul>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap/\";\n\n// Breadcrumbs:\n// Main Page / SideMenu - left hand side menu to change views\nexport default function SideMenu( {setVisibleView} : {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    const handleSelect = (eventKey: string | null) => setVisibleView(eventKey);\n\n    return (\n        <Nav justify variant=\"pills\" className=\"flex-column\" defaultActiveKey=\"2\" onSelect={handleSelect}>\n            <Nav.Item>\n                <Nav.Link eventKey=\"2\">Semester View</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link data-testid=\"degree-view-nav\" eventKey=\"3\">Degree Plan View</Nav.Link>\n            </Nav.Item>\n        </Nav>\n    );\n}","const SELECT_MAP_INIT = {\n    \"1\": false,\n    \"2\": false,\n    \"3\": false,\n    \"4\": false,\n    \"5\": false,\n    \"6\": false,\n    \"7\": false,\n    \"8\": false\n};\nexport default SELECT_MAP_INIT;\n","// Source Imports\nimport React from \"react\";\nimport { Card, Table } from \"react-bootstrap/\";\nimport { BsEraserFill } from \"react-icons/bs\";\nimport { ImCross, ImRadioChecked, ImRadioUnchecked } from \"react-icons/im\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Design Imports\nimport \"../../css/courses.css\";\n\n// Breadcrumbs:\n// Main Page / DegreePlan / SemesterComp - card that holds all courses in a semester in table form\nfunction SemesterComp({ SET_SEMESTER_MAP, SEMESTER_MAP, courseList, setSemesterSelect, semesterSelect, setSemesterHeader, SET_SELECT_MAP, SELECT_MAP, buttonList }: {\n    courseList: Course[],\n    setSemesterSelect: (s: string | null) => void, semesterSelect: string | null,\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterHeader: (s: string) => void,\n    SET_SELECT_MAP: (s: Record<string, boolean>) => void, SELECT_MAP: Record<string, boolean>,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    const semesterIndex = \"\"+semesterSelect;\n\n    function selectToggle(key: string) {\n        const NEW_SELECT_MAP = {...SELECT_MAP};\n        \n        Object.keys(NEW_SELECT_MAP).forEach(item => {\n            item === key ? NEW_SELECT_MAP[+item] = true : NEW_SELECT_MAP[+item] = false;\n            SET_SELECT_MAP(NEW_SELECT_MAP);\n        });\n\n        setSemesterSelect(key);\n        handleSelect(key);\n    }\n\n    function handleSelect (val: string) {\n        setSemesterHeader(buttonList[+val-1].name);\n    }\n\n    function removeCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        NEW_SEMESTER_MAP[\"\"+semesterSelect] = NEW_SEMESTER_MAP[\"\"+semesterSelect].filter(item => item !== courseData[id]);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        setSemesterSelect(semesterSelect);\n    }\n\n    function removeAllCourses() {\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [\"\"+semesterSelect]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    return (\n        <div>\n            <Card className=\"card\" style={{ width: \"100%\" }}>\n                <button className=\"delete-button\" onClick={removeAllCourses}>\n                    <BsEraserFill></BsEraserFill>\n                </button>\n                { !SELECT_MAP[+semesterIndex] && <button className=\"select-button-off\" data-testid=\"select-button\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioUnchecked></ImRadioUnchecked> \n                </button>}\n                { SELECT_MAP[+semesterIndex] && <button className=\"select-button-on\" onClick={() => selectToggle(\"\"+semesterSelect)}>\n                    <ImRadioChecked></ImRadioChecked>\n                </button>}\n                <Card.Body className=\"card-body\">\n                    \n                    <Table>\n                        <thead>\n                            <th className=\"semester-title\">{buttonList[+semesterIndex-1].name}</th>\n                            <tr>\n                                <th>Course</th>\n                                <th scope=\"col\">Credit(s)</th>\n                            </tr>\n                        </thead>\n                        <tbody data-testid=\"semester-table\">\n                            {courseList.map((course, id) =>\n\n                                <tr key={id} data-testid=\"semester-comp-card\">\n                                    <th>{course.name}</th>\n                                    <td>{course.credits}</td>\n                                    <button className=\"delete-course\" onClick={() => removeCourse(course.id)}>\n                                        <ImCross></ImCross>\n                                    </button>\n                                </tr>\n\n                            )}\n                        </tbody>\n                    </Table>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default SemesterComp;\n","// Source Imports\nimport React, { useState } from \"react\";\nimport { Row, Col, Container} from \"react-bootstrap\";\nimport SELECT_MAP_INIT from \"../../assets/stateInitializers/radioToggle\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport SemesterComp from \"../Card_Components/SemesterComp\";\nimport ClearAllSemesterButton from \"./ClearAllSemesterButton\";\n\n// Design Imports\nimport \"../../css/calender.css\";\n\n// Breadcrumbs:\n// Main Page / DegreePlan - shows all semesters at once in the Degree Plan View\nexport function DegreePlan({ SET_SEMESTER_MAP ,SEMESTER_MAP, setSemesterSelect, setSemesterHeader, buttonList }: {\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (s: string) => void,\n    buttonList: ButtonList[]\n}):  JSX.Element {\n\n    const [SELECT_MAP, SET_SELECT_MAP] = useState<Record<string, boolean>>(SELECT_MAP_INIT);\n    const SEMESTER_MAP_TO_PRINT = {...SEMESTER_MAP};\n\n    return (\n        <div>\n            <h2>Degree Plan View</h2>\n            \n            <div data-testid=\"degree-view\">\n                <Container>\n                    \n                    <Row xs={2} md={2}>\n                        \n                        {Object.entries(SEMESTER_MAP_TO_PRINT).map(([key, value]) =>\n                            <Col key={key}>\n                                <SemesterComp\n                                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                                    SEMESTER_MAP={SEMESTER_MAP}\n                                    courseList={value}\n                                    setSemesterSelect={setSemesterSelect}\n                                    semesterSelect={key}\n                                    setSemesterHeader={setSemesterHeader}\n                                    SET_SELECT_MAP={SET_SELECT_MAP}\n                                    SELECT_MAP={SELECT_MAP}\n                                    buttonList={buttonList}\n                                ></SemesterComp>\n                            </Col>\n                        )}\n                        \n                    </Row>\n                    \n                </Container>\n            </div>\n            <div>\n                <ClearAllSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                ></ClearAllSemesterButton>\n            </div>\n        </div>\n    );\n}\n\nexport default DegreePlan;\n","// Source Imports\nimport React from \"react\";\nimport { Card,Col, Row, Container, Accordion } from \"react-bootstrap/\";\nimport { GrEdit } from \"react-icons/gr\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\n// Design Imports\nimport \"../../css/courses.css\";\n\n// Breadcrumbs:\n// Main Page / SaveBin / BinCourseCard - card rendered to handle adding/removing from the \"save later bin\" (similar to CourseComp)\nexport default function BinCourseCard({ course, SET_SAVE_BIN, SAVE_BIN }: {\n    course: Course,\n    SET_SAVE_BIN: (b: Course[]) => void, SAVE_BIN: Course[]\n}): JSX.Element {\n    \n    function editDescription() {\n        <form>\n            <label>\n                Name:\n                <input type=\"text\" name=\"name\" />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n        </form>;\n    }\n\n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n\n    return (\n        <div>           \n            <Card className=\"card\" style={{ width: \"19rem\" }}>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Card.Title>{course.name}</Card.Title>\n                        </Col>\n                        <Col>\n                            <button className=\"delete-button\" onClick={() => removeCourse(course.id)}>\n                                <MdDeleteForever></MdDeleteForever></button>\n                        </Col>                        \n\n                    </Row>\n                </Container>\n                <Card.Body className=\"card-body\">\n                    <Card.Text>\n                        Credits: {course.credits}\n                    </Card.Text>\n                    <Card.Text>\n                        From: {course.timeStart} To: {course.timeEnd}\n                    </Card.Text>\n\n                    <Card.Text>\n                        Days: {course.schedule}\n                    </Card.Text>\n                    <Col className=\"column-dropdown\">\n                    </Col>\n                  \n                    <Col className=\"card-accordion\">\n                        <Accordion>\n                            <Accordion.Item eventKey=\"0\">\n                                <Accordion.Header>Details</Accordion.Header>\n                                <Accordion.Body>\n                                    <button className=\"edit-button\" onClick={() => editDescription()}>\n                                        <GrEdit></GrEdit></button>\n                                    Course description: {course.description}\n                                </Accordion.Body>\n                            </Accordion.Item>\n                        </Accordion>\n                    </Col>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / SaveBin / ClearBinButton\nexport default function ClearBinButton({ SET_SAVE_BIN }: {\n    SET_SAVE_BIN: (b: Course[]) => void\n}): JSX.Element {\n\n    function ClearBin() {\n        SET_SAVE_BIN([]);\n    }\n    \n    return(\n        <button onClick={() => ClearBin()}>Clear Bin</button>\n    );\n}\n","// Source Imports\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React from \"react\";\nimport { Col, Container, Offcanvas, Row } from \"react-bootstrap\";\nimport Swal from \"sweetalert2\";\nimport courseData from \"../../assets/courses\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport BinCourseCard from \"../Card_Components/BinCourseCard\";\nimport ClearBinButton from \"./ClearBinButton\";\n\n// Design Imports\nimport \"../../css/SaveBin.css\";\nimport SpiderMan from \"../../assets/images/spiderman_meme.jpeg\";\n\n// Breadcrumbs:\n// Main Page / SaveBin - bin that pops up to save courses for later\nexport default function SaveBin({ setBinVisible, binVisible, SET_SAVE_BIN, SAVE_BIN, SET_SEMESTER_MAP, SEMESTER_MAP, semesterSelect }: {\n    setBinVisible: (b: boolean) => void, binVisible: boolean,\n    SET_SAVE_BIN: (s: Course[]) => void, SAVE_BIN: Course[],\n    SET_SEMESTER_MAP: (m: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    semesterSelect: string | null\n}): JSX.Element {\n\n    // const list variable to map out SAVE_BIN useState variable\n    const binListToPrint = SAVE_BIN;\n\n    function addCourse(id: number) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        // If there are less than 6 courses, add the selected course onto the end of the classList\n        if (SEMESTER_MAP[\"\"+semesterSelect].includes(courseData[id])) {\n            Swal.fire({\n                title: \"Duplicate Course!\",\n                text: `${courseData[id].name} is already added to this semester. Please select another course.`,\n                icon: \"error\",\n                imageUrl: SpiderMan\n            });\n        } else {\n            // After adding course to the semester, remove it from the save-later bin\n            SEMESTER_MAP[\"\"+semesterSelect].length === 6 ? \n                Swal.fire(\n                    \"Getting Studious!\",\n                    \"Warning: Max number of courses selected for semester 📚.\",\n                    \"error\"\n                )\n                : (NEW_SEMESTER_MAP[\"\"+semesterSelect].push(courseData[id]), SET_SEMESTER_MAP(NEW_SEMESTER_MAP),\n                removeCourse(id));\n        }\n\n        \n\n    }\n\n    function removeCourse(id: number) {\n        SET_SAVE_BIN(SAVE_BIN.filter(item => item !== courseData[id]));\n    }\n    \n    return(\n        <div>\n            <Offcanvas className=\"bin\" show={binVisible} onHide={() => setBinVisible(false)} placement=\"bottom\" scroll={true} backdrop={false}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Save For Later</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body className=\"bin-body\">\n                    <ClearBinButton\n                        SET_SAVE_BIN={SET_SAVE_BIN}\n                    ></ClearBinButton>\n                    <Container>\n                        <Row xs={1} md={3}>\n                            <AnimatePresence>\n                                {binListToPrint.map(binListToPrint =>\n                                    <motion.div\n                                        key={binListToPrint.id}\n                                        drag\n                                        dragConstraints={{\n                                            top: 0,\n                                            bottom: 0,\n                                            right: 0,\n                                            left: 0\n                                        }}\n                                        onDragEnd={() => addCourse(binListToPrint.id)}\n                                        dragElastic={1}\n                                        initial={{ opacity: 0, x: 180 }}\n                                        animate={{ opacity: 1, x: 0 }}\n                                        exit={{ opacity: 0, y: -200, x: 180 }}\n                                        transition={{\n                                            ease: \"easeInOut\",\n                                            duration: 0.4\n                                        }}>\n                                        <Col >\n                                            <BinCourseCard\n                                                course={binListToPrint}\n                                                SET_SAVE_BIN={SET_SAVE_BIN}\n                                                SAVE_BIN={SAVE_BIN}\n                                            ></BinCourseCard>\n                                        </Col>\n                                    </motion.div>\n                                )}\n                            </AnimatePresence>\n                        </Row>\n                    </Container>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n","import React from \"react\";\nimport Swal from \"sweetalert2\";\nimport { Course } from \"../../interfaces/course\";\n\n// Breadcrumbs:\n// Main Page / SaveButton\nexport default function SaveButton({ SEMESTER_MAP }: {\n    SEMESTER_MAP: Record<string, Course[]>\n}): JSX.Element {\n    \n    function saveSemester() {\n        const preReqError = findPreReqErrorInEntirePlan();\n\n        if (preReqError){\n            Swal.fire(\n                \"Save Error\",\n                \"Error: Cannot save plan due to existing preReq error 🧐.\",\n                \"error\"\n            );\n        } else {\n            Swal.fire({\n                title: \"Give your saved plan a name!\",\n                text: \"Name:\",\n                input: \"text\",\n                showCancelButton: true        \n            }).then((result) => {\n                if (result.value) {\n                    localStorage.setItem(result.value, JSON.stringify(SEMESTER_MAP));\n                    const retrievedObject = localStorage.getItem(result.value);\n                    console.log(\"retrievedObject: \", JSON.parse(\"\"+retrievedObject));\n    \n                    Swal.fire(\n                        \"Saved!\",\n                        `${result.value} is now saved 🚀.`,\n                        \"success\"\n                    );\n    \n                } else {\n                    Swal.fire(\n                        \"Canceled Save\",\n                        \"You did not save your plan 😅.\",\n                        \"info\"\n                    );\n                }\n            });\n        }\n    }\n\n    function findPreReqErrorInEntirePlan() {\n        let flag = false;\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(course => {\n                if (course.preReqCheck === \"red\") {\n                    flag = true;\n                }\n            });\n        });\n        return flag;\n    }\n\n    return(\n        <button onClick={() => saveSemester()}>Save Semester</button>\n    );\n}\n","// Source Imports\nimport React from \"react\";\nimport Swal from \"sweetalert2\";\n\n// Breadcrumbs:\n// Main Page / AccessSavedSemesterButton / ClearSavedSemestersButton\nexport default function ClearSavedSemestersButton(): JSX.Element {\n    \n    function clearAllSavedSemesters() {\n        Swal.fire({\n            title: \"Are you sure you want to delete all of your saved semesters?\",\n            showDenyButton: true,\n            confirmButtonText: \"Delete All Saves\",\n            denyButtonText: \"Don't delete All Saves\",\n            icon: \"warning\"\n        }).then((result) => {\n            /* Read more about isConfirmed, isDenied below */\n            if (result.isConfirmed) {\n                localStorage.clear();\n                console.log(localStorage);\n                Swal.fire(\"All Saved Semesters Deleted 😁!\", \"\", \"success\");\n            } else if (result.isDenied) {\n                Swal.fire(\"Semesters are not Deleted 😮‍💨.\", \"\", \"info\");\n            }\n        });\n        \n    }\n\n    return(\n        <button onClick={() => clearAllSavedSemesters()}>Clear All Saved Semesters</button>\n    );\n}","// Source Imports\nimport React from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { ImCross } from \"react-icons/im\";\nimport Swal from \"sweetalert2\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\n\n// Component Imports\nimport ClearSavedSemestersButton from \"./ClearSavedSemestersButton\";\n\n// Breadcrumbs:\n// Main Page / AccessSavedSemesterButton\nexport default function AccessSavedSemesters({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, setSelectedSave }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    setSelectedSave: (s: string) => void\n}): JSX.Element {\n\n    // Main Load Function\n    function loadSave(key: string) {\n        // Remove all courses and remove pre-req markers.\n        removeAllCourses();\n        \n        // Retrieve Object from localStorage\n        const retrievedObject = localStorage.getItem(key);\n        const parsedObject = JSON.parse(\"\"+retrievedObject) as Record<string, Course[]>;\n\n        // add necessary amount of semesters and courses respectively\n        getNumberOfSemesters(parsedObject);\n\n        setSelectedSave(key);\n    }\n\n    function addLoadedSave(parsedObject: Record<string, Course[]>) {\n        for (const [key, value] of Object.entries(parsedObject)) {\n            console.log(value);\n            Object.values(parsedObject[key]).forEach(course => {\n                addCourse(course.id, key);\n            });\n        }\n    }\n\n    function getNumberOfSemesters(parsedObject: Record<string, Course[]>) {\n        const count = Object.keys(parsedObject).length;\n        const numberOfVisibleSemesters = semesterCount - 1;\n        const semesterCountBuffer: number[] = [];\n        // let buttonListBuffer = buttonList;\n        \n\n        if (numberOfVisibleSemesters < count) {\n            for (let i = numberOfVisibleSemesters; i < count; i++){\n                semesterCountBuffer.push(i+1);\n                console.log(`NUMBER: ${semesterCountBuffer}`);\n            }\n            addSemester(semesterCountBuffer, parsedObject);\n            setSemesterCount(count+1);\n\n        } else {\n            addLoadedSave(parsedObject);\n        }\n        \n        \n        // setButtonList(buttonListBuffer);\n\n        return semesterCountBuffer;\n\n    }\n\n    // I promise this code works... It needs to be cleaned up big time\n    function addSemester(semesterCountBuffer: number[], parsedObject: Record<string, Course[]>) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        semesterCountBuffer.forEach(key => {\n            buttonList.push({name: getSemesterName(key), value: key});\n            NEW_SEMESTER_MAP[\"\"+key] = [];\n            Object.keys(NEW_SEMESTER_MAP).forEach(mapKey => {\n                // console.log(mapKey);\n                Object.keys(parsedObject).forEach(objKey => {\n                    if (\"\"+mapKey === objKey) {\n                        // console.log(`Object key matched: ${mapKey}`);\n                        Object.values(parsedObject[objKey]).forEach(course => {\n                            // console.log(`Found an object ${course.name}`);\n                            if (!NEW_SEMESTER_MAP[mapKey].includes(course)){\n\n                                //  PREREQ MET IN PRIOR SEMESTER\n                                if (Object.keys(courseData[course.id].preReq).length > 0){\n                                    console.log(courseData[course.id].preReq);\n                                    if (Object.values(courseData[course.id].preReq).every(course => course === true)){\n                                        courseData[course.id].preReqCheck = \"black\";\n                                    } else {\n                                        // alert(\"Warning: Pre-Reqs not met.\");\n                                        courseData[course.id].preReqCheck = \"red\";\n                                    }\n                                    updateColor(courseData[course.id]);\n                                }\n                                NEW_SEMESTER_MAP[mapKey].push(course);\n\n                                for (const [key, value] of Object.entries(NEW_SEMESTER_MAP)) {\n                                    console.log([key,value]);\n                                    NEW_SEMESTER_MAP[key].forEach(item => {\n                                        if(Object.keys(item.preReq).length > 0) {\n                                            if (Object.values(item.preReq).every(course => course === true)){\n                                                item.preReqCheck = \"black\";\n                                            } else {\n                                                item.preReqCheck = \"red\";\n                                            }\n                                            updateColor(item);\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                    }\n                });\n            });\n            \n            \n        });\n\n        setButtonList(buttonList);\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        \n        return NEW_SEMESTER_MAP;\n    }\n\n    function getSemesterName(count: number) {\n        let newCount = count;\n        let season = \"\";\n        if (count % 2 !== 0) {\n            newCount = (count+1) / 2;\n            season = \"Fall\";\n        } else {\n            newCount = count/2;\n            season = \"Spring\";\n        }\n\n        return `${season} ${newCount}`;\n\n    }\n\n    function addCourse(id: number, key: string) {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n        \n        //  PREREQ MET IN PRIOR SEMESTER\n        if (Object.keys(courseData[id].preReq).length > 0){\n            console.log(courseData[id].preReq);\n            if (Object.values(courseData[id].preReq).every(course => course === true)){\n                courseData[id].preReqCheck = \"black\";\n            } else {\n                preReqAlert();\n                courseData[id].preReqCheck = \"red\";\n            }\n            updateColor(courseData[id]);\n        }\n\n        if (SEMESTER_MAP[key].length === 6) {\n            maxNumberOfCoursesAlert();\n        } else {\n            for (const [key, value] of Object.entries(courseData)) {\n                console.log([key,value]);\n                Object.keys(value.preReq).forEach(courseName => {\n                    //console.log(courseName);\n                    if(courseName === courseData[id].name) {\n                        console.log(courseName);\n                        value.preReq[courseName] = true;\n                    }\n                });\n            }\n            NEW_SEMESTER_MAP[key].push(courseData[id]);\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        }\n\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n    }\n\n    function deleteSavedSemester(key: string) {\n        Swal.fire({\n            title: `Are you sure you want to delete \"${key}\"?`,\n            showDenyButton: true,\n            confirmButtonText: `Delete \"${key}\"`,\n            denyButtonText: \"Don't delete\",\n            icon: \"warning\"\n        }).then((result) => {\n            /* Read more about isConfirmed, isDenied below */\n            if (result.isConfirmed) {\n                localStorage.removeItem(key);\n                Swal.fire(`\"${key}\" Deleted 😁!`, \"\", \"success\");\n            } else if (result.isDenied) {\n                Swal.fire(`\"${key}\" was not Deleted 😮‍💨.`, \"\", \"info\");\n            }\n        });\n    }\n\n    function preReqAlert() {\n        Swal.fire(\n            \"Pre-Req Error!\",\n            \"Warning: Pre-Reqs not met 🤔.\",\n            \"error\"\n        );\n    }\n\n    function maxNumberOfCoursesAlert() {\n        Swal.fire(\n            \"Getting Studious!\",\n            \"Warning: Max number of courses selected for semester 📚.\",\n            \"error\"\n        );\n    }\n\n    function removeAllCourses() {\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP}; \n        for (const [key] of Object.entries(NEW_SEMESTER_MAP)) {\n            Object.values(NEW_SEMESTER_MAP[key]).forEach(course => {\n                removePreReq(course);\n                NEW_SEMESTER_MAP[key].pop();\n            });\n            NEW_SEMESTER_MAP[key]=[];\n        }\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n    }\n\n    function removePreReq(course: Course) {\n        for (const [key, value] of Object.entries(courseData)) {\n            console.log([key,value]);\n            Object.keys(value.preReq).forEach(courseName => {\n                //console.log(courseName);\n                if(courseName === course.name) {\n                    console.log(courseName);\n                    value.preReq[courseName] = false;\n                }\n            });\n        }\n        for (const [key, value] of Object.entries(SEMESTER_MAP)) {\n            console.log([key,value]);\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        }\n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return(\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Saved Semesters\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n                {Object.keys(localStorage).map(key =>\n                    <div \n                        style={{display: \"inline-flex\"}} \n                        key={key}>\n                        <Dropdown.Item \n                            onClick={() => loadSave(key)}\n                        >{key}\n                            \n                        </Dropdown.Item>\n                        <button onClick={() => deleteSavedSemester(key)}>\n                            <ImCross></ImCross>\n                        </button>\n                    </div>\n                )}\n                <ClearSavedSemestersButton></ClearSavedSemestersButton>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\n","// Source Imports\nimport React from \"react\";\nimport { Course } from \"../../interfaces/course\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\n\n// Design Imports\nimport \"../../css/AddRemoveSemester.css\";\n\n// Breadcrumbs:\n// Main Page / AddSemesterButton - appends new semester\nexport default function AddSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[]\n}): JSX.Element {\n    \n    function addSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        buttonList.push({name: getSemesterName(semesterCount), value: semesterCount});\n        setButtonList(buttonList);\n\n        NEW_SEMESTER_MAP[\"\"+semesterCount] = [];\n        SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n        count++;\n        setSemesterCount(count);\n    }\n\n    function getSemesterName(count: number) {\n        let newCount = count;\n        let season = \"\";\n        if (count % 2 !== 0) {\n            newCount = (count+1) / 2;\n            season = \"Fall\";\n        } else {\n            newCount = count/2;\n            season = \"Spring\";\n        }\n\n        return `${season} ${newCount}`;\n\n    }\n\n    return(\n        <button className=\"add_button\" data-testid=\"btn-add-semester\" onClick={() => addSemester()}>Add Semester</button>\n    );\n}","// Source Imports\nimport React from \"react\";\nimport courseData from \"../../assets/courses\";\nimport { ButtonList } from \"../../interfaces/buttonList\";\nimport { Course } from \"../../interfaces/course\";\nimport Swal from \"sweetalert2\";\n\n// Design Imports\nimport \"../../css/AddRemoveSemester.css\";\n\n// Breadcrumbs:\n// Main Page / RemoveSemesterButton - clears courses and removes semester\nexport default function RemoveSemesterButton({ SET_SEMESTER_MAP, SEMESTER_MAP, setSemesterCount, semesterCount, setButtonList, buttonList, setSemesterSelect, setSemesterHeader }: {\n    SET_SEMESTER_MAP: (s: Record<string, Course[]>) => void, SEMESTER_MAP: Record<string, Course[]>,\n    setSemesterCount: (c: number) => void, semesterCount: number,\n    setButtonList: (b: ButtonList[]) => void, buttonList: ButtonList[],\n    setSemesterSelect: (s: string | null) => void,\n    setSemesterHeader: (h: string) => void\n}): JSX.Element {\n    \n    function removeSemester() {\n        let count = semesterCount;\n        const NEW_SEMESTER_MAP = {...SEMESTER_MAP};\n\n        if (count === 2) {\n            Swal.fire(\n                \"Invalid Operation!\",\n                \"Cannot remove any more semesters 😅.\",\n                \"warning\"\n            );\n        } else {\n\n            // Default to render first semester since it will never be deleted.\n            setSemesterSelect(\"1\");\n            setSemesterHeader(buttonList[0].name);\n\n            // Clear last semester's courses before deletion\n            removeAllCourses();\n\n            // Remove last semester\n            buttonList.pop();\n            setButtonList(buttonList);\n\n            delete NEW_SEMESTER_MAP[semesterCount-1];\n            SET_SEMESTER_MAP(NEW_SEMESTER_MAP);\n\n            count--;\n            setSemesterCount(count);\n        }\n    }\n\n    function removeAllCourses() {\n        Object.values(SEMESTER_MAP[semesterCount-1]).forEach(course => {\n            removePreReq(course);\n        });\n        SET_SEMESTER_MAP({...SEMESTER_MAP, [semesterCount-1]: []}); // Set classList to an empty array to clear all selected courses\n    }\n\n    function removePreReq(course: Course) {\n        Object.values(courseData).forEach(value => {\n            Object.keys(course.preReq).forEach(courseName => {\n                if(courseName === course.name) {\n                    value.preReq[courseName] = false;\n                }\n            });\n        });\n\n        Object.keys(SEMESTER_MAP).forEach(key => {\n            SEMESTER_MAP[key].forEach(item => {\n                if(Object.keys(item.preReq).length > 0) {\n                    if (Object.values(item.preReq).every(course => course === true)){\n                        item.preReqCheck = \"black\";\n                    } else {\n                        item.preReqCheck = \"red\";\n                    }\n                    updateColor(item);\n                }\n            });\n        });\n        \n    }\n\n    function updateColor(course: Course) {\n        return course.preReqCheck;\n    }\n\n    return(\n        <button className=\"remove_button\" data-testid=\"btn-remove-semester\" onClick={() => removeSemester()}>Remove Semester</button>\n    );\n}","import React from \"react\";\n\nimport \"../../css/SelectedSave.css\";\n\n// Breadcrumbs:\n// Main Page / SelectedSaveHeader\nexport default function SelectedSaveHeader({ selectedSave }: {\n    selectedSave: string\n}): JSX.Element {\n    return(\n        <h3 className=\"save-header\">{selectedSave}</h3>\n    );\n}","// Source Imports\nimport React, { useState } from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport { ButtonList } from \"../interfaces/buttonList\";\nimport SEMESTER_MAP_INIT from \"../assets/stateInitializers/semesterMap\";\nimport buttonListInit from \"../assets/stateInitializers/buttonList\";\n\n// Component Imports\nimport { Board } from \"./Views/Board\";\nimport DisplayCourses from \"./Right_Menu/DisplayCourses\";\nimport SideMenu from \"./Left_Menu/SideMenu\";\nimport DegreePlan from \"./Views/DegreePlan\";\nimport SaveBin from \"./Save_Later_Bin/SaveBin\";\nimport SaveButton from \"./Save_Load_Semesters/SaveButton\";\nimport AccessSavedSemestersButton from \"./Save_Load_Semesters/AccessSavedSemestersButton\";\nimport AddSemesterButton from \"./Add_Remove_Semesters/AddSemesterButton\";\nimport RemoveSemesterButton from \"./Add_Remove_Semesters/RemoveSemesterButton\";\nimport SelectedSaveHeader from \"./Save_Load_Semesters/SelectedSaveHeader\";\n\n// Design Imports\nimport \"../css/App.css\";\n\n// Breadcrumbs:\n// Main Page\nfunction MainPage({ visibleView, setVisibleView }: {\n    setVisibleView: (s: string | null) => void, visibleView: string | null\n}): JSX.Element {\n    const [semesterSelect, setSemesterSelect] = useState<string | null>(\"1\");\n    const [semesterHeader, setSemesterHeader] = useState<string>(\"Fall 1\");\n\n\n    // Selected Save Variable\n    const [selectedSave, setSelectedSave] = useState<string>(\"No Save Selected\");\n    \n    // Bin Variables\n    const [binVisible, setBinVisible] = useState<boolean>(false);\n    const SAVE_BIN_INIT: Course[] = [];\n    const [SAVE_BIN, SET_SAVE_BIN] = useState<Course[]>(SAVE_BIN_INIT);\n\n    const [semesterCount, setSemesterCount] = useState<number>(9);\n    const [buttonList, setButtonList] = useState<ButtonList[]>(buttonListInit);\n   \n    // SEMESTER_MAP: useState to modify each semester and its courses\n    const [SEMESTER_MAP, SET_SEMESTER_MAP] = useState<Record<string, Course[]>>(SEMESTER_MAP_INIT);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                UD CIS Scheduler\n                <p>Srinath Venkatesh, Elliot Tingey, Geoffrey Linderman</p>\n\n                <SaveButton\n                    SEMESTER_MAP={SEMESTER_MAP}\n                ></SaveButton>\n                { localStorage.length > 0 && \n                <div>\n                    <AccessSavedSemestersButton\n                        SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                        SEMESTER_MAP={SEMESTER_MAP}\n                        setSemesterCount={setSemesterCount}\n                        semesterCount={semesterCount}\n                        setButtonList={setButtonList}\n                        buttonList={buttonList}\n                        setSelectedSave={setSelectedSave}\n                    ></AccessSavedSemestersButton> \n                    <SelectedSaveHeader\n                        selectedSave={selectedSave}\n                    ></SelectedSaveHeader>\n                </div>\n                }\n                \n            </header>\n            <section className=\"cell-left\">\n                <p>Menu</p>\n                <SideMenu\n                    setVisibleView={setVisibleView}\n                ></SideMenu>\n            </section>\n            <section className=\"cell-main\">\n\n                <RemoveSemesterButton\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                ></RemoveSemesterButton>\n                \n                <AddSemesterButton\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterCount={setSemesterCount}\n                    semesterCount={semesterCount}\n                    setButtonList={setButtonList}\n                    buttonList={buttonList}\n                ></AddSemesterButton>\n\n                \n                { visibleView === \"2\" && <Board\n                    semesterHeader={semesterHeader}\n                    setSemesterHeader={setSemesterHeader}\n                    setSemesterSelect={setSemesterSelect}\n                    semesterSelect={semesterSelect}\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                    binVisible={binVisible}\n                    buttonList={buttonList}\n                ></Board> }\n                \n                { visibleView === \"3\" && <DegreePlan\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    setSemesterSelect={setSemesterSelect}\n                    setSemesterHeader={setSemesterHeader}\n                    buttonList={buttonList}\n                ></DegreePlan> }\n                \n            </section>\n            <section className=\"cell-right\">\n                { (visibleView === \"2\" || visibleView === \"3\") &&  <DisplayCourses\n                    SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                    SEMESTER_MAP={SEMESTER_MAP}\n                    semesterSelect={semesterSelect}\n                    setBinVisible={setBinVisible}\n                    binVisible={binVisible}\n                    SET_SAVE_BIN={SET_SAVE_BIN}\n                    SAVE_BIN={SAVE_BIN}\n                ></DisplayCourses> }            \n            </section>\n\n            <SaveBin\n                setBinVisible={setBinVisible}\n                binVisible={binVisible}\n                SET_SAVE_BIN={SET_SAVE_BIN}\n                SAVE_BIN={SAVE_BIN}\n                SET_SEMESTER_MAP={SET_SEMESTER_MAP}\n                SEMESTER_MAP={SEMESTER_MAP}\n                semesterSelect={semesterSelect}\n            ></SaveBin>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from \"react\";\n\nimport \"../css/LandingPage.css\";\n\nexport default function LandingPage({ setVisibleView }: {\n    setVisibleView: (s: string | null) => void\n}): JSX.Element {\n\n    function changeView() {\n        setVisibleView(\"2\");\n        //setTimeout(() => setVisibleView(\"2\"), 2000);\n    }\n\n    return(\n        <div className=\"home\">\n            <div className=\"centered\">\n                <h1>UD CIS Scheduler</h1>\n                <h2>Start Building Your Plan</h2>\n                <button data-testid=\"enter-main\" onClick={() => changeView()}>Enter</button>\n            </div>\n        </div>\n    );\n\n}","import React, { useState } from \"react\";\nimport \"./css/App.css\";\n\nimport MainPage from \"./components/MainPage\";\nimport LandingPage from \"./components/LandingPage\";\n\nfunction App(): JSX.Element {\n    const [visibleView, setVisibleView] = useState<string | null>(\"0\"); // Changes the different board views\n\n    return (\n        <div>\n            \n            {visibleView === \"0\" && <LandingPage\n                setVisibleView={setVisibleView}\n            ></LandingPage> }\n        \n            {visibleView !== \"0\" && <MainPage\n                setVisibleView={setVisibleView}\n                visibleView={visibleView}\n            ></MainPage> }\n        \n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}